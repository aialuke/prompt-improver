#!/usr/bin/env python3
"""
Test Priority 4B Component Enhancements

Verifies that the 2025 enhancements have been successfully added to:
1. MultiLevelCache - OpenTelemetry tracing
2. ResourceManager - Circuit breakers and Kubernetes integration
"""

import asyncio
import logging
import sys
import time
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent / "src"))

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


async def test_multilevel_cache_enhancements():
    """Test MultiLevelCache OpenTelemetry enhancements."""
    logger.info("üîç Testing MultiLevelCache OpenTelemetry Enhancements")

    try:
        from prompt_improver.utils.multi_level_cache import MultiLevelCache

        # Test basic cache functionality with tracing
        cache = MultiLevelCache(l1_max_size=100, enable_l2=False)  # Disable Redis for testing

        # Test traced operations
        await cache.set("test_key", {"data": "test_value"})
        result = await cache.get("test_key")

        assert result == {"data": "test_value"}, "Cache get/set should work"

        # Test delete operation
        await cache.delete("test_key")
        result = await cache.get("test_key")
        assert result is None, "Key should be deleted"

        # Test performance stats (should update OpenTelemetry metrics if available)
        stats = cache.get_performance_stats()
        assert "total_requests" in stats, "Performance stats should be available"

        # Test clear operation
        await cache.set("clear_test", "value")
        await cache.clear()
        result = await cache.get("clear_test")
        assert result is None, "Cache should be cleared"

        # Verify OpenTelemetry tracing decorator exists
        assert hasattr(cache.get, '__wrapped__'), "get method should be wrapped with tracing"
        assert hasattr(cache.set, '__wrapped__'), "set method should be wrapped with tracing"

        logger.info("‚úÖ MultiLevelCache enhancements working correctly")
        return True

    except Exception as e:
        logger.error(f"‚ùå MultiLevelCache enhancement test failed: {e}")
        return False


async def test_resource_manager_circuit_breakers():
    """Test ResourceManager circuit breaker enhancements."""
    logger.info("üîç Testing ResourceManager Circuit Breaker Enhancements")
    
    try:
        from prompt_improver.ml.orchestration.core.resource_manager import (
            ResourceManager, ResourceType, ResourceExhaustionError
        )
        from prompt_improver.ml.orchestration.config.orchestrator_config import OrchestratorConfig
        
        # Create resource manager with circuit breakers
        config = OrchestratorConfig()
        resource_manager = ResourceManager(config)
        
        # Initialize the resource manager
        await resource_manager.initialize()
        
        # Test circuit breaker status
        cb_status = resource_manager.get_circuit_breaker_status()
        assert isinstance(cb_status, dict), "Circuit breaker status should be available"
        assert "cpu" in cb_status, "CPU circuit breaker should be initialized"
        assert "gpu" in cb_status, "GPU circuit breaker should be initialized"
        
        logger.info(f"Circuit breaker status: {cb_status}")
        
        # Test normal resource allocation (should work)
        try:
            allocation_id = await resource_manager.allocate_resource(
                ResourceType.CPU, 0.1, "test_component"
            )
            assert allocation_id is not None, "Resource allocation should succeed"
            
            # Release the resource
            await resource_manager.release_resource(allocation_id)
            logger.info("‚úÖ Normal resource allocation with circuit breaker protection works")
            
        except Exception as e:
            logger.warning(f"Resource allocation test failed (may be expected): {e}")
        
        # Test circuit breaker state after operations
        cb_status_after = resource_manager.get_circuit_breaker_status()
        logger.info(f"Circuit breaker status after operations: {cb_status_after}")
        
        # Cleanup
        await resource_manager.shutdown()
        
        logger.info("‚úÖ ResourceManager circuit breaker enhancements working correctly")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå ResourceManager circuit breaker test failed: {e}")
        return False


async def test_kubernetes_integration():
    """Test ResourceManager Kubernetes integration."""
    logger.info("üîç Testing ResourceManager Kubernetes Integration")
    
    try:
        from prompt_improver.ml.orchestration.core.resource_manager import ResourceManager
        from prompt_improver.ml.orchestration.config.orchestrator_config import OrchestratorConfig
        
        # Create resource manager
        config = OrchestratorConfig()
        resource_manager = ResourceManager(config)
        
        # Initialize the resource manager
        await resource_manager.initialize()
        
        # Test cluster resource info (should work even if Kubernetes is not available)
        cluster_info = await resource_manager.get_cluster_resource_info()
        assert isinstance(cluster_info, dict), "Cluster info should be a dictionary"
        assert "kubernetes_available" in cluster_info, "Should indicate Kubernetes availability"
        
        if cluster_info["kubernetes_available"]:
            logger.info("‚úÖ Kubernetes integration is available and working")
            logger.info(f"Cluster info: {cluster_info}")
        else:
            logger.info("‚ÑπÔ∏è Kubernetes integration not available (expected in local testing)")
        
        # Test namespace resource utilization
        namespace_info = await resource_manager.get_namespace_resource_utilization()
        assert isinstance(namespace_info, dict), "Namespace info should be a dictionary"
        
        # Test HPA creation (should handle gracefully if Kubernetes not available)
        hpa_result = await resource_manager.create_hpa_for_component(
            "test-component", min_replicas=1, max_replicas=3
        )
        logger.info(f"HPA creation result: {hpa_result}")
        
        # Cleanup
        await resource_manager.shutdown()
        
        logger.info("‚úÖ ResourceManager Kubernetes integration working correctly")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå ResourceManager Kubernetes integration test failed: {e}")
        return False


async def test_orchestrator_integration():
    """Test that enhanced components work through orchestrator."""
    logger.info("üîç Testing Orchestrator Integration")
    
    try:
        from prompt_improver.ml.orchestration.integration.direct_component_loader import DirectComponentLoader
        from prompt_improver.ml.orchestration.core.component_registry import ComponentTier
        
        loader = DirectComponentLoader()
        
        # Test MultiLevelCache loading
        cache_component = await loader.load_component("multi_level_cache", ComponentTier.TIER_4_PERFORMANCE)
        assert cache_component is not None, "MultiLevelCache should load through orchestrator"
        logger.info("‚úÖ MultiLevelCache loads through orchestrator")
        
        # Test ResourceManager loading
        rm_component = await loader.load_component("resource_manager", ComponentTier.TIER_4_PERFORMANCE)
        assert rm_component is not None, "ResourceManager should load through orchestrator"
        logger.info("‚úÖ ResourceManager loads through orchestrator")
        
        logger.info("‚úÖ Orchestrator integration working correctly")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Orchestrator integration test failed: {e}")
        return False


async def main():
    """Run all enhancement tests."""
    logger.info("üöÄ Starting Priority 4B Enhancement Tests")
    logger.info("=" * 60)
    
    results = {}
    
    # Test MultiLevelCache enhancements
    results["multilevel_cache"] = await test_multilevel_cache_enhancements()
    
    # Test ResourceManager circuit breakers
    results["circuit_breakers"] = await test_resource_manager_circuit_breakers()
    
    # Test Kubernetes integration
    results["kubernetes_integration"] = await test_kubernetes_integration()
    
    # Test orchestrator integration
    results["orchestrator_integration"] = await test_orchestrator_integration()
    
    # Summary
    logger.info("\n" + "=" * 60)
    logger.info("ENHANCEMENT TEST SUMMARY")
    logger.info("=" * 60)
    
    passed_tests = sum(results.values())
    total_tests = len(results)
    
    for test_name, passed in results.items():
        status = "‚úÖ PASSED" if passed else "‚ùå FAILED"
        logger.info(f"  {status} {test_name}")
    
    logger.info(f"\nOverall: {passed_tests}/{total_tests} tests passed")
    
    if passed_tests == total_tests:
        logger.info("üéâ ALL ENHANCEMENT TESTS PASSED!")
        logger.info("‚úÖ Priority 4B components successfully enhanced with 2025 features")
        logger.info("‚úÖ OpenTelemetry tracing added to MultiLevelCache")
        logger.info("‚úÖ Circuit breakers added to ResourceManager")
        logger.info("‚úÖ Kubernetes integration added to ResourceManager")
        logger.info("‚úÖ Components work through orchestrator")
        return True
    else:
        logger.info(f"‚ö†Ô∏è {total_tests - passed_tests} tests failed")
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
