[project]
name = "adaptive-prompt-enhancement-system"
version = "1.0.0"
description = "Intelligent prompt optimization with ML-driven rule learning."
requires-python = ">=3.11"

dependencies = [
  # Core ML Stack
  "scikit-learn>=1.4.0",
  "optuna>=3.5.0",
  "mlflow>=2.9.0",
  "pandas>=2.0.0",
  "numpy>=1.24.0",
  "scipy>=1.10.0",
  # Advanced ML Libraries
  "hdbscan>=0.8.29",
  "mlxtend>=0.23.0",
  "causal-learn>=0.1.3.6",  # Causal discovery algorithms (PC, GES, etc.)
  # Phase 3: Privacy & Security (Production Excellence)
  "opacus>=1.4.0",  # Differential privacy for ML
  "cryptography>=41.0.0",  # Secure aggregation and encryption
  "adversarial-robustness-toolbox>=1.15.0",  # Adversarial testing framework
  # Feature Engineering
  "sentence-transformers>=2.5.0",
  "transformers>=4.30.0",
  # Rule Engine & MCP Server
  "mcp-context-sdk>=0.1.0", # Corrected package name
  "pydantic>=2.5.0",
  "pyyaml>=6.0.0",
  "jsonschema>=4.20.0",
  # Performance Monitoring
  "evidently>=0.4.0",
  "prometheus-client>=0.19.0",
  # OpenTelemetry Distributed Tracing & Metrics
  "opentelemetry-api>=1.21.0",
  "opentelemetry-sdk>=1.21.0",
  "opentelemetry-exporter-otlp-proto-grpc>=1.21.0",
  "opentelemetry-exporter-otlp-proto-http>=1.21.0",
  "opentelemetry-instrumentation>=0.42b0",
  "opentelemetry-instrumentation-asyncpg>=0.42b0",
  "opentelemetry-instrumentation-httpx>=0.42b0",
  "opentelemetry-instrumentation-requests>=0.42b0",
  "opentelemetry-instrumentation-fastapi>=0.42b0",
  "opentelemetry-instrumentation-redis>=0.42b0",
  "opentelemetry-semantic-conventions>=0.42b0",
  "sqlmodel>=0.0.24",
  "asyncpg>=0.30.0",
  "psycopg[binary]>=3.1.0",
  "psycopg_pool>=3.1.0",
  "pydantic-settings>=2.10.1",
  "watchdog>=4.0.0",  # File system event monitoring for configuration hot-reload
  "greenlet>=3.2.3",
  "mcp>=1.10.1",
  "psutil>=5.8.0",  # Required for system resource monitoring in health checks
  "uvloop>=0.17.0",  # High-performance event loop for asyncio
]

[project.optional-dependencies]
dev = [
  "pytest>=8.2.0",
  "pytest-asyncio>=0.21.0",  # Essential for async test execution
  "sqlalchemy2-stubs",
  "types-redis",
  "pytest-cov>=4.0.0",       # Coverage support for async code
  "pytest-timeout>=2.1.0",   # Prevent hanging tests
  "mypy>=1.8.0",
  "ruff>=0.4.0",
  "httpx>=0.25.0", # For test client
]

[project.scripts]
# Ultra-minimal 3-command CLI entry point
apes = "prompt_improver.cli.clean_cli:app"

[tool.mypy]
# 2025 Best Practices: Strict mypy configuration
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
ignore_missing_imports = false
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_any_generics = true
disallow_subclassing_any = true
no_implicit_optional = true
strict_optional = true
strict_equality = true
check_untyped_defs = true
show_error_codes = true
show_column_numbers = true
pretty = true

# Source layout configuration
mypy_path = "src"
namespace_packages = true
explicit_package_bases = true

# Plugin support
plugins = ["sqlalchemy.ext.mypy.plugin", "pydantic.mypy"]

# Module-specific overrides for gradual adoption
[[tool.mypy.overrides]]
module = [
    "tests.*",
    "migrations.*",
    "scripts.*"
]
# Relaxed settings for test and utility code
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = [
    "sklearn.*",
    "nltk.*",
    "evidently.*",
    "kafka.*"
]
# Ignore missing stubs for packages without type support
ignore_missing_imports = true

[tool.ruff]
# Target Python 3.11+ with ML project awareness
target-version = "py311"
line-length = 88
indent-width = 4

# Source root for proper import resolution
src = ["src"]

# Comprehensive exclusions for ML project
exclude = [
    ".bzr", ".direnv", ".eggs", ".git", ".hg",
    ".mypy_cache", ".nox", ".pants.d", ".ruff_cache",
    ".svn", ".tox", ".venv", "__pypackages__",
    "_build", "buck-out", "build", "dist", "node_modules", "venv",

    # ML-specific exclusions
    "ml",                    # Legacy ML directory
    "mlruns",               # MLflow experiments (archived)
    "optuna_studies",       # Hyperparameter optimization (archived)
    "*.egg-info",           # Package metadata
    "**/__pycache__",       # Python cache
    "**/.*_cache",          # Various cache directories

    # Archive exclusions
    ".archive",              # Archived files
    "tests/deprecated",      # Deprecated tests (temporary)
]

# Enable preview mode for latest features
preview = true

[tool.ruff.lint]
# Curated rule selection based on official recommendations
select = [
    # Core Python best practices
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # Pyflakes
    "I",      # isort

    # Code quality & maintainability
    "C4",     # flake8-comprehensions
    "B",      # flake8-bugbear
    "A",      # flake8-builtins
    "G",      # flake8-logging-format
    "PIE",    # flake8-pie
    "T20",    # flake8-print
    "UP",     # pyupgrade
    "SIM",    # flake8-simplify
    "RUF",    # Ruff-specific rules

    # Security & performance
    "S",      # bandit
    "PERF",   # perflint

    # Async patterns
    "ASYNC",  # flake8-async

    # Documentation & type hints
    "D",      # pydocstyle
    "ANN",    # flake8-annotations

    # Import organization
    "TCH",    # flake8-type-checking
    "TID",    # flake8-tidy-imports

    # Error handling
    "BLE",    # flake8-blind-except
    "FBT",    # flake8-boolean-trap
    "RET",    # flake8-return

    # Code complexity
    "C90",    # mccabe
    "PLR",    # pylint refactor
    "PLW",    # pylint warnings
    "PLE",    # pylint errors

    # Unused code detection
    "F401",   # unused-import
    "F841",   # unused-variable
    "ARG",    # flake8-unused-arguments

    # Additional modern practices
    "PTH",    # flake8-use-pathlib
    "TD",     # flake8-todos
    "FIX",    # flake8-fixme
]

# ML specific ignores
ignore = [
    # Line length handled by formatter
    "E501",   # line-too-long

    # ML experiment patterns
    "T201",   # print-found (needed for ML debugging)
    "S101",   # assert-used (common in ML validation)
    "PLR0913", # too-many-arguments (ML models often have many params)
    "PLR0915", # too-many-statements (ML pipelines can be complex)

    # Legacy patterns (no longer needed)
    "B008",   # do-not-use-function-calls-in-argument-defaults (legacy - no longer needed)

    # Documentation (gradual adoption)
    "D100",   # undocumented-public-module
    "D103",   # undocumented-public-function
    "D104",   # undocumented-public-package

    # Type annotations (gradual adoption)
    "ANN001", # missing-type-annotation-for-function-argument
    "ANN002", # missing-type-annotation-for-args
    "ANN003", # missing-type-annotation-for-kwargs
    "ANN201", # missing-return-type-annotation

    # Async patterns
    "ASYNC109", # async-function-with-timeout (false positives)

    # Performance (carefully considered)
    "PERF203", # try-except-in-loop (sometimes necessary in ML)

    # TODO/FIXME patterns (transitional)
    "TD002",   # missing-todo-author (gradual adoption)
    "TD003",   # missing-todo-link (gradual adoption)
    "FIX002",  # line-contains-fixme (allow for development)
]

# Enable auto-fixing for safe rules
fixable = ["ALL"]
unfixable = [
    "F401",   # unused-import (manual review preferred)
    "F841",   # unused-variable (manual review preferred)
    "T20",    # print statements (manual review for ML debugging)
]

# Complexity limits
[tool.ruff.lint.mccabe]
max-complexity = 12  # Slightly higher for ML pipelines

[tool.ruff.lint.pylint]
max-args = 8         # Higher for ML model constructors
max-branches = 15    # Higher for ML decision trees
max-returns = 8      # Higher for complex ML functions
max-statements = 60  # Higher for ML pipelines

# File-specific rule customization
[tool.ruff.lint.per-file-ignores]
# Test files
"tests/**/*.py" = [
    "S101",   # assert-used (expected in tests)
    "PLR2004", # magic-value-comparison (test values)
    "ANN",    # missing-type-annotation (less critical in tests)
    "D",      # pydocstyle (documentation less critical)
    "ARG",    # unused-arguments (fixtures often unused)
    "FBT",    # boolean-trap (test flags are common)
    "PTH",    # use-pathlib (test paths can be strings)
]

# Configuration files
"**/config/*.py" = [
    "S105",   # hardcoded-password-string (config constants)
    "S106",   # hardcoded-password-func-arg
]

# Legacy ML bridge (transitional)
"ml/bridge.py" = [
    "ALL",    # Skip all rules for legacy code
]

# Main application entry points
"src/prompt_improver/main.py" = [
    "D100",   # Allow undocumented main module
    "T201",   # Allow print statements for startup/shutdown logging
]

# Service files (ML debugging and error logging)
"src/prompt_improver/services/*.py" = [
    "T201",   # Allow print statements for debugging ML processes
]

# Database models
"src/prompt_improver/database/*.py" = [
    "A003",   # builtin-attribute-shadowing (SQLAlchemy patterns)
]

# MCP server
"src/prompt_improver/mcp_server/*.py" = [
    "ANN401", # any-type (MCP protocol flexibility)
]

[tool.ruff.lint.isort]
# Import organization
known-first-party = ["prompt_improver"]
known-third-party = [
    "pydantic", "sqlmodel", "asyncpg",
    "scikit-learn", "optuna", "mlflow", "pandas", "numpy",
    "transformers", "sentence-transformers"
]
combine-as-imports = true
force-wrap-aliases = true
split-on-trailing-comma = true

[tool.ruff.lint.pydocstyle]
# Google-style docstrings for ML projects
convention = "google"

[tool.ruff.lint.flake8-type-checking]
# Optimize type checking imports
runtime-evaluated-base-classes = ["pydantic.BaseModel", "sqlmodel.SQLModel"]

[tool.ruff.lint.flake8-annotations]
# Gradual type annotation adoption
mypy-init-return = true
suppress-dummy-args = true

[tool.ruff.lint.flake8-bugbear]
# Allow zip() without strict parameter for Python < 3.10 compatibility
extend-immutable-calls = []

[tool.ruff.lint.flake8-tidy-imports]
# Ban relative imports
ban-relative-imports = "all"

[tool.ruff.lint.flake8-unused-arguments]
# Ignore unused arguments in specific patterns
ignore-variadic-names = true

[tool.ruff.format]
# Modern Python formatting
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = 72

[tool.pytest.ini_options]
minversion = "8.2.0"

# Test markers moved to comprehensive section below

# Enhanced testing configuration with coverage and performance monitoring
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--strict-config",
    "--tb=short",  # Shorter traceback format for faster output
    "--durations=10",  # Show 10 slowest tests
    "--maxfail=10",  # Stop after 10 failures for faster feedback
    # Performance optimization flags
    "--disable-warnings",  # Disable warnings for faster execution
    # Import mode for better module resolution (2025 best practice)
    "--import-mode=importlib",
    # Temporarily disable coverage to focus on test functionality
    # "--cov=src",
    # "--cov-branch",
    # "--cov-report=term-missing:skip-covered",
    # "--cov-report=html:htmlcov",
    # "--cov-fail-under=85",
]

testpaths = ["tests"]  # All tests are under tests/ directory
pythonpath = ["src"]  # Add src to Python path for proper imports

# Performance monitoring (requires pytest-timeout plugin)
timeout = 30  # 30 second timeout for tests to prevent hanging
timeout_method = "thread"

# Enable automatic async test detection
asyncio_mode = "auto"

# Default event loop scopes for consistent behavior (2025 best practice)
asyncio_default_fixture_loop_scope = "function"
asyncio_default_test_loop_scope = "function"

# Enhanced test categorization with reorganized structure
markers = [
    "asyncio: marks tests as async",
    "integration: marks tests as integration tests requiring real components",
    "slow: marks tests as slow-running (>1 second)",
    "performance: marks tests that validate performance requirements",
    "unit: marks tests as pure unit tests with maximum isolation",
    "benchmark: marks tests for pytest-benchmark performance testing",
    "ml_contracts: marks tests for ML model contract validation",
    "property_based: marks tests using Hypothesis property-based testing",
    "metamorphic: marks tests for ML metamorphic property validation",
    "ml_performance: marks tests for ML component performance characterization",
    "stress: marks tests as stress/load tests for high-volume scenarios",
    "ml_data_validation: marks tests for ML data quality validation",
    "database_constraints: marks tests for database constraint validation",
    "database_transactions: marks tests for database transaction integrity",
    "database_performance: marks tests for database operation performance",
    "database_schema: marks tests for database schema validation",
    "redis_integration: marks tests requiring Redis container with Testcontainers",
    "redis_performance: marks tests for Redis performance characteristics",
    "cli_file_io: marks tests for CLI file system operations",
    "cli_error_scenarios: marks tests for CLI error handling",
    "cli_performance: marks tests for CLI performance characteristics",
    "cli_integration: marks tests for CLI end-to-end workflows",
    "regression: marks tests for regression prevention",
    "deprecated: marks tests that are temporary/legacy and may be removed",
    "error_handling: marks tests for error handling and edge cases",
    "real_behavior_validation: marks tests for validating real behavior migration",
]

# Test filtering
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Test discovery patterns
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.importlinter]
# Import Linter configuration for architectural boundary enforcement
root_packages = ["prompt_improver"]

[[tool.importlinter.contracts]]
name = "Clean Architecture Layers"
type = "layers"
layers = [
    "prompt_improver.core",
    "prompt_improver.shared", 
    "prompt_improver.domain | prompt_improver.ml | prompt_improver.rule_engine",
    "prompt_improver.application",
    "prompt_improver.infrastructure | prompt_improver.database | prompt_improver.performance | prompt_improver.security",
    "prompt_improver.presentation | prompt_improver.api | prompt_improver.cli | prompt_improver.mcp_server"
]

[[tool.importlinter.contracts]]
name = "Core Module Independence"
type = "independence"
modules = ["prompt_improver.core"]

[[tool.importlinter.contracts]]
name = "Domain Independence"
type = "independence" 
modules = [
    "prompt_improver.domain",
    "prompt_improver.ml",
    "prompt_improver.rule_engine"
]

[[tool.importlinter.contracts]]
name = "No Circular Dependencies"
type = "forbidden"
source_modules = ["prompt_improver"]
forbidden_modules = ["prompt_improver"]
ignore_imports = [
    "prompt_improver -> prompt_improver.core",
    "prompt_improver -> prompt_improver.shared"
]

[[tool.importlinter.contracts]]
name = "Infrastructure Boundaries"
type = "forbidden"
source_modules = [
    "prompt_improver.domain",
    "prompt_improver.ml",
    "prompt_improver.rule_engine"
]
forbidden_modules = [
    "prompt_improver.database",
    "prompt_improver.api",
    "prompt_improver.cli",
    "prompt_improver.mcp_server",
    "prompt_improver.performance.monitoring"
]

[[tool.importlinter.contracts]]
name = "Presentation Layer Isolation"
type = "forbidden"
source_modules = [
    "prompt_improver.api",
    "prompt_improver.cli", 
    "prompt_improver.mcp_server"
]
forbidden_modules = [
    "prompt_improver.database",
    "prompt_improver.ml.lifecycle",
    "prompt_improver.performance.monitoring.health"
]
