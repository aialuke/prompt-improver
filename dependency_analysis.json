{
  "graph": {
    "main": [
      "utils.redis_cache"
    ],
    "__main__": [
      "cli"
    ],
    "metrics.api_metrics": [
      "performance.monitoring.metrics_registry"
    ],
    "metrics.ml_metrics": [
      "performance.monitoring.metrics_registry"
    ],
    "metrics.system_metrics": [
      "performance.monitoring.metrics_registry",
      "core.config_manager"
    ],
    "metrics.application_instrumentation": [
      "utils.redis_cache",
      "metrics.business_intelligence_metrics",
      "metrics.ml_metrics",
      "metrics.integration_middleware",
      "api",
      "core.services.prompt_improvement",
      "ml.core.ml_integration",
      "metrics.performance_metrics",
      "database"
    ],
    "metrics.dashboard_exports": [
      "metrics.business_intelligence_metrics",
      "metrics.ml_metrics",
      "metrics.aggregation_engine",
      "metrics.api_metrics",
      "metrics.performance_metrics"
    ],
    "metrics.aggregation_engine": [
      "metrics.business_intelligence_metrics",
      "metrics.ml_metrics",
      "performance.monitoring.metrics_registry",
      "metrics.api_metrics",
      "metrics.performance_metrics"
    ],
    "metrics.performance_metrics": [
      "performance.monitoring.metrics_registry"
    ],
    "metrics.__init__": [
      "metrics.system_metrics",
      "metrics.business_intelligence_metrics",
      "metrics.ml_metrics",
      "metrics.dashboard_exports",
      "metrics.aggregation_engine",
      "metrics.api_metrics",
      "metrics.performance_metrics"
    ],
    "metrics.integration_middleware": [
      "metrics.business_intelligence_metrics",
      "metrics.api_metrics",
      "metrics.ml_metrics",
      "metrics.performance_metrics"
    ],
    "metrics.business_intelligence_metrics": [
      "performance.monitoring.metrics_registry"
    ],
    "database.models": [
      "database.registry",
      "utils.datetime_utils"
    ],
    "database.adaptive_connection_pool": [
      "database.config"
    ],
    "database.ha_connection_manager": [
      "database.config",
      "utils.redis_cache"
    ],
    "database.performance_monitor": [
      "ml.orchestration.events.event_types",
      "database.psycopg_client"
    ],
    "database.query_optimizer": [
      "ml.orchestration.events.event_types",
      "performance.optimization.performance_optimizer",
      "utils.redis_cache",
      "database.psycopg_client"
    ],
    "database.__init__": [
      "database.utils",
      "database.config",
      "database.connection",
      "database.models"
    ],
    "database.error_handling": [
      "ml.orchestration.core.unified_retry_manager",
      "performance.monitoring.metrics_registry",
      "utils.datetime_utils"
    ],
    "database.connection": [
      "database.config",
      "security.secure_startup"
    ],
    "database.connection_pool_optimizer": [
      "core.config",
      "performance.monitoring.metrics_registry",
      "database.psycopg_client"
    ],
    "database.optimization_integration": [
      "database.connection_pool_optimizer",
      "database.psycopg_client",
      "database.cache_layer",
      "ml.orchestration.events.event_bus",
      "ml.orchestration.events.event_types",
      "database.performance_monitor",
      "database.query_optimizer"
    ],
    "database.cache_layer": [
      "performance.monitoring.metrics_registry",
      "utils.redis_cache"
    ],
    "database.analytics_query_interface": [
      "database.models",
      "utils.datetime_utils",
      "database.query_optimizer"
    ],
    "database.mcp_connection_pool": [
      "database.config"
    ],
    "database.psycopg_client": [
      "ml.orchestration.core.unified_retry_manager",
      "database.config",
      "database.error_handling",
      "utils.datetime_utils"
    ],
    "database.health.query_performance_analyzer": [
      "database.connection",
      "database.psycopg_client"
    ],
    "database.health.index_health_assessor": [
      "database.connection",
      "database.psycopg_client"
    ],
    "database.health.__init__": [
      "database.health.query_performance_analyzer",
      "database.health.database_health_monitor",
      "database.health.index_health_assessor",
      "database.health.connection_pool_monitor",
      "database.health.table_bloat_detector"
    ],
    "database.health.table_bloat_detector": [
      "database.connection",
      "database.psycopg_client"
    ],
    "database.health.connection_pool_monitor": [
      "database.connection",
      "database.psycopg_client"
    ],
    "database.health.database_health_monitor": [
      "database.connection_pool_optimizer",
      "database.health.query_performance_analyzer",
      "database.psycopg_client",
      "database.health.connection_pool_monitor",
      "database.health.index_health_assessor",
      "database.connection",
      "database.health.table_bloat_detector"
    ],
    "database.models.generation_models": [
      "database.utils.datetime_utils"
    ],
    "database.services.generation_service": [
      "database.models",
      "utils.datetime_utils"
    ],
    "core.config_migration_example": [
      "database.config",
      "core.config"
    ],
    "core.retry_implementations": [
      "core.protocols.retry_protocols"
    ],
    "core.config_manager": [
      "security.config_validator"
    ],
    "core.config_validator": [
      "database.config",
      "security.config_validator"
    ],
    "core.__init__": [
      "core.services.security",
      "core.interfaces.datetime_service",
      "core.services.datetime_service",
      "core.setup.migration",
      "core.di.container",
      "core.services.startup",
      "core.setup.initializer",
      "core.services.prompt_improvement",
      "core.services.manager"
    ],
    "core.di.container": [
      "core.interfaces.datetime_service",
      "core.services.datetime_service"
    ],
    "core.setup.__init__": [
      "core.setup.initializer",
      "core.setup.migration"
    ],
    "core.setup.initializer": [
      "database.config",
      "core.setup.synthetic_data_generator",
      "core.mcp_server.mcp_server",
      "database.models",
      "database"
    ],
    "core.setup.migration": [
      "utils.datetime_utils",
      "database"
    ],
    "core.protocols.__init__": [
      "core.protocols.retry_protocols"
    ],
    "core.services.startup": [
      "ml.optimization.batch.batch_processor",
      "performance.monitoring.health.service",
      "utils.session_store",
      "performance.monitoring.health.background_manager"
    ],
    "core.services.prompt_improvement": [
      "core.ml.core.training_data_loader",
      "core.optimization.rule_optimizer",
      "ml.core.ml_integration",
      "database.models",
      "core.optimization.multi_armed_bandit",
      "database",
      "core.database.models",
      "core.rule_engine.rules.clarity",
      "ml.optimization.algorithms.multi_armed_bandit",
      "core.evaluation.experiment_orchestrator",
      "core.ml.core.ml_integration",
      "utils.datetime_utils",
      "core.rule_engine.rules.specificity",
      "core.ml.models.model_manager",
      "core.rule_engine.rules.few_shot_examples",
      "core.services.analytics_factory",
      "core.rule_engine.rules.chain_of_thought",
      "core.rule_engine.rules.role_based_prompting",
      "ml.automl.orchestrator",
      "core.rule_engine.rules.xml_structure_enhancement",
      "performance.testing.ab_testing_service",
      "rule_engine.base"
    ],
    "core.services.security": [
      "core.services.analytics_factory",
      "database"
    ],
    "core.services.__init__": [
      "core.services.security",
      "core.services.prompt_improvement",
      "core.services.manager",
      "core.services.startup"
    ],
    "core.services.analytics_factory": [
      "database.analytics_query_interface",
      "core.services.service_registry",
      "ml.analytics.session_summary_reporter",
      "api.analytics_endpoints"
    ],
    "core.services.datetime_service": [
      "core.interfaces.datetime_service"
    ],
    "core.services.manager": [
      "utils.subprocess_security",
      "ml.orchestration.events.event_types",
      "core.database",
      "core.services.health",
      "database"
    ],
    "cache.__init__": [
      "cache.redis_health"
    ],
    "cache.redis_health": [
      "utils.redis_cache"
    ],
    "cache.redis_health_example": [
      "cache.redis_health"
    ],
    "security.key_manager": [
      "utils.datetime_utils"
    ],
    "security.rate_limit_middleware": [
      "security.redis_rate_limiter",
      "security.mcp_authentication"
    ],
    "security.mcp_middleware": [
      "security.mcp_authentication"
    ],
    "security.__init__": [
      "security.key_manager",
      "security.authorization",
      "security.adversarial_defense",
      "security.secure_logging",
      "security.authentication",
      "security.input_validator",
      "security.memory_guard",
      "security.federated_learning",
      "security.input_sanitization",
      "security.differential_privacy"
    ],
    "security.secure_startup": [
      "security.config_validator"
    ],
    "security.input_sanitization": [
      "ml.orchestration.events.event_types"
    ],
    "security.authentication": [
      "utils.datetime_utils"
    ],
    "security.mcp_authentication": [
      "security.authentication"
    ],
    "security.memory_guard": [
      "ml.orchestration.events.event_types"
    ],
    "security.auth_decorators": [
      "security.authentication",
      "security.input_validator"
    ],
    "security.input_validator": [
      "security.input_sanitization"
    ],
    "tui.__init__": [
      "tui.dashboard"
    ],
    "tui.dashboard": [
      "tui.widgets.system_overview",
      "tui.widgets.performance_metrics",
      "tui.widgets.ab_testing",
      "tui.data_provider",
      "tui.widgets.automl_status",
      "tui.widgets.service_control"
    ],
    "tui.data_provider": [
      "ml.automl.orchestrator",
      "performance.monitoring.health.service",
      "core.services.analytics_factory",
      "ml.evaluation.experiment_orchestrator",
      "core.services.manager"
    ],
    "tui.widgets.performance_metrics": [
      "performance.monitoring.performance_monitor"
    ],
    "tui.widgets.__init__": [
      "tui.widgets.system_overview",
      "tui.widgets.performance_metrics",
      "tui.widgets.ab_testing",
      "tui.widgets.automl_status",
      "tui.widgets.service_control"
    ],
    "utils.health_checks": [
      "performance.monitoring.health"
    ],
    "utils.session_event_loop": [
      "utils.event_loop_manager"
    ],
    "utils.__init__": [
      "utils.error_handlers",
      "utils.sql",
      "utils.subprocess_security",
      "utils.session_store"
    ],
    "utils.multi_level_cache": [
      "performance.optimization.performance_optimizer",
      "utils.redis_cache"
    ],
    "utils.error_handlers_example": [
      "utils.error_handlers"
    ],
    "utils.error_handlers": [
      "ml.orchestration.core.unified_retry_manager"
    ],
    "utils.event_loop_benchmark": [
      "utils.session_event_loop",
      "utils.event_loop_manager"
    ],
    "utils.redis_cache": [
      "performance.monitoring.metrics_registry"
    ],
    "utils.websocket_manager": [
      "utils.datetime_utils"
    ],
    "cli.clean_cli": [
      "cli.core.training_system_manager",
      "cli.core.cli_orchestrator",
      "cli.core.signal_handler",
      "cli.core.progress_preservation",
      "cli.core.system_state_reporter"
    ],
    "cli.__init__": [
      "cli.clean_cli"
    ],
    "cli.core.emergency_save": [
      "cli.core.progress_preservation",
      "database.models",
      "database"
    ],
    "cli.core.training_system_manager": [
      "database",
      "cli.core.rule_validation_service",
      "core.services.analytics_factory",
      "ml.orchestration.core.ml_pipeline_orchestrator",
      "database.models",
      "ml.preprocessing.synthetic_data_generator",
      "ml.orchestration.config.orchestrator_config"
    ],
    "cli.core.session_resume": [
      "cli.core.progress_preservation",
      "cli.core.training_system_manager",
      "database.models",
      "database"
    ],
    "cli.core.pid_manager": [
      "core.config"
    ],
    "cli.core.enhanced_workflow_manager": [
      "cli.core.cli_orchestrator",
      "ml.orchestration.core.ml_pipeline_orchestrator"
    ],
    "cli.core.emergency_operations": [
      "cli.core.signal_handler",
      "cli.core.progress_preservation",
      "database.ha_connection_manager",
      "database.models",
      "database"
    ],
    "cli.core.cli_orchestrator": [
      "database",
      "ml.orchestration.config.workflow_definition",
      "ml.orchestration.core.ml_pipeline_orchestrator",
      "ml.orchestration.config.workflow_templates",
      "ml.orchestration.config.orchestrator_config"
    ],
    "cli.core.signal_handler": [
      "database.ha_connection_manager",
      "cli.core.emergency_operations",
      "database"
    ],
    "cli.core.rule_validation_service": [
      "database.models",
      "database"
    ],
    "cli.core.progress_preservation": [
      "database.models",
      "database"
    ],
    "cli.core.crash_recovery": [
      "cli.core.training_system_manager",
      "cli.core.emergency_save",
      "cli.core.session_resume",
      "cli.core.progress_preservation",
      "database.models",
      "database"
    ],
    "cli.utils.__init__": [
      "cli.utils.progress",
      "cli.utils.validation",
      "cli.utils.console"
    ],
    "feedback.enhanced_feedback_collector": [
      "utils.datetime_utils"
    ],
    "ml.__init__": [
      "ml.models.model_manager",
      "ml.automl.orchestrator",
      "ml.utils.nltk_manager",
      "ml.core.training_data_loader",
      "ml.optimization.algorithms.rule_optimizer",
      "ml.optimization.algorithms.multi_armed_bandit",
      "ml.models.production_registry",
      "ml.optimization.algorithms.clustering_optimizer",
      "ml.core.ml_integration",
      "ml.optimization.algorithms.dimensionality_reducer",
      "ml.learning.algorithms"
    ],
    "ml.core.ml_integration": [
      "ml.learning.patterns.advanced_pattern_discovery",
      "ml.orchestration.events.event_types",
      "security.input_validator",
      "database.connection",
      "ml.models.production_registry",
      "database.models",
      "utils.datetime_utils",
      "utils.redis_cache",
      "database"
    ],
    "ml.core.__init__": [
      "ml.core.ml_integration",
      "ml.core.training_data_loader"
    ],
    "ml.core.training_data_loader": [
      "database.models",
      "utils.datetime_utils"
    ],
    "ml.analysis.generation_strategy_analyzer": [
      "ml.analysis.performance_gap_analyzer"
    ],
    "ml.analysis.__init__": [
      "ml.analysis.domain_feature_extractor",
      "ml.analysis.linguistic_analyzer",
      "ml.analysis.ner_extractor",
      "ml.analysis.dependency_parser",
      "ml.analysis.domain_detector"
    ],
    "ml.analysis.domain_feature_extractor": [
      "ml.analysis.domain_detector"
    ],
    "ml.analysis.performance_gap_analyzer": [
      "database.models"
    ],
    "ml.analysis.difficulty_distribution_analyzer": [
      "ml.analysis.performance_gap_analyzer"
    ],
    "ml.analysis.linguistic_analyzer": [
      "ml.models.model_manager",
      "ml.analysis.ner_extractor",
      "ml.utils.nltk_manager",
      "ml.analysis.dependency_parser"
    ],
    "ml.learning.__init__": [
      "ml.learning.features",
      "ml.learning.algorithms.context_aware_weighter",
      "ml.learning.algorithms",
      "ml.optimization.algorithms.clustering_optimizer",
      "ml.learning.clustering",
      "ml.learning.quality.enhanced_scorer"
    ],
    "ml.learning.patterns.apriori_analyzer": [
      "utils.error_handlers",
      "database.connection",
      "utils.redis_cache"
    ],
    "ml.learning.patterns.advanced_pattern_discovery": [
      "ml.learning.patterns.apriori_analyzer",
      "ml.core.training_data_loader",
      "database.connection",
      "database.models",
      "utils.redis_cache"
    ],
    "ml.learning.quality.__init__": [
      "ml.learning.quality.enhanced_scorer"
    ],
    "ml.learning.features.composite_feature_extractor": [
      "ml.learning.features.linguistic_feature_extractor",
      "ml.learning.features.domain_feature_extractor",
      "ml.learning.features.context_feature_extractor"
    ],
    "ml.learning.features.context_feature_extractor": [
      "security",
      "security.input_sanitization",
      "utils.datetime_utils"
    ],
    "ml.learning.features.__init__": [
      "ml.learning.features.linguistic_feature_extractor",
      "ml.learning.features.domain_feature_extractor",
      "ml.learning.features.composite_feature_extractor",
      "ml.learning.features.context_feature_extractor"
    ],
    "ml.learning.features.linguistic_feature_extractor": [
      "ml.analysis.linguistic_analyzer",
      "security.input_sanitization",
      "utils.redis_cache",
      "ml.learning.features.english_nltk_manager"
    ],
    "ml.learning.features.domain_feature_extractor": [
      "ml.analysis.domain_analyzer",
      "utils.datetime_utils",
      "security",
      "security.input_sanitization",
      "ml.analysis.domain_detector"
    ],
    "ml.learning.algorithms.context_learner": [
      "utils.datetime_utils",
      "ml.learning.features",
      "security",
      "ml.optimization.algorithms.clustering_optimizer",
      "ml.learning.clustering"
    ],
    "ml.learning.algorithms.context_aware_weighter": [
      "ml.analysis.domain_feature_extractor",
      "ml.analysis.domain_detector"
    ],
    "ml.learning.algorithms.__init__": [
      "ml.learning.algorithms.rule_analyzer",
      "ml.learning.algorithms.context_learner",
      "ml.learning.algorithms.insight_engine",
      "ml.learning.algorithms.failure_analyzer"
    ],
    "ml.learning.algorithms.context_performance_monitor": [
      "security"
    ],
    "ml.learning.algorithms.failure_analyzer": [
      "ml.core.training_data_loader"
    ],
    "ml.learning.clustering.__init__": [
      "ml.optimization.algorithms.clustering_optimizer"
    ],
    "ml.optimization.__init__": [
      "ml.optimization.validation.optimization_validator",
      "ml.optimization.algorithms.rule_optimizer",
      "ml.optimization.algorithms.multi_armed_bandit",
      "ml.optimization.batch.batch_processor",
      "ml.optimization.algorithms.clustering_optimizer",
      "ml.optimization.algorithms.dimensionality_reducer"
    ],
    "ml.optimization.algorithms.dimensionality_reducer": [
      "ml.types",
      "ml.core.training_data_loader"
    ],
    "ml.optimization.algorithms.__init__": [
      "ml.optimization.algorithms.rule_optimizer",
      "ml.optimization.algorithms.multi_armed_bandit",
      "ml.optimization.algorithms.clustering_optimizer",
      "ml.optimization.algorithms.dimensionality_reducer",
      "ml.optimization.algorithms.early_stopping"
    ],
    "ml.optimization.algorithms.clustering_optimizer": [
      "ml.types",
      "ml.core.training_data_loader"
    ],
    "ml.optimization.batch.batch_processor": [
      "ml.orchestration.core.unified_retry_manager",
      "ml.core.ml_integration",
      "utils.datetime_utils",
      "database"
    ],
    "ml.optimization.batch.__init__": [
      "ml.optimization.batch.batch_processor",
      "ml.optimization.batch.enhanced_batch_processor"
    ],
    "ml.optimization.batch.enhanced_batch_processor": [
      "utils.datetime_utils"
    ],
    "ml.optimization.validation.__init__": [
      "ml.optimization.validation.optimization_validator"
    ],
    "ml.health.integration_manager": [
      "ml.health.ml_health_monitor",
      "utils.datetime_utils",
      "ml.health.model_performance_tracker",
      "ml.health.drift_detector"
    ],
    "ml.health.drift_detector": [
      "utils.datetime_utils"
    ],
    "ml.health.__init__": [
      "ml.health.resource_monitor",
      "ml.health.ml_health_monitor",
      "ml.health.model_performance_tracker",
      "ml.health.integration_manager",
      "ml.health.drift_detector"
    ],
    "ml.health.example_usage": [
      "ml.health.integration_manager",
      "ml.health.resource_monitor",
      "ml.health.ml_health_monitor"
    ],
    "ml.health.resource_monitor": [
      "utils.datetime_utils"
    ],
    "ml.health.model_performance_tracker": [
      "utils.datetime_utils"
    ],
    "ml.health.ml_health_monitor": [
      "utils.datetime_utils"
    ],
    "ml.tests.test_type_safety": [
      "ml.models.model_manager",
      "ml.optimization.algorithms.clustering_optimizer",
      "ml.types"
    ],
    "ml.tests.test_ml_integration": [
      "ml.models.model_manager",
      "ml.types",
      "ml.learning.features.linguistic_feature_extractor",
      "ml.core.training_data_loader",
      "ml.optimization.algorithms.clustering_optimizer",
      "ml.optimization.algorithms.dimensionality_reducer"
    ],
    "ml.lifecycle.enhanced_experiment_orchestrator": [
      "ml.lifecycle.enhanced_model_registry",
      "ml.types",
      "utils.datetime_utils",
      "ml.lifecycle.experiment_tracker"
    ],
    "ml.lifecycle.model_deployment": [
      "ml.lifecycle.model_registry",
      "utils.datetime_utils"
    ],
    "ml.lifecycle.model_serving_infrastructure": [
      "ml.lifecycle.enhanced_model_registry",
      "utils.datetime_utils"
    ],
    "ml.lifecycle.experiment_tracker": [
      "ml.lifecycle.model_registry",
      "ml.types",
      "utils.datetime_utils"
    ],
    "ml.lifecycle.ml_platform_integration": [
      "ml.optimization.batch.enhanced_batch_processor",
      "performance.monitoring.performance_monitor",
      "ml.lifecycle.enhanced_experiment_orchestrator",
      "ml.lifecycle.model_serving_infrastructure",
      "ml.lifecycle.enhanced_model_registry",
      "ml.lifecycle.automated_deployment_pipeline",
      "performance.testing.ab_testing_service",
      "database.optimization_integration",
      "utils.datetime_utils"
    ],
    "ml.lifecycle.enhanced_model_registry": [
      "ml.types",
      "utils.datetime_utils"
    ],
    "ml.lifecycle.performance_validation": [
      "ml.lifecycle.ml_platform_integration",
      "ml.lifecycle.enhanced_experiment_orchestrator",
      "ml.lifecycle.model_serving_infrastructure",
      "ml.lifecycle.automated_deployment_pipeline",
      "ml.lifecycle.enhanced_model_registry",
      "utils.datetime_utils"
    ],
    "ml.lifecycle.model_registry": [
      "ml.types",
      "database.models",
      "utils.datetime_utils"
    ],
    "ml.lifecycle.lifecycle_monitoring": [
      "performance.monitoring.health.enhanced_base",
      "performance.monitoring.performance_monitor",
      "utils.datetime_utils",
      "performance.monitoring.health.service"
    ],
    "ml.lifecycle.automated_deployment_pipeline": [
      "ml.lifecycle.enhanced_model_registry",
      "utils.datetime_utils"
    ],
    "ml.utils.__init__": [
      "ml.utils.nltk_manager"
    ],
    "ml.models.__init__": [
      "ml.models.model_manager",
      "ml.models.prompt_enhancement",
      "ml.models.production_registry"
    ],
    "ml.models.production_registry": [
      "utils.datetime_utils"
    ],
    "ml.automl.__init__": [
      "ml.automl.orchestrator",
      "ml.automl.callbacks"
    ],
    "ml.automl.orchestrator": [
      "ml.optimization.algorithms.rule_optimizer",
      "ml.database.connection",
      "ml.automl.callbacks",
      "core.services.analytics_factory",
      "ml.utils.model_manager",
      "ml.evaluation.experiment_orchestrator",
      "utils.datetime_utils"
    ],
    "ml.automl.callbacks": [
      "core.services.analytics_factory",
      "ml.automl.orchestrator",
      "ml.evaluation.experiment_orchestrator"
    ],
    "ml.orchestration.__init__": [
      "ml.orchestration.core.resource_manager",
      "ml.orchestration.core.unified_retry_manager",
      "ml.orchestration.core.workflow_execution_engine",
      "ml.orchestration.core.ml_pipeline_orchestrator",
      "ml.orchestration.core.component_registry"
    ],
    "ml.orchestration.connectors.tier4_connectors": [
      "database.psycopg_client",
      "ml.orchestration.core.unified_retry_manager",
      "database.performance_monitor",
      "database.query_optimizer",
      "ml.orchestration.connectors.component_connector"
    ],
    "ml.orchestration.connectors.tier3_connectors": [
      "ml.orchestration.connectors.component_connector"
    ],
    "ml.orchestration.connectors.__init__": [
      "ml.orchestration.connectors.tier1_connectors",
      "ml.orchestration.connectors.component_connector"
    ],
    "ml.orchestration.connectors.tier6_connectors": [
      "ml.orchestration.connectors.component_connector"
    ],
    "ml.orchestration.connectors.component_connector": [
      "ml.orchestration.events.event_types"
    ],
    "ml.orchestration.connectors.tier2_connectors": [
      "ml.orchestration.connectors.component_connector"
    ],
    "ml.orchestration.connectors.tier5_connectors": [
      "ml.orchestration.connectors.component_connector"
    ],
    "ml.orchestration.connectors.tier1_connectors": [
      "ml.orchestration.connectors.component_connector"
    ],
    "ml.orchestration.coordinators.training_workflow_coordinator": [
      "ml.orchestration.core.workflow_types",
      "ml.orchestration.events.event_types"
    ],
    "ml.orchestration.coordinators.adaptive_training_coordinator": [
      "ml.analysis.generation_strategy_analyzer",
      "ml.optimization.batch.dynamic_batch_optimizer",
      "ml.analytics.generation_analytics",
      "ml.analysis.difficulty_distribution_analyzer",
      "ml.orchestration.core.ml_pipeline_orchestrator",
      "database.models",
      "ml.preprocessing.synthetic_data_generator",
      "ml.analysis.performance_gap_analyzer",
      "database"
    ],
    "ml.orchestration.coordinators.__init__": [
      "ml.orchestration.coordinators.data_pipeline_coordinator",
      "ml.orchestration.coordinators.deployment_controller",
      "ml.orchestration.coordinators.evaluation_pipeline_manager",
      "ml.orchestration.coordinators.training_workflow_coordinator",
      "ml.orchestration.coordinators.optimization_controller"
    ],
    "ml.orchestration.coordinators.data_pipeline_coordinator": [
      "ml.orchestration.events.event_types"
    ],
    "ml.orchestration.coordinators.evaluation_pipeline_manager": [
      "ml.orchestration.events.event_types"
    ],
    "ml.orchestration.coordinators.deployment_controller": [
      "ml.orchestration.events.event_types"
    ],
    "ml.orchestration.coordinators.optimization_controller": [
      "ml.orchestration.events.event_types",
      "ml.optimization.algorithms.rule_optimizer"
    ],
    "ml.orchestration.core.retry_observability": [
      "performance.monitoring.metrics_registry"
    ],
    "ml.orchestration.core.component_registry": [
      "ml.orchestration.config.component_definitions",
      "ml.orchestration.config.orchestrator_config"
    ],
    "ml.orchestration.core.resource_manager": [
      "ml.orchestration.k8s.resource_integration",
      "ml.orchestration.events.event_types",
      "ml.orchestration.config.orchestrator_config"
    ],
    "ml.orchestration.core.__init__": [
      "ml.orchestration.core.resource_manager",
      "ml.orchestration.core.unified_retry_manager",
      "ml.orchestration.core.workflow_types",
      "ml.orchestration.core.workflow_execution_engine",
      "ml.orchestration.core.ml_pipeline_orchestrator",
      "ml.orchestration.core.component_registry"
    ],
    "ml.orchestration.core.ml_pipeline_orchestrator": [
      "ml.orchestration.core.resource_manager",
      "ml.orchestration.integration.component_invoker",
      "ml.orchestration.core.unified_retry_manager",
      "ml.orchestration.events.event_bus",
      "ml.orchestration.events.event_types",
      "ml.orchestration.core.workflow_execution_engine",
      "security.input_sanitization",
      "ml.orchestration.integration.direct_component_loader",
      "ml.orchestration.core.component_registry",
      "ml.orchestration.security.input_sanitization",
      "ml.orchestration.config.orchestrator_config"
    ],
    "ml.orchestration.core.unified_retry_manager": [
      "core.retry_config",
      "performance.monitoring.metrics_registry",
      "ml.orchestration.core.retry_observability",
      "core.protocols.retry_protocols"
    ],
    "ml.orchestration.core.workflow_execution_engine": [
      "ml.orchestration.core.unified_retry_manager",
      "ml.orchestration.core.workflow_types",
      "ml.orchestration.events.event_types",
      "ml.orchestration.config.workflow_templates",
      "ml.orchestration.config.orchestrator_config"
    ],
    "ml.orchestration.config.component_definitions": [
      "ml.orchestration.core.component_registry"
    ],
    "ml.orchestration.config.__init__": [
      "ml.orchestration.config.workflow_templates",
      "ml.orchestration.config.component_definitions",
      "ml.orchestration.config.orchestrator_config"
    ],
    "ml.orchestration.config.workflow_templates": [
      "ml.orchestration.core.workflow_types"
    ],
    "ml.orchestration.integration.direct_component_loader": [
      "ml.orchestration.core.component_registry"
    ],
    "ml.orchestration.integration.component_invoker": [
      "ml.orchestration.core.unified_retry_manager",
      "ml.orchestration.integration.direct_component_loader",
      "ml.database"
    ],
    "ml.orchestration.integration.__init__": [
      "ml.orchestration.integration.direct_component_loader",
      "ml.orchestration.integration.component_invoker"
    ],
    "ml.orchestration.api.__init__": [
      "ml.orchestration.api.orchestrator_endpoints"
    ],
    "ml.orchestration.api.orchestrator_endpoints": [
      "ml.orchestration.events.event_types"
    ],
    "ml.orchestration.monitoring.alert_manager": [
      "ml.orchestration.events.event_types"
    ],
    "ml.orchestration.monitoring.__init__": [
      "ml.orchestration.monitoring.workflow_metrics_collector",
      "ml.orchestration.monitoring.alert_manager",
      "ml.orchestration.monitoring.component_health_monitor",
      "ml.orchestration.monitoring.pipeline_health_monitor",
      "ml.orchestration.monitoring.orchestrator_monitor"
    ],
    "ml.orchestration.monitoring.pipeline_health_monitor": [
      "ml.orchestration.events.event_types",
      "ml.orchestration.monitoring.orchestrator_monitor",
      "ml.orchestration.monitoring.component_health_monitor"
    ],
    "ml.orchestration.monitoring.orchestrator_monitor": [
      "ml.orchestration.events.event_types"
    ],
    "ml.orchestration.monitoring.component_health_monitor": [
      "ml.orchestration.events.event_types",
      "ml.orchestration.connectors.component_connector"
    ],
    "ml.orchestration.monitoring.workflow_metrics_collector": [
      "ml.orchestration.events.event_types"
    ],
    "ml.orchestration.events.__init__": [
      "ml.orchestration.events.event_bus",
      "ml.orchestration.events.event_types"
    ],
    "ml.orchestration.events.event_bus": [
      "ml.orchestration.events.event_types",
      "ml.orchestration.config.orchestrator_config"
    ],
    "ml.orchestration.events.adaptive_event_bus": [
      "ml.orchestration.events.event_types",
      "ml.orchestration.config.orchestrator_config"
    ],
    "ml.orchestration.events.handlers.__init__": [
      "ml.orchestration.events.handlers.deployment_handler",
      "ml.orchestration.events.handlers.optimization_handler",
      "ml.orchestration.events.handlers.training_handler",
      "ml.orchestration.events.handlers.evaluation_handler"
    ],
    "ml.orchestration.events.handlers.training_handler": [
      "ml.orchestration.events.event_types"
    ],
    "ml.orchestration.events.handlers.database_handler": [
      "ml.orchestration.events.event_types"
    ],
    "ml.orchestration.events.handlers.optimization_handler": [
      "ml.orchestration.events.event_types"
    ],
    "ml.orchestration.events.handlers.deployment_handler": [
      "ml.orchestration.events.event_types"
    ],
    "ml.orchestration.events.handlers.evaluation_handler": [
      "ml.orchestration.events.event_types"
    ],
    "ml.evaluation.__init__": [
      "ml.evaluation.pattern_significance_analyzer",
      "ml.evaluation.structural_analyzer",
      "ml.evaluation.statistical_analyzer",
      "ml.evaluation.advanced_statistical_validator",
      "ml.evaluation.experiment_orchestrator",
      "ml.evaluation.causal_inference_analyzer"
    ],
    "ml.evaluation.causal_inference_analyzer": [
      "ml.core.training_data_loader"
    ],
    "ml.evaluation.experiment_orchestrator": [
      "ml.evaluation.pattern_significance_analyzer",
      "core.services.analytics_factory",
      "ml.evaluation.advanced_statistical_validator",
      "performance.testing.ab_testing_service",
      "ml.evaluation.causal_inference_analyzer",
      "database.models",
      "utils.datetime_utils"
    ],
    "ml.preprocessing.llm_transformer": [
      "ml.models.model_manager",
      "ml.core.ml_integration"
    ],
    "ml.preprocessing.__init__": [
      "ml.preprocessing.synthetic_data_generator",
      "ml.preprocessing.llm_transformer"
    ],
    "ml.preprocessing.synthetic_data_generator": [
      "ml.optimization.batch.dynamic_batch_optimizer",
      "ml.analytics.generation_analytics",
      "database.models",
      "ml.learning.quality.enhanced_scorer"
    ],
    "ml.analytics.session_summary_reporter": [
      "utils.datetime_utils",
      "database.models",
      "ml.analytics.performance_improvement_calculator"
    ],
    "ml.analytics.generation_analytics": [
      "database.services.generation_service",
      "database.models"
    ],
    "ml.analytics.performance_improvement_calculator": [
      "database.models",
      "utils.datetime_utils"
    ],
    "ml.analytics.session_comparison_analyzer": [
      "ml.analytics.session_summary_reporter",
      "utils.datetime_utils",
      "database.models",
      "ml.analytics.performance_improvement_calculator"
    ],
    "api.real_time_endpoints": [
      "ml.orchestration.config.orchestrator_config",
      "utils.websocket_manager",
      "core.services.analytics_factory",
      "utils.error_handlers",
      "ml.orchestration.core.ml_pipeline_orchestrator",
      "database.models",
      "database"
    ],
    "api.analytics_endpoints": [
      "database.analytics_query_interface",
      "ml.analytics.session_comparison_analyzer",
      "utils.websocket_manager",
      "ml.analytics.session_summary_reporter",
      "utils.error_handlers",
      "database"
    ],
    "api.apriori_endpoints": [
      "database.config",
      "ml.learning.patterns.advanced_pattern_discovery",
      "ml.learning.patterns.apriori_analyzer",
      "database.connection",
      "ml.core.ml_integration",
      "database.models",
      "database"
    ],
    "api.__init__": [
      "api.analytics_endpoints",
      "api.apriori_endpoints",
      "api.real_time_endpoints"
    ],
    "rule_engine.prompt_analyzer": [
      "rule_engine.intelligent_rule_selector"
    ],
    "rule_engine.__init__": [
      "rule_engine.rules.role_based_prompting",
      "rule_engine.rules.chain_of_thought",
      "rule_engine.rules.clarity",
      "rule_engine.rules.xml_structure_enhancement",
      "rule_engine.rules.few_shot_examples",
      "rule_engine.rules.specificity",
      "rule_engine.base"
    ],
    "rule_engine.intelligent_rule_selector": [
      "utils.multi_level_cache",
      "ml.learning.patterns.advanced_pattern_discovery",
      "ml.optimization.algorithms.rule_optimizer",
      "ml.analytics.performance_improvement_calculator"
    ],
    "rule_engine.rule_cache": [
      "rule_engine.intelligent_rule_selector",
      "utils.multi_level_cache"
    ],
    "rule_engine.rule_combination_optimizer": [
      "rule_engine.intelligent_rule_selector"
    ],
    "rule_engine.rules.clarity": [
      "rule_engine.base",
      "ml.preprocessing.llm_transformer"
    ],
    "rule_engine.rules.specificity": [
      "rule_engine.base",
      "ml.preprocessing.llm_transformer"
    ],
    "rule_engine.rules.role_based_prompting": [
      "rule_engine.base"
    ],
    "rule_engine.rules.chain_of_thought": [
      "rule_engine.base"
    ],
    "rule_engine.rules.__init__": [
      "rule_engine.rules.role_based_prompting",
      "rule_engine.rules.chain_of_thought",
      "rule_engine.rules.clarity",
      "rule_engine.rules.xml_structure_enhancement",
      "rule_engine.rules.few_shot_examples",
      "rule_engine.rules.linguistic_quality_rule",
      "rule_engine.rules.specificity"
    ],
    "rule_engine.rules.xml_structure_enhancement": [
      "rule_engine.base"
    ],
    "rule_engine.rules.few_shot_examples": [
      "rule_engine.base"
    ],
    "rule_engine.rules.linguistic_quality_rule": [
      "rule_engine.base",
      "ml.analysis.linguistic_analyzer"
    ],
    "monitoring.external_api_health": [
      "performance.monitoring.health.circuit_breaker",
      "core.config",
      "utils.redis_cache"
    ],
    "monitoring.__init__": [
      "monitoring.external_api_health"
    ],
    "monitoring.health_orchestrator": [
      "performance.monitoring.health.service",
      "monitoring.external_api_health",
      "performance.monitoring.health.circuit_breaker",
      "ml.health.integration_manager",
      "database.health.database_health_monitor",
      "core.config",
      "cache.redis_health"
    ],
    "monitoring.opentelemetry.metrics": [
      "monitoring.opentelemetry.setup"
    ],
    "monitoring.opentelemetry.tracing": [
      "monitoring.opentelemetry.setup"
    ],
    "monitoring.opentelemetry.instrumentation": [
      "monitoring.opentelemetry.metrics",
      "monitoring.opentelemetry.setup",
      "monitoring.opentelemetry.tracing"
    ],
    "monitoring.opentelemetry.__init__": [
      "monitoring.opentelemetry.tracing",
      "monitoring.opentelemetry.instrumentation",
      "monitoring.opentelemetry.metrics",
      "monitoring.opentelemetry.setup",
      "monitoring.opentelemetry.context"
    ],
    "monitoring.opentelemetry.integration": [
      "performance.monitoring.health.telemetry",
      "monitoring.opentelemetry.tracing",
      "performance.monitoring.metrics_registry",
      "monitoring.opentelemetry.instrumentation",
      "monitoring.opentelemetry.metrics",
      "monitoring.opentelemetry.setup",
      "monitoring.opentelemetry.context"
    ],
    "monitoring.opentelemetry.example_config": [
      "monitoring.opentelemetry.setup"
    ],
    "monitoring.slo.monitor": [
      "monitoring.slo.framework",
      "monitoring.slo.calculator"
    ],
    "monitoring.slo.__init__": [
      "monitoring.slo.integration",
      "monitoring.slo.framework",
      "monitoring.slo.monitor",
      "monitoring.slo.reporting",
      "monitoring.slo.calculator"
    ],
    "monitoring.slo.example_usage": [
      "monitoring.slo.integration",
      "monitoring.slo.framework",
      "monitoring.slo.feature_flag_integration",
      "monitoring.slo.monitor",
      "monitoring.slo.reporting",
      "monitoring.slo.calculator"
    ],
    "monitoring.slo.integration": [
      "monitoring.slo.monitor",
      "monitoring.slo.framework",
      "monitoring.slo.calculator"
    ],
    "monitoring.slo.feature_flag_integration": [
      "monitoring.slo.monitor",
      "monitoring.slo.framework"
    ],
    "monitoring.slo.calculator": [
      "monitoring.slo.framework"
    ],
    "monitoring.slo.reporting": [
      "monitoring.slo.monitor",
      "monitoring.slo.framework",
      "monitoring.slo.calculator"
    ],
    "performance.__init__": [
      "performance.optimization.response_optimizer",
      "performance.monitoring.performance_benchmark",
      "performance.monitoring.performance_monitor",
      "performance.validation.performance_validation",
      "performance.optimization.async_optimizer",
      "performance.optimization.performance_optimizer"
    ],
    "performance.optimization.async_optimizer": [
      "ml.orchestration.core.unified_retry_manager",
      "performance.optimization.performance_optimizer"
    ],
    "performance.optimization.__init__": [
      "ml.optimization.batch.batch_processor",
      "performance.optimization.performance_optimizer",
      "performance.optimization.response_optimizer",
      "performance.optimization.async_optimizer"
    ],
    "performance.optimization.response_optimizer": [
      "performance.optimization.performance_optimizer"
    ],
    "performance.baseline.performance_validation_suite": [
      "performance.baseline.enhanced_dashboard_integration",
      "performance.baseline.statistical_analyzer",
      "performance.baseline.regression_detector",
      "performance.baseline.load_testing_integration",
      "performance.baseline.models",
      "performance.baseline.automation",
      "performance.baseline.baseline_collector"
    ],
    "performance.baseline.models": [
      "performance.monitoring.metrics_registry"
    ],
    "performance.baseline.baseline_collector": [
      "performance.monitoring.metrics_registry",
      "performance.baseline.models",
      "database"
    ],
    "performance.baseline.__init__": [
      "performance.baseline.profiler",
      "performance.monitoring.health.service",
      "performance.monitoring.performance_monitor",
      "performance.baseline.enhanced_dashboard_integration",
      "performance.baseline.performance_validation_suite",
      "performance.baseline.statistical_analyzer",
      "performance.baseline.regression_detector",
      "performance.baseline.load_testing_integration",
      "performance.baseline.reporting",
      "performance.monitoring.metrics_registry",
      "performance.baseline.models",
      "performance.baseline.automation",
      "performance.baseline.baseline_collector",
      "performance.baseline.production_optimization_guide"
    ],
    "performance.baseline.load_testing_integration": [
      "performance.baseline.models",
      "performance.baseline.baseline_collector"
    ],
    "performance.baseline.enhanced_dashboard_integration": [
      "performance.baseline.regression_detector",
      "performance.baseline.models",
      "performance.baseline.baseline_collector",
      "performance.baseline.statistical_analyzer"
    ],
    "performance.testing.__init__": [
      "performance.testing.ab_testing_service"
    ],
    "performance.testing.canary_testing": [
      "utils.redis_cache",
      "database"
    ],
    "performance.testing.ab_testing_service": [
      "utils.error_handlers",
      "database.models",
      "utils.datetime_utils"
    ],
    "performance.monitoring.performance_benchmark": [
      "core.services.analytics_factory",
      "performance.optimization.performance_optimizer",
      "core.services.prompt_improvement",
      "utils.session_store",
      "database"
    ],
    "performance.monitoring.monitoring": [
      "performance.mcp_server.mcp_server",
      "performance.monitoring.ml_integration",
      "performance.analytics.analytics",
      "utils.error_handlers",
      "performance.monitoring.metrics_registry",
      "database.models",
      "database"
    ],
    "performance.monitoring.performance_monitor": [
      "performance.monitoring.metrics_registry",
      "performance.optimization.performance_optimizer"
    ],
    "performance.monitoring.__init__": [
      "performance.monitoring.performance_monitor",
      "performance.monitoring.performance_benchmark"
    ],
    "performance.monitoring.health.enhanced_checkers": [
      "performance.monitoring.health.telemetry",
      "performance.monitoring.health.base",
      "performance.monitoring.health.enhanced_base",
      "ml.services.ml_integration",
      "performance.monitoring.health.circuit_breaker",
      "analytics",
      "performance.monitoring.health.sla_monitor"
    ],
    "performance.monitoring.health.service": [
      "performance.monitoring.health.base",
      "performance.monitoring.health.ml_orchestration_checkers",
      "performance.utils.redis_cache",
      "cache.redis_health",
      "performance.monitoring.metrics_registry",
      "performance.monitoring.health.ml_specific_checkers",
      "performance.monitoring.health.metrics",
      "performance.monitoring.health.checkers"
    ],
    "performance.monitoring.health.sla_monitor": [
      "performance.core.config"
    ],
    "performance.monitoring.health.background_manager": [
      "ml.orchestration.core.unified_retry_manager",
      "core.retry_implementations",
      "performance.monitoring.metrics_registry",
      "core.retry_config",
      "core.protocols.retry_protocols"
    ],
    "performance.monitoring.health.checkers": [
      "performance.mcp_server.mcp_server",
      "performance.monitoring.analytics",
      "performance.monitoring.ml_integration",
      "performance.monitoring.health.base",
      "utils.event_loop_manager",
      "performance.monitoring.health.background_manager",
      "performance.monitoring.health.redis_monitor",
      "performance.database",
      "ml.optimization.batch.batch_processor",
      "cache.redis_health",
      "utils.redis_cache"
    ],
    "performance.monitoring.health.__init__": [
      "performance.monitoring.health.base",
      "performance.monitoring.health.service",
      "performance.monitoring.health.ml_specific_checkers",
      "performance.monitoring.health.metrics",
      "performance.monitoring.health.checkers"
    ],
    "performance.monitoring.health.circuit_breaker": [
      "core.config"
    ],
    "performance.monitoring.health.ml_orchestration_checkers": [
      "performance.monitoring.health.metrics",
      "performance.monitoring.health.base"
    ],
    "performance.monitoring.health.enhanced_base": [
      "performance.monitoring.health.telemetry",
      "performance.monitoring.health.base",
      "performance.monitoring.health.circuit_breaker",
      "performance.monitoring.health.structured_logging",
      "performance.monitoring.health.sla_monitor"
    ],
    "performance.monitoring.health.ml_specific_checkers": [
      "ml.evaluation.pattern_significance_analyzer",
      "performance.monitoring.health.base",
      "performance.performance_monitor",
      "ml.learning.algorithms.context_learner",
      "ml.core.training_data_loader",
      "ml.optimization.algorithms.rule_optimizer",
      "ml.optimization.batch.batch_processor",
      "core.services.analytics_factory",
      "ml.evaluation.advanced_statistical_validator",
      "ml.models.production_registry",
      "ml.learning.algorithms.failure_analyzer",
      "ml.optimization.algorithms.clustering_optimizer",
      "ml.evaluation.causal_inference_analyzer",
      "ml.core.ml_integration",
      "performance.monitoring.health.metrics",
      "ml.preprocessing.synthetic_data_generator",
      "ml.learning.algorithms.insight_engine"
    ],
    "performance.validation.__init__": [
      "performance.validation.performance_validation"
    ],
    "performance.validation.performance_validation": [
      "performance.optimization.response_optimizer",
      "mcp_server.mcp_server",
      "performance.monitoring.performance_monitor",
      "performance.monitoring.performance_benchmark",
      "performance.optimization.async_optimizer",
      "performance.optimization.performance_optimizer",
      "utils.multi_level_cache",
      "database"
    ],
    "performance.analytics.__init__": [
      "ml.analytics.session_summary_reporter",
      "database.analytics_query_interface",
      "core.services.analytics_factory"
    ],
    "mcp_server.ml_integration": [
      "ml.learning.patterns.advanced_pattern_discovery",
      "ml.optimization.algorithms.rule_optimizer",
      "mcp_server.ml_data_collector",
      "ml.analytics.performance_improvement_calculator",
      "utils.multi_level_cache"
    ],
    "mcp_server.__init__": [
      "mcp_server.mcp_server"
    ],
    "mcp_server.ml_data_collector": [
      "utils.datetime_utils"
    ],
    "mcp_server.mcp_server": [
      "utils.event_loop_manager",
      "utils.performance_benchmark",
      "security.rate_limit_middleware",
      "performance.optimization.async_optimizer",
      "utils.performance_validation",
      "security.structured_prompts",
      "performance.query_optimizer",
      "database",
      "performance.optimization.response_optimizer",
      "performance.monitoring.performance_monitor",
      "utils.multi_level_cache",
      "security.output_validator",
      "utils.redis_cache",
      "performance.monitoring.health.background_manager",
      "utils.response_optimizer",
      "ml.optimization.batch.batch_processor",
      "core.services.analytics_factory",
      "security.mcp_middleware",
      "core.services.prompt_improvement",
      "performance.optimization.performance_optimizer",
      "performance.sla_monitor",
      "utils.session_event_loop",
      "utils.event_loop_benchmark",
      "security.owasp_input_validator",
      "feedback.enhanced_feedback_collector",
      "performance.monitoring.health",
      "database.connection",
      "core.config",
      "utils.session_store",
      "database.mcp_connection_pool"
    ]
  },
  "file_imports": {
    "__init__": {
      "path": "src/prompt_improver/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": []
      }
    },
    "main": {
      "path": "src/prompt_improver/main.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [
          {
            "module": "prompt_improver.utils.redis_cache",
            "name": "start_cache_subscriber"
          },
          {
            "module": "prompt_improver.utils.redis_cache",
            "name": "stop_cache_subscriber"
          }
        ],
        "relative_from": []
      }
    },
    "__main__": {
      "path": "src/prompt_improver/__main__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "cli",
            "name": "app",
            "level": 1
          }
        ]
      }
    },
    "metrics.api_metrics": {
      "path": "src/prompt_improver/metrics/api_metrics.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time",
          "json",
          "statistics",
          "uuid"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "asdict"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "collections",
            "name": "defaultdict"
          },
          {
            "module": "collections",
            "name": "deque"
          },
          {
            "module": "urllib.parse",
            "name": "urlparse"
          }
        ],
        "relative_from": [
          {
            "module": "performance.monitoring.metrics_registry",
            "name": "get_metrics_registry",
            "level": 2
          }
        ]
      }
    },
    "metrics.ml_metrics": {
      "path": "src/prompt_improver/metrics/ml_metrics.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time",
          "json",
          "statistics"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "asdict"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "collections",
            "name": "defaultdict"
          },
          {
            "module": "collections",
            "name": "deque"
          }
        ],
        "relative_from": [
          {
            "module": "performance.monitoring.metrics_registry",
            "name": "get_metrics_registry",
            "level": 2
          },
          {
            "module": "performance.monitoring.metrics_registry",
            "name": "StandardMetrics",
            "level": 2
          }
        ]
      }
    },
    "metrics.system_metrics": {
      "path": "src/prompt_improver/metrics/system_metrics.py",
      "imports": {
        "absolute": [
          "asyncio",
          "time",
          "weakref",
          "logging",
          "psutil",
          "socket",
          "hashlib"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "collections",
            "name": "defaultdict"
          },
          {
            "module": "collections",
            "name": "deque"
          },
          {
            "module": "contextlib",
            "name": "asynccontextmanager"
          },
          {
            "module": "contextlib",
            "name": "contextmanager"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "functools",
            "name": "wraps"
          },
          {
            "module": "threading",
            "name": "Lock"
          },
          {
            "module": "threading",
            "name": "RLock"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "pydantic",
            "name": "BaseModel"
          },
          {
            "module": "pydantic",
            "name": "Field"
          },
          {
            "module": "pydantic",
            "name": "validator"
          },
          {
            "module": "prometheus_client",
            "name": "Counter"
          },
          {
            "module": "prometheus_client",
            "name": "Gauge"
          },
          {
            "module": "prometheus_client",
            "name": "Histogram"
          },
          {
            "module": "prometheus_client",
            "name": "Summary"
          },
          {
            "module": "prometheus_client",
            "name": "CollectorRegistry"
          }
        ],
        "relative_from": [
          {
            "module": "performance.monitoring.metrics_registry",
            "name": "get_metrics_registry",
            "level": 2
          },
          {
            "module": "performance.monitoring.metrics_registry",
            "name": "MetricsRegistry",
            "level": 2
          },
          {
            "module": "performance.monitoring.metrics_registry",
            "name": "PROMETHEUS_AVAILABLE",
            "level": 2
          },
          {
            "module": "core.config_manager",
            "name": "ConfigManager",
            "level": 2
          }
        ]
      }
    },
    "metrics.application_instrumentation": {
      "path": "src/prompt_improver/metrics/application_instrumentation.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time",
          "functools",
          "inspect"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          }
        ],
        "relative_from": [
          {
            "module": "integration_middleware",
            "name": "track_ml_operation",
            "level": 1
          },
          {
            "module": "integration_middleware",
            "name": "track_feature_usage",
            "level": 1
          },
          {
            "module": "integration_middleware",
            "name": "track_cost_operation",
            "level": 1
          },
          {
            "module": "integration_middleware",
            "name": "track_pipeline_stage",
            "level": 1
          },
          {
            "module": "integration_middleware",
            "name": "db_metrics",
            "level": 1
          },
          {
            "module": "integration_middleware",
            "name": "cache_metrics",
            "level": 1
          },
          {
            "module": "ml_metrics",
            "name": "PromptCategory",
            "level": 1
          },
          {
            "module": "ml_metrics",
            "name": "ModelInferenceStage",
            "level": 1
          },
          {
            "module": "business_intelligence_metrics",
            "name": "FeatureCategory",
            "level": 1
          },
          {
            "module": "business_intelligence_metrics",
            "name": "UserTier",
            "level": 1
          },
          {
            "module": "business_intelligence_metrics",
            "name": "CostType",
            "level": 1
          },
          {
            "module": "performance_metrics",
            "name": "PipelineStage",
            "level": 1
          },
          {
            "module": "performance_metrics",
            "name": "DatabaseOperation",
            "level": 1
          },
          {
            "module": "performance_metrics",
            "name": "CacheType",
            "level": 1
          },
          {
            "module": "core.services.prompt_improvement",
            "name": "PromptImprovementService",
            "level": 2
          },
          {
            "module": "ml.core.ml_integration",
            "name": "MLService",
            "level": 2
          },
          {
            "module": "api",
            "name": "health",
            "level": 2
          },
          {
            "module": "api",
            "name": "analytics_endpoints",
            "level": 2
          },
          {
            "module": "api",
            "name": "real_time_endpoints",
            "level": 2
          },
          {
            "module": "database",
            "name": "connection",
            "level": 2
          },
          {
            "module": "database",
            "name": "models",
            "level": 2
          },
          {
            "module": "utils.redis_cache",
            "name": "RedisCache",
            "level": 2
          }
        ]
      }
    },
    "metrics.dashboard_exports": {
      "path": "src/prompt_improver/metrics/dashboard_exports.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time",
          "json",
          "csv",
          "io",
          "statistics",
          "pandas"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "asdict"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "collections",
            "name": "defaultdict"
          }
        ],
        "relative_from": [
          {
            "module": "aggregation_engine",
            "name": "get_aggregation_engine",
            "level": 1
          },
          {
            "module": "aggregation_engine",
            "name": "AggregationWindow",
            "level": 1
          },
          {
            "module": "ml_metrics",
            "name": "get_ml_metrics_collector",
            "level": 1
          },
          {
            "module": "api_metrics",
            "name": "get_api_metrics_collector",
            "level": 1
          },
          {
            "module": "performance_metrics",
            "name": "get_performance_metrics_collector",
            "level": 1
          },
          {
            "module": "business_intelligence_metrics",
            "name": "get_bi_metrics_collector",
            "level": 1
          }
        ]
      }
    },
    "metrics.aggregation_engine": {
      "path": "src/prompt_improver/metrics/aggregation_engine.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time",
          "json",
          "statistics",
          "heapq",
          "threading",
          "numpy"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "asdict"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "collections",
            "name": "defaultdict"
          },
          {
            "module": "collections",
            "name": "deque"
          },
          {
            "module": "concurrent.futures",
            "name": "ThreadPoolExecutor"
          }
        ],
        "relative_from": [
          {
            "module": "ml_metrics",
            "name": "get_ml_metrics_collector",
            "level": 1
          },
          {
            "module": "ml_metrics",
            "name": "MLMetricsCollector",
            "level": 1
          },
          {
            "module": "api_metrics",
            "name": "get_api_metrics_collector",
            "level": 1
          },
          {
            "module": "api_metrics",
            "name": "APIMetricsCollector",
            "level": 1
          },
          {
            "module": "performance_metrics",
            "name": "get_performance_metrics_collector",
            "level": 1
          },
          {
            "module": "performance_metrics",
            "name": "PerformanceMetricsCollector",
            "level": 1
          },
          {
            "module": "business_intelligence_metrics",
            "name": "get_bi_metrics_collector",
            "level": 1
          },
          {
            "module": "business_intelligence_metrics",
            "name": "BusinessIntelligenceMetricsCollector",
            "level": 1
          },
          {
            "module": "performance.monitoring.metrics_registry",
            "name": "get_metrics_registry",
            "level": 2
          }
        ]
      }
    },
    "metrics.performance_metrics": {
      "path": "src/prompt_improver/metrics/performance_metrics.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time",
          "psutil",
          "json",
          "statistics"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "asdict"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "collections",
            "name": "defaultdict"
          },
          {
            "module": "collections",
            "name": "deque"
          }
        ],
        "relative_from": [
          {
            "module": "performance.monitoring.metrics_registry",
            "name": "get_metrics_registry",
            "level": 2
          }
        ]
      }
    },
    "metrics.__init__": {
      "path": "src/prompt_improver/metrics/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "ml_metrics",
            "name": "MLMetricsCollector",
            "level": 1
          },
          {
            "module": "ml_metrics",
            "name": "PromptCategory",
            "level": 1
          },
          {
            "module": "ml_metrics",
            "name": "ModelInferenceStage",
            "level": 1
          },
          {
            "module": "ml_metrics",
            "name": "get_ml_metrics_collector",
            "level": 1
          },
          {
            "module": "ml_metrics",
            "name": "record_prompt_improvement",
            "level": 1
          },
          {
            "module": "ml_metrics",
            "name": "record_model_inference",
            "level": 1
          },
          {
            "module": "api_metrics",
            "name": "APIMetricsCollector",
            "level": 1
          },
          {
            "module": "api_metrics",
            "name": "EndpointCategory",
            "level": 1
          },
          {
            "module": "api_metrics",
            "name": "HTTPMethod",
            "level": 1
          },
          {
            "module": "api_metrics",
            "name": "UserJourneyStage",
            "level": 1
          },
          {
            "module": "api_metrics",
            "name": "AuthenticationMethod",
            "level": 1
          },
          {
            "module": "api_metrics",
            "name": "get_api_metrics_collector",
            "level": 1
          },
          {
            "module": "api_metrics",
            "name": "record_api_request",
            "level": 1
          },
          {
            "module": "api_metrics",
            "name": "record_user_journey_event",
            "level": 1
          },
          {
            "module": "performance_metrics",
            "name": "PerformanceMetricsCollector",
            "level": 1
          },
          {
            "module": "performance_metrics",
            "name": "PipelineStage",
            "level": 1
          },
          {
            "module": "performance_metrics",
            "name": "DatabaseOperation",
            "level": 1
          },
          {
            "module": "performance_metrics",
            "name": "CacheType",
            "level": 1
          },
          {
            "module": "performance_metrics",
            "name": "ExternalAPIType",
            "level": 1
          },
          {
            "module": "performance_metrics",
            "name": "get_performance_metrics_collector",
            "level": 1
          },
          {
            "module": "performance_metrics",
            "name": "record_pipeline_stage_timing",
            "level": 1
          },
          {
            "module": "business_intelligence_metrics",
            "name": "BusinessIntelligenceMetricsCollector",
            "level": 1
          },
          {
            "module": "business_intelligence_metrics",
            "name": "FeatureCategory",
            "level": 1
          },
          {
            "module": "business_intelligence_metrics",
            "name": "UserTier",
            "level": 1
          },
          {
            "module": "business_intelligence_metrics",
            "name": "CostType",
            "level": 1
          },
          {
            "module": "business_intelligence_metrics",
            "name": "ResourceType",
            "level": 1
          },
          {
            "module": "business_intelligence_metrics",
            "name": "get_bi_metrics_collector",
            "level": 1
          },
          {
            "module": "business_intelligence_metrics",
            "name": "record_feature_usage",
            "level": 1
          },
          {
            "module": "business_intelligence_metrics",
            "name": "record_operational_cost",
            "level": 1
          },
          {
            "module": "aggregation_engine",
            "name": "RealTimeAggregationEngine",
            "level": 1
          },
          {
            "module": "aggregation_engine",
            "name": "AggregationWindow",
            "level": 1
          },
          {
            "module": "aggregation_engine",
            "name": "AlertSeverity",
            "level": 1
          },
          {
            "module": "aggregation_engine",
            "name": "CorrelationType",
            "level": 1
          },
          {
            "module": "aggregation_engine",
            "name": "get_aggregation_engine",
            "level": 1
          },
          {
            "module": "aggregation_engine",
            "name": "start_aggregation_engine",
            "level": 1
          },
          {
            "module": "aggregation_engine",
            "name": "stop_aggregation_engine",
            "level": 1
          },
          {
            "module": "aggregation_engine",
            "name": "get_business_insights",
            "level": 1
          },
          {
            "module": "dashboard_exports",
            "name": "DashboardExporter",
            "level": 1
          },
          {
            "module": "dashboard_exports",
            "name": "ExportFormat",
            "level": 1
          },
          {
            "module": "dashboard_exports",
            "name": "DashboardType",
            "level": 1
          },
          {
            "module": "dashboard_exports",
            "name": "TimeRange",
            "level": 1
          },
          {
            "module": "dashboard_exports",
            "name": "get_dashboard_exporter",
            "level": 1
          },
          {
            "module": "dashboard_exports",
            "name": "export_executive_summary",
            "level": 1
          },
          {
            "module": "dashboard_exports",
            "name": "export_ml_performance",
            "level": 1
          },
          {
            "module": "dashboard_exports",
            "name": "export_real_time_monitoring",
            "level": 1
          },
          {
            "module": "system_metrics",
            "name": "SystemMetricsCollector",
            "level": 1
          },
          {
            "module": "system_metrics",
            "name": "ConnectionAgeTracker",
            "level": 1
          },
          {
            "module": "system_metrics",
            "name": "RequestQueueMonitor",
            "level": 1
          },
          {
            "module": "system_metrics",
            "name": "CacheEfficiencyMonitor",
            "level": 1
          },
          {
            "module": "system_metrics",
            "name": "FeatureUsageAnalytics",
            "level": 1
          },
          {
            "module": "system_metrics",
            "name": "MetricsConfig",
            "level": 1
          },
          {
            "module": "system_metrics",
            "name": "get_system_metrics_collector",
            "level": 1
          },
          {
            "module": "aggregation_engine",
            "name": "start_aggregation_engine",
            "level": 1
          },
          {
            "module": "aggregation_engine",
            "name": "stop_aggregation_engine",
            "level": 1
          }
        ]
      }
    },
    "metrics.integration_middleware": {
      "path": "src/prompt_improver/metrics/integration_middleware.py",
      "imports": {
        "absolute": [
          "asyncio",
          "functools",
          "logging",
          "time",
          "uuid",
          "inspect"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "contextlib",
            "name": "asynccontextmanager"
          },
          {
            "module": "fastapi",
            "name": "Request"
          },
          {
            "module": "fastapi",
            "name": "Response"
          },
          {
            "module": "fastapi.middleware.base",
            "name": "BaseHTTPMiddleware"
          }
        ],
        "relative_from": [
          {
            "module": "ml_metrics",
            "name": "get_ml_metrics_collector",
            "level": 1
          },
          {
            "module": "ml_metrics",
            "name": "record_prompt_improvement",
            "level": 1
          },
          {
            "module": "ml_metrics",
            "name": "record_model_inference",
            "level": 1
          },
          {
            "module": "ml_metrics",
            "name": "PromptCategory",
            "level": 1
          },
          {
            "module": "ml_metrics",
            "name": "ModelInferenceStage",
            "level": 1
          },
          {
            "module": "api_metrics",
            "name": "get_api_metrics_collector",
            "level": 1
          },
          {
            "module": "api_metrics",
            "name": "record_api_request",
            "level": 1
          },
          {
            "module": "api_metrics",
            "name": "record_user_journey_event",
            "level": 1
          },
          {
            "module": "api_metrics",
            "name": "EndpointCategory",
            "level": 1
          },
          {
            "module": "api_metrics",
            "name": "HTTPMethod",
            "level": 1
          },
          {
            "module": "api_metrics",
            "name": "UserJourneyStage",
            "level": 1
          },
          {
            "module": "api_metrics",
            "name": "AuthenticationMethod",
            "level": 1
          },
          {
            "module": "performance_metrics",
            "name": "get_performance_metrics_collector",
            "level": 1
          },
          {
            "module": "performance_metrics",
            "name": "record_pipeline_stage_timing",
            "level": 1
          },
          {
            "module": "performance_metrics",
            "name": "PipelineStage",
            "level": 1
          },
          {
            "module": "performance_metrics",
            "name": "DatabaseOperation",
            "level": 1
          },
          {
            "module": "performance_metrics",
            "name": "CacheType",
            "level": 1
          },
          {
            "module": "performance_metrics",
            "name": "ExternalAPIType",
            "level": 1
          },
          {
            "module": "business_intelligence_metrics",
            "name": "get_bi_metrics_collector",
            "level": 1
          },
          {
            "module": "business_intelligence_metrics",
            "name": "record_feature_usage",
            "level": 1
          },
          {
            "module": "business_intelligence_metrics",
            "name": "record_operational_cost",
            "level": 1
          },
          {
            "module": "business_intelligence_metrics",
            "name": "FeatureCategory",
            "level": 1
          },
          {
            "module": "business_intelligence_metrics",
            "name": "UserTier",
            "level": 1
          },
          {
            "module": "business_intelligence_metrics",
            "name": "CostType",
            "level": 1
          },
          {
            "module": "business_intelligence_metrics",
            "name": "ResourceType",
            "level": 1
          },
          {
            "module": "performance_metrics",
            "name": "DatabasePerformanceMetric",
            "level": 1
          },
          {
            "module": "performance_metrics",
            "name": "CachePerformanceMetric",
            "level": 1
          }
        ]
      }
    },
    "metrics.business_intelligence_metrics": {
      "path": "src/prompt_improver/metrics/business_intelligence_metrics.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time",
          "json",
          "statistics",
          "uuid"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "asdict"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "collections",
            "name": "defaultdict"
          },
          {
            "module": "collections",
            "name": "deque"
          }
        ],
        "relative_from": [
          {
            "module": "performance.monitoring.metrics_registry",
            "name": "get_metrics_registry",
            "level": 2
          }
        ]
      }
    },
    "database.config": {
      "path": "src/prompt_improver/database/config.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [
          {
            "module": "pydantic",
            "name": "Field"
          },
          {
            "module": "pydantic_settings",
            "name": "BaseSettings"
          },
          {
            "module": "pydantic_settings",
            "name": "SettingsConfigDict"
          }
        ],
        "relative_from": []
      }
    },
    "database.models": {
      "path": "src/prompt_improver/database/models.py",
      "imports": {
        "absolute": [
          "uuid",
          "sqlmodel"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "sqlalchemy",
            "name": "Column"
          },
          {
            "module": "sqlalchemy",
            "name": "JSON"
          },
          {
            "module": "sqlalchemy",
            "name": "Index"
          },
          {
            "module": "sqlalchemy",
            "name": "String"
          },
          {
            "module": "sqlalchemy",
            "name": "Text"
          },
          {
            "module": "sqlalchemy",
            "name": "UniqueConstraint"
          },
          {
            "module": "sqlmodel",
            "name": "Field"
          },
          {
            "module": "sqlmodel",
            "name": "Relationship"
          },
          {
            "module": "sqlmodel",
            "name": "SQLModel"
          },
          {
            "module": "prompt_improver.database.registry",
            "name": "get_registry_manager"
          },
          {
            "module": "prompt_improver.utils.datetime_utils",
            "name": "naive_utc_now"
          },
          {
            "module": "datetime",
            "name": "date"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "pydantic",
            "name": "BaseModel"
          }
        ],
        "relative_from": []
      }
    },
    "database.adaptive_connection_pool": {
      "path": "src/prompt_improver/database/adaptive_connection_pool.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time",
          "statistics",
          "psycopg"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "collections",
            "name": "deque"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "psycopg_pool",
            "name": "AsyncConnectionPool"
          }
        ],
        "relative_from": [
          {
            "module": "config",
            "name": "DatabaseConfig",
            "level": 1
          }
        ]
      }
    },
    "database.registry": {
      "path": "src/prompt_improver/database/registry.py",
      "imports": {
        "absolute": [
          "logging",
          "sys"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "contextlib",
            "name": "contextmanager"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Iterator"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Type"
          },
          {
            "module": "sqlalchemy",
            "name": "MetaData"
          },
          {
            "module": "sqlalchemy.orm",
            "name": "DeclarativeBase"
          },
          {
            "module": "sqlalchemy.orm",
            "name": "registry"
          },
          {
            "module": "sqlmodel",
            "name": "SQLModel"
          }
        ],
        "relative_from": []
      }
    },
    "database.ha_connection_manager": {
      "path": "src/prompt_improver/database/ha_connection_manager.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time",
          "json",
          "asyncpg",
          "coredis"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "coredis.sentinel",
            "name": "Sentinel"
          },
          {
            "module": "psycopg_pool",
            "name": "AsyncConnectionPool"
          }
        ],
        "relative_from": [
          {
            "module": "config",
            "name": "DatabaseConfig",
            "level": 1
          },
          {
            "module": "utils.redis_cache",
            "name": "RedisConfig",
            "level": 2
          }
        ]
      }
    },
    "database.performance_monitor": {
      "path": "src/prompt_improver/database/performance_monitor.py",
      "imports": {
        "absolute": [
          "asyncio"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          }
        ],
        "relative_from": [
          {
            "module": "psycopg_client",
            "name": "TypeSafePsycopgClient",
            "level": 1
          },
          {
            "module": "psycopg_client",
            "name": "get_psycopg_client",
            "level": 1
          },
          {
            "module": "ml.orchestration.events.event_types",
            "name": "EventType",
            "level": 2
          },
          {
            "module": "ml.orchestration.events.event_types",
            "name": "MLEvent",
            "level": 2
          },
          {
            "module": "ml.orchestration.events.event_types",
            "name": "EventType",
            "level": 2
          },
          {
            "module": "ml.orchestration.events.event_types",
            "name": "MLEvent",
            "level": 2
          }
        ]
      }
    },
    "database.query_optimizer": {
      "path": "src/prompt_improver/database/query_optimizer.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "psutil",
          "time",
          "hashlib",
          "hashlib",
          "json",
          "json"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "contextlib",
            "name": "asynccontextmanager"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          },
          {
            "module": "sqlalchemy.sql",
            "name": "Executable"
          },
          {
            "module": "prompt_improver.database.psycopg_client",
            "name": "get_psycopg_client"
          },
          {
            "module": "prompt_improver.utils.redis_cache",
            "name": "RedisCache"
          }
        ],
        "relative_from": [
          {
            "module": "performance.optimization.performance_optimizer",
            "name": "measure_database_operation",
            "level": 2
          },
          {
            "module": "ml.orchestration.events.event_types",
            "name": "EventType",
            "level": 2
          },
          {
            "module": "ml.orchestration.events.event_types",
            "name": "MLEvent",
            "level": 2
          },
          {
            "module": "ml.orchestration.events.event_types",
            "name": "EventType",
            "level": 2
          },
          {
            "module": "ml.orchestration.events.event_types",
            "name": "MLEvent",
            "level": 2
          },
          {
            "module": "ml.orchestration.events.event_types",
            "name": "EventType",
            "level": 2
          },
          {
            "module": "ml.orchestration.events.event_types",
            "name": "MLEvent",
            "level": 2
          }
        ]
      }
    },
    "database.__init__": {
      "path": "src/prompt_improver/database/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Annotated"
          },
          {
            "module": "fastapi",
            "name": "Depends"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          }
        ],
        "relative_from": [
          {
            "module": "config",
            "name": "DatabaseConfig",
            "level": 1
          },
          {
            "module": "connection",
            "name": "AsyncSessionFactory",
            "level": 1
          },
          {
            "module": "connection",
            "name": "DatabaseManager",
            "level": 1
          },
          {
            "module": "connection",
            "name": "DatabaseSessionManager",
            "level": 1
          },
          {
            "module": "connection",
            "name": "SessionProvider",
            "level": 1
          },
          {
            "module": "connection",
            "name": "SyncSessionFactory",
            "level": 1
          },
          {
            "module": "connection",
            "name": "_get_global_sessionmanager",
            "level": 1
          },
          {
            "module": "connection",
            "name": "get_async_session_factory",
            "level": 1
          },
          {
            "module": "connection",
            "name": "get_session",
            "level": 1
          },
          {
            "module": "connection",
            "name": "get_session_context",
            "level": 1
          },
          {
            "module": "models",
            "name": "ABExperiment",
            "level": 1
          },
          {
            "module": "models",
            "name": "ImprovementSession",
            "level": 1
          },
          {
            "module": "models",
            "name": "MLModelPerformance",
            "level": 1
          },
          {
            "module": "models",
            "name": "RuleMetadata",
            "level": 1
          },
          {
            "module": "models",
            "name": "RulePerformance",
            "level": 1
          },
          {
            "module": "models",
            "name": "UserFeedback",
            "level": 1
          },
          {
            "module": "utils",
            "name": "scalar",
            "level": 1
          }
        ]
      }
    },
    "database.error_handling": {
      "path": "src/prompt_improver/database/error_handling.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "psycopg"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "psycopg",
            "name": "errors"
          },
          {
            "module": "prompt_improver.utils.datetime_utils",
            "name": "aware_utc_now"
          }
        ],
        "relative_from": [
          {
            "module": "performance.monitoring.metrics_registry",
            "name": "get_metrics_registry",
            "level": 2
          },
          {
            "module": "performance.monitoring.metrics_registry",
            "name": "StandardMetrics",
            "level": 2
          },
          {
            "module": "performance.monitoring.metrics_registry",
            "name": "PROMETHEUS_AVAILABLE",
            "level": 2
          },
          {
            "module": "ml.orchestration.core.unified_retry_manager",
            "name": "RetryConfig",
            "level": 2
          },
          {
            "module": "ml.orchestration.core.unified_retry_manager",
            "name": "RetryStrategy",
            "level": 2
          },
          {
            "module": "ml.orchestration.core.unified_retry_manager",
            "name": "RetryableErrorType",
            "level": 2
          },
          {
            "module": "ml.orchestration.core.unified_retry_manager",
            "name": "get_retry_manager",
            "level": 2
          },
          {
            "module": "ml.orchestration.core.unified_retry_manager",
            "name": "RetryableErrorType",
            "level": 2
          },
          {
            "module": "ml.orchestration.core.unified_retry_manager",
            "name": "RetryConfig",
            "level": 2
          },
          {
            "module": "ml.orchestration.core.unified_retry_manager",
            "name": "get_retry_manager",
            "level": 2
          }
        ]
      }
    },
    "database.connection": {
      "path": "src/prompt_improver/database/connection.py",
      "imports": {
        "absolute": [
          "contextlib",
          "logging",
          "os"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "collections.abc",
            "name": "AsyncIterator"
          },
          {
            "module": "collections.abc",
            "name": "Iterator"
          },
          {
            "module": "typing",
            "name": "Annotated"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Protocol"
          },
          {
            "module": "typing",
            "name": "runtime_checkable"
          },
          {
            "module": "fastapi",
            "name": "Depends"
          },
          {
            "module": "sqlalchemy",
            "name": "Engine"
          },
          {
            "module": "sqlalchemy",
            "name": "create_engine"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncConnection"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncEngine"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "async_sessionmaker"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "create_async_engine"
          },
          {
            "module": "sqlalchemy.orm",
            "name": "Session"
          },
          {
            "module": "sqlalchemy.orm",
            "name": "sessionmaker"
          },
          {
            "module": "sqlalchemy.pool",
            "name": "NullPool"
          },
          {
            "module": "sqlmodel",
            "name": "SQLModel"
          },
          {
            "module": "prompt_improver.database.config",
            "name": "get_database_config"
          }
        ],
        "relative_from": [
          {
            "module": "config",
            "name": "DatabaseConfig",
            "level": 1
          },
          {
            "module": "security.secure_startup",
            "name": "get_secure_database_url",
            "level": 2
          },
          {
            "module": "security.secure_startup",
            "name": "check_environment_security",
            "level": 2
          }
        ]
      }
    },
    "database.connection_pool_optimizer": {
      "path": "src/prompt_improver/database/connection_pool_optimizer.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time",
          "psutil"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "psycopg_pool",
            "name": "AsyncConnectionPool"
          }
        ],
        "relative_from": [
          {
            "module": "psycopg_client",
            "name": "TypeSafePsycopgClient",
            "level": 1
          },
          {
            "module": "psycopg_client",
            "name": "get_psycopg_client",
            "level": 1
          },
          {
            "module": "performance.monitoring.metrics_registry",
            "name": "get_metrics_registry",
            "level": 2
          },
          {
            "module": "core.config",
            "name": "get_config",
            "level": 2
          },
          {
            "module": "core.config",
            "name": "reload_config",
            "level": 2
          }
        ]
      }
    },
    "database.utils": {
      "path": "src/prompt_improver/database/utils.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "TypeVar"
          },
          {
            "module": "sqlalchemy",
            "name": "Executable"
          },
          {
            "module": "sqlalchemy.engine",
            "name": "Row"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          }
        ],
        "relative_from": []
      }
    },
    "database.optimization_integration": {
      "path": "src/prompt_improver/database/optimization_integration.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          }
        ],
        "relative_from": [
          {
            "module": "cache_layer",
            "name": "DatabaseCacheLayer",
            "level": 1
          },
          {
            "module": "cache_layer",
            "name": "CachePolicy",
            "level": 1
          },
          {
            "module": "cache_layer",
            "name": "CacheStrategy",
            "level": 1
          },
          {
            "module": "connection_pool_optimizer",
            "name": "ConnectionPoolOptimizer",
            "level": 1
          },
          {
            "module": "connection_pool_optimizer",
            "name": "get_connection_pool_optimizer",
            "level": 1
          },
          {
            "module": "query_optimizer",
            "name": "OptimizedQueryExecutor",
            "level": 1
          },
          {
            "module": "query_optimizer",
            "name": "get_query_executor",
            "level": 1
          },
          {
            "module": "performance_monitor",
            "name": "DatabasePerformanceMonitor",
            "level": 1
          },
          {
            "module": "performance_monitor",
            "name": "get_performance_monitor",
            "level": 1
          },
          {
            "module": "ml.orchestration.events.event_bus",
            "name": "get_event_bus",
            "level": 2
          },
          {
            "module": "ml.orchestration.events.event_types",
            "name": "EventType",
            "level": 2
          },
          {
            "module": "psycopg_client",
            "name": "get_psycopg_client",
            "level": 1
          }
        ]
      }
    },
    "database.cache_layer": {
      "path": "src/prompt_improver/database/cache_layer.py",
      "imports": {
        "absolute": [
          "asyncio",
          "hashlib",
          "json",
          "logging",
          "time"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "TypeVar"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          },
          {
            "module": "pydantic",
            "name": "BaseModel"
          }
        ],
        "relative_from": [
          {
            "module": "utils.redis_cache",
            "name": "RedisCache",
            "level": 2
          },
          {
            "module": "performance.monitoring.metrics_registry",
            "name": "get_metrics_registry",
            "level": 2
          },
          {
            "module": "performance.monitoring.metrics_registry",
            "name": "StandardMetrics",
            "level": 2
          }
        ]
      }
    },
    "database.analytics_query_interface": {
      "path": "src/prompt_improver/database/analytics_query_interface.py",
      "imports": {
        "absolute": [
          "logging",
          "asyncio"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          },
          {
            "module": "sqlalchemy",
            "name": "select"
          },
          {
            "module": "sqlalchemy",
            "name": "and_"
          },
          {
            "module": "sqlalchemy",
            "name": "or_"
          },
          {
            "module": "sqlalchemy",
            "name": "desc"
          },
          {
            "module": "sqlalchemy",
            "name": "asc"
          },
          {
            "module": "sqlalchemy",
            "name": "func"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          },
          {
            "module": "sqlalchemy",
            "name": "case"
          },
          {
            "module": "sqlalchemy",
            "name": "literal_column"
          },
          {
            "module": "sqlalchemy.orm",
            "name": "selectinload"
          },
          {
            "module": "sqlalchemy.orm",
            "name": "joinedload"
          },
          {
            "module": "sqlalchemy.sql",
            "name": "Select"
          },
          {
            "module": "sqlalchemy.dialects.postgresql",
            "name": "aggregate_order_by"
          }
        ],
        "relative_from": [
          {
            "module": "models",
            "name": "TrainingSession",
            "level": 1
          },
          {
            "module": "models",
            "name": "TrainingIteration",
            "level": 1
          },
          {
            "module": "models",
            "name": "GenerationSession",
            "level": 1
          },
          {
            "module": "models",
            "name": "ImprovementSession",
            "level": 1
          },
          {
            "module": "query_optimizer",
            "name": "execute_optimized_query",
            "level": 1
          },
          {
            "module": "utils.datetime_utils",
            "name": "naive_utc_now",
            "level": 2
          }
        ]
      }
    },
    "database.mcp_connection_pool": {
      "path": "src/prompt_improver/database/mcp_connection_pool.py",
      "imports": {
        "absolute": [
          "contextlib",
          "logging",
          "os"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "collections.abc",
            "name": "AsyncIterator"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "sqlalchemy",
            "name": "event"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncEngine"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "async_sessionmaker"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "create_async_engine"
          }
        ],
        "relative_from": [
          {
            "module": "config",
            "name": "DatabaseConfig",
            "level": 1
          }
        ]
      }
    },
    "database.psycopg_client": {
      "path": "src/prompt_improver/database/psycopg_client.py",
      "imports": {
        "absolute": [
          "asyncio",
          "contextlib",
          "logging",
          "os",
          "socket",
          "time",
          "aiofiles",
          "psycopg",
          "csv",
          "io"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "TypeVar"
          },
          {
            "module": "psycopg",
            "name": "errors"
          },
          {
            "module": "psycopg",
            "name": "sql"
          },
          {
            "module": "psycopg.rows",
            "name": "dict_row"
          },
          {
            "module": "psycopg_pool",
            "name": "AsyncConnectionPool"
          },
          {
            "module": "pydantic",
            "name": "BaseModel"
          },
          {
            "module": "pydantic",
            "name": "ValidationError"
          },
          {
            "module": "prompt_improver.utils.datetime_utils",
            "name": "aware_utc_now"
          }
        ],
        "relative_from": [
          {
            "module": "config",
            "name": "DatabaseConfig",
            "level": 1
          },
          {
            "module": "error_handling",
            "name": "DatabaseErrorClassifier",
            "level": 1
          },
          {
            "module": "error_handling",
            "name": "ErrorCategory",
            "level": 1
          },
          {
            "module": "error_handling",
            "name": "ErrorSeverity",
            "level": 1
          },
          {
            "module": "error_handling",
            "name": "ErrorMetrics",
            "level": 1
          },
          {
            "module": "error_handling",
            "name": "enhance_error_context",
            "level": 1
          },
          {
            "module": "error_handling",
            "name": "global_error_metrics",
            "level": 1
          },
          {
            "module": "error_handling",
            "name": "get_default_database_retry_config",
            "level": 1
          },
          {
            "module": "error_handling",
            "name": "execute_with_database_retry",
            "level": 1
          },
          {
            "module": "ml.orchestration.core.unified_retry_manager",
            "name": "get_retry_manager",
            "level": 2
          }
        ]
      }
    },
    "database.health.query_performance_analyzer": {
      "path": "src/prompt_improver/database/health/query_performance_analyzer.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "decimal",
            "name": "Decimal"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          }
        ],
        "relative_from": [
          {
            "module": "psycopg_client",
            "name": "TypeSafePsycopgClient",
            "level": 2
          },
          {
            "module": "psycopg_client",
            "name": "get_psycopg_client",
            "level": 2
          },
          {
            "module": "connection",
            "name": "get_session_context",
            "level": 2
          }
        ]
      }
    },
    "database.health.index_health_assessor": {
      "path": "src/prompt_improver/database/health/index_health_assessor.py",
      "imports": {
        "absolute": [
          "logging",
          "time"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          }
        ],
        "relative_from": [
          {
            "module": "psycopg_client",
            "name": "TypeSafePsycopgClient",
            "level": 2
          },
          {
            "module": "psycopg_client",
            "name": "get_psycopg_client",
            "level": 2
          },
          {
            "module": "connection",
            "name": "get_session_context",
            "level": 2
          }
        ]
      }
    },
    "database.health.__init__": {
      "path": "src/prompt_improver/database/health/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "database_health_monitor",
            "name": "DatabaseHealthMonitor",
            "level": 1
          },
          {
            "module": "database_health_monitor",
            "name": "get_database_health_monitor",
            "level": 1
          },
          {
            "module": "connection_pool_monitor",
            "name": "ConnectionPoolMonitor",
            "level": 1
          },
          {
            "module": "query_performance_analyzer",
            "name": "QueryPerformanceAnalyzer",
            "level": 1
          },
          {
            "module": "index_health_assessor",
            "name": "IndexHealthAssessor",
            "level": 1
          },
          {
            "module": "table_bloat_detector",
            "name": "TableBloatDetector",
            "level": 1
          }
        ]
      }
    },
    "database.health.table_bloat_detector": {
      "path": "src/prompt_improver/database/health/table_bloat_detector.py",
      "imports": {
        "absolute": [
          "logging",
          "time"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "decimal",
            "name": "Decimal"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          }
        ],
        "relative_from": [
          {
            "module": "psycopg_client",
            "name": "TypeSafePsycopgClient",
            "level": 2
          },
          {
            "module": "psycopg_client",
            "name": "get_psycopg_client",
            "level": 2
          },
          {
            "module": "connection",
            "name": "get_session_context",
            "level": 2
          }
        ]
      }
    },
    "database.health.connection_pool_monitor": {
      "path": "src/prompt_improver/database/health/connection_pool_monitor.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          }
        ],
        "relative_from": [
          {
            "module": "psycopg_client",
            "name": "TypeSafePsycopgClient",
            "level": 2
          },
          {
            "module": "psycopg_client",
            "name": "get_psycopg_client",
            "level": 2
          },
          {
            "module": "connection",
            "name": "get_session_context",
            "level": 2
          }
        ]
      }
    },
    "database.health.database_health_monitor": {
      "path": "src/prompt_improver/database/health/database_health_monitor.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "decimal",
            "name": "Decimal"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          }
        ],
        "relative_from": [
          {
            "module": "psycopg_client",
            "name": "TypeSafePsycopgClient",
            "level": 2
          },
          {
            "module": "psycopg_client",
            "name": "get_psycopg_client",
            "level": 2
          },
          {
            "module": "connection",
            "name": "get_session_context",
            "level": 2
          },
          {
            "module": "connection_pool_optimizer",
            "name": "get_connection_pool_optimizer",
            "level": 2
          },
          {
            "module": "connection_pool_monitor",
            "name": "ConnectionPoolMonitor",
            "level": 1
          },
          {
            "module": "query_performance_analyzer",
            "name": "QueryPerformanceAnalyzer",
            "level": 1
          },
          {
            "module": "index_health_assessor",
            "name": "IndexHealthAssessor",
            "level": 1
          },
          {
            "module": "table_bloat_detector",
            "name": "TableBloatDetector",
            "level": 1
          }
        ]
      }
    },
    "database.models.generation_models": {
      "path": "src/prompt_improver/database/models/generation_models.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "sqlalchemy",
            "name": "Column"
          },
          {
            "module": "sqlalchemy",
            "name": "JSON"
          },
          {
            "module": "sqlalchemy",
            "name": "Index"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          },
          {
            "module": "sqlmodel",
            "name": "Field"
          },
          {
            "module": "sqlmodel",
            "name": "Relationship"
          },
          {
            "module": "sqlmodel",
            "name": "SQLModel"
          }
        ],
        "relative_from": [
          {
            "module": "utils.datetime_utils",
            "name": "naive_utc_now",
            "level": 2
          }
        ]
      }
    },
    "database.services.generation_service": {
      "path": "src/prompt_improver/database/services/generation_service.py",
      "imports": {
        "absolute": [
          "logging",
          "uuid"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "sqlalchemy",
            "name": "and_"
          },
          {
            "module": "sqlalchemy",
            "name": "desc"
          },
          {
            "module": "sqlalchemy",
            "name": "func"
          },
          {
            "module": "sqlalchemy",
            "name": "select"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          }
        ],
        "relative_from": [
          {
            "module": "models",
            "name": "GenerationAnalytics",
            "level": 2
          },
          {
            "module": "models",
            "name": "GenerationBatch",
            "level": 2
          },
          {
            "module": "models",
            "name": "GenerationMethodPerformance",
            "level": 2
          },
          {
            "module": "models",
            "name": "GenerationQualityAssessment",
            "level": 2
          },
          {
            "module": "models",
            "name": "GenerationSession",
            "level": 2
          },
          {
            "module": "models",
            "name": "SyntheticDataSample",
            "level": 2
          },
          {
            "module": "utils.datetime_utils",
            "name": "naive_utc_now",
            "level": 3
          }
        ]
      }
    },
    "core.config_migration_example": {
      "path": "src/prompt_improver/core/config_migration_example.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "typing",
            "name": "AsyncGenerator"
          },
          {
            "module": "prompt_improver.core.config",
            "name": "get_config"
          },
          {
            "module": "prompt_improver.core.config",
            "name": "reload_config"
          },
          {
            "module": "prompt_improver.core.config",
            "name": "add_config_reload_callback"
          },
          {
            "module": "prompt_improver.core.config",
            "name": "config_lifespan"
          },
          {
            "module": "prompt_improver.core.config",
            "name": "validate_config_environment"
          },
          {
            "module": "prompt_improver.core.config",
            "name": "get_config_summary"
          },
          {
            "module": "prompt_improver.database.config",
            "name": "get_database_config"
          },
          {
            "module": "prompt_improver.database.config",
            "name": "DatabaseConfig"
          }
        ],
        "relative_from": []
      }
    },
    "core.config": {
      "path": "src/prompt_improver/core/config.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "os",
          "threading",
          "time"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "contextlib",
            "name": "asynccontextmanager"
          },
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "AsyncGenerator"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "watchdog.events",
            "name": "FileSystemEventHandler"
          },
          {
            "module": "watchdog.observers",
            "name": "Observer"
          },
          {
            "module": "pydantic",
            "name": "AliasChoices"
          },
          {
            "module": "pydantic",
            "name": "BaseModel"
          },
          {
            "module": "pydantic",
            "name": "Field"
          },
          {
            "module": "pydantic",
            "name": "PostgresDsn"
          },
          {
            "module": "pydantic",
            "name": "RedisDsn"
          },
          {
            "module": "pydantic",
            "name": "field_validator"
          },
          {
            "module": "pydantic",
            "name": "model_validator"
          },
          {
            "module": "pydantic_settings",
            "name": "BaseSettings"
          },
          {
            "module": "pydantic_settings",
            "name": "SettingsConfigDict"
          }
        ],
        "relative_from": []
      }
    },
    "core.retry_implementations": {
      "path": "src/prompt_improver/core/retry_implementations.py",
      "imports": {
        "absolute": [
          "logging",
          "random"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          }
        ],
        "relative_from": [
          {
            "module": "protocols.retry_protocols",
            "name": "RetryConfigProtocol",
            "level": 1
          },
          {
            "module": "protocols.retry_protocols",
            "name": "RetryStrategy",
            "level": 1
          },
          {
            "module": "protocols.retry_protocols",
            "name": "RetryableErrorType",
            "level": 1
          },
          {
            "module": "protocols.retry_protocols",
            "name": "RetryConfigFactoryProtocol",
            "level": 1
          }
        ]
      }
    },
    "core.config_manager": {
      "path": "src/prompt_improver/core/config_manager.py",
      "imports": {
        "absolute": [
          "asyncio",
          "hashlib",
          "json",
          "logging",
          "os",
          "time",
          "weakref",
          "aiohttp",
          "yaml",
          "aiofiles",
          "re"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "abc",
            "name": "ABC"
          },
          {
            "module": "abc",
            "name": "abstractmethod"
          },
          {
            "module": "contextlib",
            "name": "asynccontextmanager"
          },
          {
            "module": "copy",
            "name": "deepcopy"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "urllib.parse",
            "name": "urlparse"
          },
          {
            "module": "pydantic",
            "name": "BaseModel"
          },
          {
            "module": "pydantic",
            "name": "Field"
          },
          {
            "module": "pydantic",
            "name": "validator"
          },
          {
            "module": "watchdog.events",
            "name": "FileSystemEventHandler"
          },
          {
            "module": "watchdog.observers",
            "name": "Observer"
          }
        ],
        "relative_from": [
          {
            "module": "security.config_validator",
            "name": "SecurityConfigValidator",
            "level": 2
          }
        ]
      }
    },
    "core.config_validator": {
      "path": "src/prompt_improver/core/config_validator.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "os",
          "sys",
          "json",
          "argparse",
          "psycopg",
          "coredis"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "prompt_improver.security.config_validator",
            "name": "SecurityConfigValidator"
          },
          {
            "module": "prompt_improver.database.config",
            "name": "DatabaseConfig"
          }
        ],
        "relative_from": []
      }
    },
    "core.config_schema": {
      "path": "src/prompt_improver/core/config_schema.py",
      "imports": {
        "absolute": [
          "json",
          "logging",
          "argparse"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "pydantic",
            "name": "BaseModel"
          },
          {
            "module": "pydantic",
            "name": "Field"
          }
        ],
        "relative_from": []
      }
    },
    "core.__init__": {
      "path": "src/prompt_improver/core/__init__.py",
      "imports": {
        "absolute": [
          "warnings"
        ],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "interfaces.datetime_service",
            "name": "DateTimeServiceProtocol",
            "level": 1
          },
          {
            "module": "interfaces.datetime_service",
            "name": "MockDateTimeService",
            "level": 1
          },
          {
            "module": "services.datetime_service",
            "name": "DateTimeService",
            "level": 1
          },
          {
            "module": "di.container",
            "name": "DIContainer",
            "level": 1
          },
          {
            "module": "di.container",
            "name": "get_datetime_service",
            "level": 1
          },
          {
            "module": "di.container",
            "name": "get_container",
            "level": 1
          },
          {
            "module": "services.prompt_improvement",
            "name": "PromptImprovementService",
            "level": 1
          },
          {
            "module": "services.startup",
            "name": "StartupOrchestrator",
            "level": 1
          },
          {
            "module": "services.startup",
            "name": "init_startup_tasks",
            "level": 1
          },
          {
            "module": "services.startup",
            "name": "shutdown_startup_tasks",
            "level": 1
          },
          {
            "module": "services.startup",
            "name": "startup_context",
            "level": 1
          },
          {
            "module": "services.startup",
            "name": "is_startup_complete",
            "level": 1
          },
          {
            "module": "services.manager",
            "name": "APESServiceManager",
            "level": 1
          },
          {
            "module": "services.security",
            "name": "PromptDataProtection",
            "level": 1
          },
          {
            "module": "setup.initializer",
            "name": "SystemInitializer",
            "level": 1
          },
          {
            "module": "setup.migration",
            "name": "MigrationManager",
            "level": 1
          }
        ]
      }
    },
    "core.feature_flags": {
      "path": "src/prompt_improver/core/feature_flags.py",
      "imports": {
        "absolute": [
          "asyncio",
          "hashlib",
          "json",
          "logging",
          "threading",
          "time",
          "yaml"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "watchdog.events",
            "name": "FileSystemEventHandler"
          },
          {
            "module": "watchdog.observers",
            "name": "Observer"
          },
          {
            "module": "pydantic",
            "name": "BaseModel"
          },
          {
            "module": "pydantic",
            "name": "Field"
          },
          {
            "module": "pydantic",
            "name": "validator"
          }
        ],
        "relative_from": []
      }
    },
    "core.config_logging": {
      "path": "src/prompt_improver/core/config_logging.py",
      "imports": {
        "absolute": [
          "json",
          "logging",
          "sys"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "asdict"
          },
          {
            "module": "contextlib",
            "name": "contextmanager"
          }
        ],
        "relative_from": []
      }
    },
    "core.retry_config": {
      "path": "src/prompt_improver/core/retry_config.py",
      "imports": {
        "absolute": [
          "logging",
          "random"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          }
        ],
        "relative_from": []
      }
    },
    "core.di.__init__": {
      "path": "src/prompt_improver/core/di/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": []
      }
    },
    "core.di.container": {
      "path": "src/prompt_improver/core/di/container.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "inspect"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Type"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "TypeVar"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "enum",
            "name": "Enum"
          }
        ],
        "relative_from": [
          {
            "module": "interfaces.datetime_service",
            "name": "DateTimeServiceProtocol",
            "level": 2
          },
          {
            "module": "services.datetime_service",
            "name": "DateTimeService",
            "level": 2
          }
        ]
      }
    },
    "core.setup.__init__": {
      "path": "src/prompt_improver/core/setup/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "initializer",
            "name": "APESInitializer",
            "level": 1
          },
          {
            "module": "migration",
            "name": "APESMigrationManager",
            "level": 1
          }
        ]
      }
    },
    "core.setup.initializer": {
      "path": "src/prompt_improver/core/setup/initializer.py",
      "imports": {
        "absolute": [
          "asyncio",
          "os",
          "subprocess",
          "yaml",
          "shutil",
          "json"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "rich.console",
            "name": "Console"
          },
          {
            "module": "rich.progress",
            "name": "BarColumn"
          },
          {
            "module": "rich.progress",
            "name": "Progress"
          },
          {
            "module": "rich.progress",
            "name": "SpinnerColumn"
          },
          {
            "module": "rich.progress",
            "name": "TaskProgressColumn"
          },
          {
            "module": "rich.progress",
            "name": "TextColumn"
          },
          {
            "module": "sqlalchemy",
            "name": "func"
          },
          {
            "module": "sqlalchemy",
            "name": "select"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          }
        ],
        "relative_from": [
          {
            "module": "database",
            "name": "get_session",
            "level": 3
          },
          {
            "module": "database.config",
            "name": "DatabaseConfig",
            "level": 3
          },
          {
            "module": "database",
            "name": "scalar",
            "level": 3
          },
          {
            "module": "database",
            "name": "scalar",
            "level": 3
          },
          {
            "module": "mcp_server.mcp_server",
            "name": "improve_prompt",
            "level": 2
          },
          {
            "module": "database.models",
            "name": "RuleMetadata",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "TrainingPrompt",
            "level": 3
          },
          {
            "module": "synthetic_data_generator",
            "name": "ProductionSyntheticDataGenerator",
            "level": 1
          }
        ]
      }
    },
    "core.setup.migration": {
      "path": "src/prompt_improver/core/setup/migration.py",
      "imports": {
        "absolute": [
          "asyncio",
          "gzip",
          "hashlib",
          "json",
          "platform",
          "tarfile",
          "hashlib",
          "tempfile",
          "tempfile",
          "shutil",
          "shutil"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "rich.console",
            "name": "Console"
          },
          {
            "module": "rich.progress",
            "name": "BarColumn"
          },
          {
            "module": "rich.progress",
            "name": "Progress"
          },
          {
            "module": "rich.progress",
            "name": "SpinnerColumn"
          },
          {
            "module": "rich.progress",
            "name": "TaskProgressColumn"
          },
          {
            "module": "rich.progress",
            "name": "TextColumn"
          },
          {
            "module": "prompt_improver.utils.datetime_utils",
            "name": "aware_utc_now"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          }
        ],
        "relative_from": [
          {
            "module": "database",
            "name": "get_session",
            "level": 3
          },
          {
            "module": "database",
            "name": "scalar",
            "level": 3
          },
          {
            "module": "database",
            "name": "scalar",
            "level": 3
          },
          {
            "module": "database",
            "name": "scalar",
            "level": 3
          },
          {
            "module": "database",
            "name": "scalar",
            "level": 3
          },
          {
            "module": "database",
            "name": "scalar",
            "level": 3
          }
        ]
      }
    },
    "core.protocols.retry_protocols": {
      "path": "src/prompt_improver/core/protocols/retry_protocols.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Protocol"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "enum",
            "name": "Enum"
          }
        ],
        "relative_from": []
      }
    },
    "core.protocols.__init__": {
      "path": "src/prompt_improver/core/protocols/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "retry_protocols",
            "name": "RetryStrategy",
            "level": 1
          },
          {
            "module": "retry_protocols",
            "name": "RetryableErrorType",
            "level": 1
          },
          {
            "module": "retry_protocols",
            "name": "RetryConfigProtocol",
            "level": 1
          },
          {
            "module": "retry_protocols",
            "name": "RetryManagerProtocol",
            "level": 1
          },
          {
            "module": "retry_protocols",
            "name": "MetricsRegistryProtocol",
            "level": 1
          },
          {
            "module": "retry_protocols",
            "name": "BackgroundTaskProtocol",
            "level": 1
          },
          {
            "module": "retry_protocols",
            "name": "CircuitBreakerProtocol",
            "level": 1
          },
          {
            "module": "retry_protocols",
            "name": "RetryDecoratorProtocol",
            "level": 1
          },
          {
            "module": "retry_protocols",
            "name": "RetryConfigFactoryProtocol",
            "level": 1
          },
          {
            "module": "retry_protocols",
            "name": "RetryObserverProtocol",
            "level": 1
          },
          {
            "module": "retry_protocols",
            "name": "RetryableOperation",
            "level": 1
          },
          {
            "module": "retry_protocols",
            "name": "RetryCallback",
            "level": 1
          },
          {
            "module": "retry_protocols",
            "name": "RetryPredicate",
            "level": 1
          },
          {
            "module": "retry_protocols",
            "name": "AnyRetryConfig",
            "level": 1
          },
          {
            "module": "retry_protocols",
            "name": "AnyMetricsRegistry",
            "level": 1
          }
        ]
      }
    },
    "core.services.startup": {
      "path": "src/prompt_improver/core/services/startup.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "contextlib",
            "name": "asynccontextmanager"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Set"
          }
        ],
        "relative_from": [
          {
            "module": "ml.optimization.batch.batch_processor",
            "name": "BatchProcessor",
            "level": 3
          },
          {
            "module": "ml.optimization.batch.batch_processor",
            "name": "BatchProcessorConfig",
            "level": 3
          },
          {
            "module": "ml.optimization.batch.batch_processor",
            "name": "periodic_batch_processor_coroutine",
            "level": 3
          },
          {
            "module": "performance.monitoring.health.background_manager",
            "name": "BackgroundTaskManager",
            "level": 3
          },
          {
            "module": "performance.monitoring.health.background_manager",
            "name": "init_background_task_manager",
            "level": 3
          },
          {
            "module": "performance.monitoring.health.background_manager",
            "name": "shutdown_background_task_manager",
            "level": 3
          },
          {
            "module": "performance.monitoring.health.service",
            "name": "get_health_service",
            "level": 3
          },
          {
            "module": "utils.session_store",
            "name": "SessionStore",
            "level": 3
          }
        ]
      }
    },
    "core.services.prompt_improvement": {
      "path": "src/prompt_improver/core/services/prompt_improvement.py",
      "imports": {
        "absolute": [
          "json",
          "logging",
          "time",
          "uuid",
          "yaml"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "sqlalchemy",
            "name": "select"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          },
          {
            "module": "sqlmodel",
            "name": "select"
          },
          {
            "module": "prompt_improver.utils.datetime_utils",
            "name": "aware_utc_now"
          }
        ],
        "relative_from": [
          {
            "module": "ml.automl.orchestrator",
            "name": "AutoMLConfig",
            "level": 3
          },
          {
            "module": "ml.automl.orchestrator",
            "name": "AutoMLMode",
            "level": 3
          },
          {
            "module": "ml.automl.orchestrator",
            "name": "AutoMLOrchestrator",
            "level": 3
          },
          {
            "module": "database",
            "name": "get_session_context",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "ImprovementSession",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "ImprovementSessionCreate",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "RuleMetadata",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "RulePerformance",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "RulePerformanceCreate",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "UserFeedback",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "UserFeedbackCreate",
            "level": 3
          },
          {
            "module": "ml.optimization.algorithms.multi_armed_bandit",
            "name": "BanditAlgorithm",
            "level": 3
          },
          {
            "module": "ml.optimization.algorithms.multi_armed_bandit",
            "name": "BanditConfig",
            "level": 3
          },
          {
            "module": "ml.optimization.algorithms.multi_armed_bandit",
            "name": "MultiarmedBanditFramework",
            "level": 3
          },
          {
            "module": "ml.optimization.algorithms.multi_armed_bandit",
            "name": "create_rule_optimization_bandit",
            "level": 3
          },
          {
            "module": "ml.optimization.algorithms.multi_armed_bandit",
            "name": "intelligent_rule_selection",
            "level": 3
          },
          {
            "module": "rule_engine.base",
            "name": "BasePromptRule",
            "level": 3
          },
          {
            "module": "performance.testing.ab_testing_service",
            "name": "ABTestingService",
            "level": 3
          },
          {
            "module": "ml.core.ml_integration",
            "name": "MLModelService",
            "level": 3
          },
          {
            "module": "ml.core.ml_integration",
            "name": "get_ml_service",
            "level": 2
          },
          {
            "module": "ml.core.ml_integration",
            "name": "get_ml_service",
            "level": 2
          },
          {
            "module": "ml.core.training_data_loader",
            "name": "TrainingDataLoader",
            "level": 2
          },
          {
            "module": "ml.core.ml_integration",
            "name": "get_ml_service",
            "level": 2
          },
          {
            "module": "evaluation.experiment_orchestrator",
            "name": "ExperimentOrchestrator",
            "level": 2
          },
          {
            "module": "optimization.rule_optimizer",
            "name": "RuleOptimizer",
            "level": 2
          },
          {
            "module": "analytics_factory",
            "name": "get_analytics_router",
            "level": 1
          },
          {
            "module": "ml.models.model_manager",
            "name": "ModelManager",
            "level": 2
          },
          {
            "module": "rule_engine.rules.clarity",
            "name": "ClarityRule",
            "level": 2
          },
          {
            "module": "rule_engine.rules.chain_of_thought",
            "name": "ChainOfThoughtRule",
            "level": 2
          },
          {
            "module": "rule_engine.rules.few_shot_examples",
            "name": "FewShotExampleRule",
            "level": 2
          },
          {
            "module": "rule_engine.rules.role_based_prompting",
            "name": "RoleBasedPromptingRule",
            "level": 2
          },
          {
            "module": "rule_engine.rules.xml_structure_enhancement",
            "name": "XMLStructureRule",
            "level": 2
          },
          {
            "module": "rule_engine.rules.specificity",
            "name": "SpecificityRule",
            "level": 2
          },
          {
            "module": "rule_engine.rules.clarity",
            "name": "ClarityRule",
            "level": 2
          },
          {
            "module": "rule_engine.rules.specificity",
            "name": "SpecificityRule",
            "level": 2
          },
          {
            "module": "database.models",
            "name": "MLModelPerformance",
            "level": 2
          },
          {
            "module": "database.models",
            "name": "ABExperiment",
            "level": 2
          },
          {
            "module": "optimization.multi_armed_bandit",
            "name": "ArmResult",
            "level": 2
          }
        ]
      }
    },
    "core.services.security": {
      "path": "src/prompt_improver/core/services/security.py",
      "imports": {
        "absolute": [
          "asyncio",
          "json",
          "logging",
          "re",
          "hashlib"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "rich.console",
            "name": "Console"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          }
        ],
        "relative_from": [
          {
            "module": "database",
            "name": "get_sessionmanager",
            "level": 3
          },
          {
            "module": "analytics_factory",
            "name": "get_analytics_interface",
            "level": 1
          }
        ]
      }
    },
    "core.services.__init__": {
      "path": "src/prompt_improver/core/services/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "prompt_improvement",
            "name": "PromptImprovementService",
            "level": 1
          },
          {
            "module": "startup",
            "name": "StartupOrchestrator",
            "level": 1
          },
          {
            "module": "startup",
            "name": "init_startup_tasks",
            "level": 1
          },
          {
            "module": "startup",
            "name": "shutdown_startup_tasks",
            "level": 1
          },
          {
            "module": "startup",
            "name": "startup_context",
            "level": 1
          },
          {
            "module": "startup",
            "name": "is_startup_complete",
            "level": 1
          },
          {
            "module": "manager",
            "name": "APESServiceManager",
            "level": 1
          },
          {
            "module": "security",
            "name": "PromptDataProtection",
            "level": 1
          }
        ]
      }
    },
    "core.services.service_registry": {
      "path": "src/prompt_improver/core/services/service_registry.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "threading"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Type"
          },
          {
            "module": "typing",
            "name": "TypeVar"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "functools",
            "name": "wraps"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "enum",
            "name": "Enum"
          }
        ],
        "relative_from": []
      }
    },
    "core.services.analytics_factory": {
      "path": "src/prompt_improver/core/services/analytics_factory.py",
      "imports": {
        "absolute": [
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          }
        ],
        "relative_from": [
          {
            "module": "service_registry",
            "name": "register_analytics_service",
            "level": 1
          },
          {
            "module": "service_registry",
            "name": "register_real_time_analytics_service",
            "level": 1
          },
          {
            "module": "service_registry",
            "name": "get_analytics_service",
            "level": 1
          },
          {
            "module": "service_registry",
            "name": "get_real_time_analytics_service",
            "level": 1
          },
          {
            "module": "service_registry",
            "name": "service_provider",
            "level": 1
          },
          {
            "module": "service_registry",
            "name": "ServiceScope",
            "level": 1
          },
          {
            "module": "service_registry",
            "name": "register_service",
            "level": 1
          },
          {
            "module": "service_registry",
            "name": "ServiceScope",
            "level": 1
          },
          {
            "module": "database.analytics_query_interface",
            "name": "AnalyticsQueryInterface",
            "level": 3
          },
          {
            "module": "ml.analytics.session_summary_reporter",
            "name": "SessionSummaryReporter",
            "level": 3
          },
          {
            "module": "api.analytics_endpoints",
            "name": "analytics_router",
            "level": 3
          },
          {
            "module": "service_registry",
            "name": "get_service",
            "level": 1
          },
          {
            "module": "service_registry",
            "name": "get_service",
            "level": 1
          },
          {
            "module": "service_registry",
            "name": "get_service",
            "level": 1
          }
        ]
      }
    },
    "core.services.datetime_service": {
      "path": "src/prompt_improver/core/services/datetime_service.py",
      "imports": {
        "absolute": [
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "zoneinfo",
            "name": "ZoneInfo"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          }
        ],
        "relative_from": [
          {
            "module": "interfaces.datetime_service",
            "name": "DateTimeServiceProtocol",
            "level": 2
          }
        ]
      }
    },
    "core.services.manager": {
      "path": "src/prompt_improver/core/services/manager.py",
      "imports": {
        "absolute": [
          "asyncio",
          "os",
          "signal",
          "sys",
          "json",
          "logging",
          "psutil"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "rich.console",
            "name": "Console"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          }
        ],
        "relative_from": [
          {
            "module": "database",
            "name": "get_session",
            "level": 3
          },
          {
            "module": "database",
            "name": "get_sessionmanager",
            "level": 3
          },
          {
            "module": "utils.subprocess_security",
            "name": "ensure_running",
            "level": 3
          },
          {
            "module": "database",
            "name": "scalar",
            "level": 2
          },
          {
            "module": "services.health",
            "name": "get_health_service",
            "level": 2
          },
          {
            "module": "database",
            "name": "scalar",
            "level": 2
          },
          {
            "module": "services.health",
            "name": "get_health_service",
            "level": 2
          },
          {
            "module": "ml.orchestration.events.event_types",
            "name": "MLEvent",
            "level": 3
          },
          {
            "module": "ml.orchestration.events.event_types",
            "name": "EventType",
            "level": 3
          }
        ]
      }
    },
    "core.interfaces.__init__": {
      "path": "src/prompt_improver/core/interfaces/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": []
      }
    },
    "core.interfaces.datetime_service": {
      "path": "src/prompt_improver/core/interfaces/datetime_service.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Protocol"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "zoneinfo",
            "name": "ZoneInfo"
          }
        ],
        "relative_from": []
      }
    },
    "cache.__init__": {
      "path": "src/prompt_improver/cache/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "redis_health",
            "name": "RedisHealthMonitor",
            "level": 1
          },
          {
            "module": "redis_health",
            "name": "RedisHealthChecker",
            "level": 1
          },
          {
            "module": "redis_health",
            "name": "get_redis_health_summary",
            "level": 1
          },
          {
            "module": "redis_health",
            "name": "create_redis_health_checker",
            "level": 1
          },
          {
            "module": "redis_health",
            "name": "RedisHealthStatus",
            "level": 1
          },
          {
            "module": "redis_health",
            "name": "RedisRole",
            "level": 1
          },
          {
            "module": "redis_health",
            "name": "MemoryMetrics",
            "level": 1
          },
          {
            "module": "redis_health",
            "name": "PerformanceMetrics",
            "level": 1
          },
          {
            "module": "redis_health",
            "name": "PersistenceMetrics",
            "level": 1
          },
          {
            "module": "redis_health",
            "name": "ReplicationMetrics",
            "level": 1
          },
          {
            "module": "redis_health",
            "name": "ConnectionMetrics",
            "level": 1
          },
          {
            "module": "redis_health",
            "name": "KeyspaceMetrics",
            "level": 1
          },
          {
            "module": "redis_health",
            "name": "SlowLogMetrics",
            "level": 1
          }
        ]
      }
    },
    "cache.redis_health": {
      "path": "src/prompt_improver/cache/redis_health.py",
      "imports": {
        "absolute": [
          "asyncio",
          "time",
          "statistics",
          "logging",
          "json",
          "re",
          "coredis"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "coredis.exceptions",
            "name": "RedisError"
          },
          {
            "module": "coredis.exceptions",
            "name": "ConnectionError"
          }
        ],
        "relative_from": [
          {
            "module": "utils.redis_cache",
            "name": "redis_client",
            "level": 2
          },
          {
            "module": "utils.redis_cache",
            "name": "CACHE_ERRORS",
            "level": 2
          },
          {
            "module": "utils.redis_cache",
            "name": "get_cache_metrics",
            "level": 2
          }
        ]
      }
    },
    "cache.redis_health_example": {
      "path": "src/prompt_improver/cache/redis_health_example.py",
      "imports": {
        "absolute": [
          "asyncio",
          "json",
          "time",
          "traceback"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          }
        ],
        "relative_from": [
          {
            "module": "redis_health",
            "name": "RedisHealthMonitor",
            "level": 1
          },
          {
            "module": "redis_health",
            "name": "get_redis_health_summary",
            "level": 1
          }
        ]
      }
    },
    "security.key_manager": {
      "path": "src/prompt_improver/security/key_manager.py",
      "imports": {
        "absolute": [
          "hashlib",
          "logging",
          "secrets",
          "time",
          "base64",
          "base64"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "cryptography.fernet",
            "name": "Fernet"
          },
          {
            "module": "cryptography.hazmat.primitives",
            "name": "hashes"
          },
          {
            "module": "cryptography.hazmat.primitives.kdf.pbkdf2",
            "name": "PBKDF2HMAC"
          },
          {
            "module": "cryptography.hazmat.primitives.kdf.scrypt",
            "name": "Scrypt"
          }
        ],
        "relative_from": [
          {
            "module": "utils.datetime_utils",
            "name": "aware_utc_now",
            "level": 2
          }
        ]
      }
    },
    "security.differential_privacy": {
      "path": "src/prompt_improver/security/differential_privacy.py",
      "imports": {
        "absolute": [
          "math",
          "random",
          "numpy"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Union"
          }
        ],
        "relative_from": []
      }
    },
    "security.rate_limit_middleware": {
      "path": "src/prompt_improver/security/rate_limit_middleware.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "os",
          "time",
          "coredis"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "functools",
            "name": "wraps"
          }
        ],
        "relative_from": [
          {
            "module": "redis_rate_limiter",
            "name": "SlidingWindowRateLimiter",
            "level": 1
          },
          {
            "module": "redis_rate_limiter",
            "name": "RateLimitResult",
            "level": 1
          },
          {
            "module": "redis_rate_limiter",
            "name": "RateLimitStatus",
            "level": 1
          },
          {
            "module": "mcp_authentication",
            "name": "RateLimitTier",
            "level": 1
          }
        ]
      }
    },
    "security.config_validator": {
      "path": "src/prompt_improver/security/config_validator.py",
      "imports": {
        "absolute": [
          "logging",
          "os",
          "re",
          "secrets",
          "string"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Tuple"
          }
        ],
        "relative_from": []
      }
    },
    "security.output_validator": {
      "path": "src/prompt_improver/security/output_validator.py",
      "imports": {
        "absolute": [
          "re",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "enum",
            "name": "Enum"
          }
        ],
        "relative_from": []
      }
    },
    "security.mcp_middleware": {
      "path": "src/prompt_improver/security/mcp_middleware.py",
      "imports": {
        "absolute": [
          "logging",
          "time",
          "time"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "functools",
            "name": "wraps"
          },
          {
            "module": "mcp.server.fastmcp",
            "name": "FastMCP"
          }
        ],
        "relative_from": [
          {
            "module": "mcp_authentication",
            "name": "MCPAuthenticationService",
            "level": 1
          },
          {
            "module": "mcp_authentication",
            "name": "MCPPermission",
            "level": 1
          }
        ]
      }
    },
    "security.redis_rate_limiter": {
      "path": "src/prompt_improver/security/redis_rate_limiter.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time",
          "coredis"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "coredis",
            "name": "Redis"
          },
          {
            "module": "coredis.exceptions",
            "name": "ConnectionError"
          },
          {
            "module": "coredis.exceptions",
            "name": "TimeoutError"
          }
        ],
        "relative_from": []
      }
    },
    "security.__init__": {
      "path": "src/prompt_improver/security/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "adversarial_defense",
            "name": "AdversarialDefenseSystem",
            "level": 1
          },
          {
            "module": "authentication",
            "name": "AuthenticationService",
            "level": 1
          },
          {
            "module": "authorization",
            "name": "AuthorizationService",
            "level": 1
          },
          {
            "module": "authorization",
            "name": "Permission",
            "level": 1
          },
          {
            "module": "authorization",
            "name": "Role",
            "level": 1
          },
          {
            "module": "differential_privacy",
            "name": "DifferentialPrivacyService",
            "level": 1
          },
          {
            "module": "federated_learning",
            "name": "FederatedLearningService",
            "level": 1
          },
          {
            "module": "input_sanitization",
            "name": "InputSanitizer",
            "level": 1
          },
          {
            "module": "input_validator",
            "name": "InputValidator",
            "level": 1
          },
          {
            "module": "input_validator",
            "name": "ValidationError",
            "level": 1
          },
          {
            "module": "input_validator",
            "name": "ValidationSchema",
            "level": 1
          },
          {
            "module": "memory_guard",
            "name": "MemoryGuard",
            "level": 1
          },
          {
            "module": "memory_guard",
            "name": "get_memory_guard",
            "level": 1
          },
          {
            "module": "key_manager",
            "name": "SecureKeyManager",
            "level": 1
          },
          {
            "module": "key_manager",
            "name": "FernetKeyManager",
            "level": 1
          },
          {
            "module": "key_manager",
            "name": "KeyRotationConfig",
            "level": 1
          },
          {
            "module": "key_manager",
            "name": "get_key_manager",
            "level": 1
          },
          {
            "module": "key_manager",
            "name": "get_fernet_manager",
            "level": 1
          },
          {
            "module": "secure_logging",
            "name": "SecureLogger",
            "level": 1
          }
        ]
      }
    },
    "security.structured_prompts": {
      "path": "src/prompt_improver/security/structured_prompts.py",
      "imports": {
        "absolute": [
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "enum",
            "name": "Enum"
          }
        ],
        "relative_from": []
      }
    },
    "security.secure_logging": {
      "path": "src/prompt_improver/security/secure_logging.py",
      "imports": {
        "absolute": [
          "logging",
          "re"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          }
        ],
        "relative_from": []
      }
    },
    "security.authorization": {
      "path": "src/prompt_improver/security/authorization.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Set"
          }
        ],
        "relative_from": []
      }
    },
    "security.federated_learning": {
      "path": "src/prompt_improver/security/federated_learning.py",
      "imports": {
        "absolute": [
          "hashlib",
          "json",
          "secrets"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "cryptography.fernet",
            "name": "Fernet"
          }
        ],
        "relative_from": []
      }
    },
    "security.secure_startup": {
      "path": "src/prompt_improver/security/secure_startup.py",
      "imports": {
        "absolute": [
          "logging",
          "os",
          "sys"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Optional"
          }
        ],
        "relative_from": [
          {
            "module": "config_validator",
            "name": "SecurityConfigValidator",
            "level": 1
          },
          {
            "module": "config_validator",
            "name": "validate_security_configuration",
            "level": 1
          }
        ]
      }
    },
    "security.input_sanitization": {
      "path": "src/prompt_improver/security/input_sanitization.py",
      "imports": {
        "absolute": [
          "asyncio",
          "html",
          "logging",
          "math",
          "re",
          "time",
          "numpy"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "enum",
            "name": "Enum"
          }
        ],
        "relative_from": [
          {
            "module": "ml.orchestration.events.event_types",
            "name": "MLEvent",
            "level": 2
          },
          {
            "module": "ml.orchestration.events.event_types",
            "name": "EventType",
            "level": 2
          }
        ]
      }
    },
    "security.adversarial_defense": {
      "path": "src/prompt_improver/security/adversarial_defense.py",
      "imports": {
        "absolute": [
          "random",
          "numpy",
          "asyncio",
          "asyncio",
          "asyncio",
          "asyncio",
          "asyncio",
          "asyncio",
          "asyncio",
          "asyncio"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "datetime",
            "name": "datetime"
          }
        ],
        "relative_from": []
      }
    },
    "security.authentication": {
      "path": "src/prompt_improver/security/authentication.py",
      "imports": {
        "absolute": [
          "hashlib",
          "hmac",
          "secrets",
          "time",
          "jwt"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "prompt_improver.utils.datetime_utils",
            "name": "aware_utc_now"
          }
        ],
        "relative_from": []
      }
    },
    "security.mcp_authentication": {
      "path": "src/prompt_improver/security/mcp_authentication.py",
      "imports": {
        "absolute": [
          "os",
          "secrets",
          "time",
          "jwt"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Literal"
          },
          {
            "module": "enum",
            "name": "Enum"
          }
        ],
        "relative_from": [
          {
            "module": "authentication",
            "name": "AuthenticationService",
            "level": 1
          }
        ]
      }
    },
    "security.memory_guard": {
      "path": "src/prompt_improver/security/memory_guard.py",
      "imports": {
        "absolute": [
          "asyncio",
          "gc",
          "logging",
          "resource",
          "time",
          "numpy",
          "psutil",
          "time"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "contextlib",
            "name": "asynccontextmanager"
          }
        ],
        "relative_from": [
          {
            "module": "ml.orchestration.events.event_types",
            "name": "MLEvent",
            "level": 2
          },
          {
            "module": "ml.orchestration.events.event_types",
            "name": "EventType",
            "level": 2
          }
        ]
      }
    },
    "security.auth_decorators": {
      "path": "src/prompt_improver/security/auth_decorators.py",
      "imports": {
        "absolute": [
          "functools",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Optional"
          }
        ],
        "relative_from": [
          {
            "module": "authentication",
            "name": "AuthenticationService",
            "level": 1
          },
          {
            "module": "input_validator",
            "name": "InputValidator",
            "level": 1
          },
          {
            "module": "input_validator",
            "name": "ValidationError",
            "level": 1
          }
        ]
      }
    },
    "security.input_validator": {
      "path": "src/prompt_improver/security/input_validator.py",
      "imports": {
        "absolute": [
          "hashlib",
          "re",
          "numpy"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Union"
          }
        ],
        "relative_from": [
          {
            "module": "input_sanitization",
            "name": "InputSanitizer",
            "level": 1
          }
        ]
      }
    },
    "security.owasp_input_validator": {
      "path": "src/prompt_improver/security/owasp_input_validator.py",
      "imports": {
        "absolute": [
          "base64",
          "html",
          "re",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          }
        ],
        "relative_from": []
      }
    },
    "tui.__init__": {
      "path": "src/prompt_improver/tui/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "dashboard",
            "name": "APESDashboard",
            "level": 1
          }
        ]
      }
    },
    "tui.dashboard": {
      "path": "src/prompt_improver/tui/dashboard.py",
      "imports": {
        "absolute": [
          "asyncio"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "rich.console",
            "name": "Console"
          },
          {
            "module": "rich.text",
            "name": "Text"
          },
          {
            "module": "textual.app",
            "name": "App"
          },
          {
            "module": "textual.app",
            "name": "ComposeResult"
          },
          {
            "module": "textual.containers",
            "name": "Container"
          },
          {
            "module": "textual.containers",
            "name": "Horizontal"
          },
          {
            "module": "textual.containers",
            "name": "Vertical"
          },
          {
            "module": "textual.reactive",
            "name": "reactive"
          },
          {
            "module": "textual.timer",
            "name": "Timer"
          },
          {
            "module": "textual.widgets",
            "name": "Button"
          },
          {
            "module": "textual.widgets",
            "name": "Footer"
          },
          {
            "module": "textual.widgets",
            "name": "Header"
          },
          {
            "module": "textual.widgets",
            "name": "Static"
          },
          {
            "module": "textual.widgets",
            "name": "TabbedContent"
          },
          {
            "module": "textual.widgets",
            "name": "TabPane"
          }
        ],
        "relative_from": [
          {
            "module": "data_provider",
            "name": "APESDataProvider",
            "level": 1
          },
          {
            "module": "widgets.ab_testing",
            "name": "ABTestingWidget",
            "level": 1
          },
          {
            "module": "widgets.automl_status",
            "name": "AutoMLStatusWidget",
            "level": 1
          },
          {
            "module": "widgets.performance_metrics",
            "name": "PerformanceMetricsWidget",
            "level": 1
          },
          {
            "module": "widgets.service_control",
            "name": "ServiceControlWidget",
            "level": 1
          },
          {
            "module": "widgets.system_overview",
            "name": "SystemOverviewWidget",
            "level": 1
          }
        ]
      }
    },
    "tui.data_provider": {
      "path": "src/prompt_improver/tui/data_provider.py",
      "imports": {
        "absolute": [
          "asyncio",
          "json"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "prompt_improver.core.services.analytics_factory",
            "name": "get_analytics_interface"
          },
          {
            "module": "prompt_improver.performance.monitoring.health.service",
            "name": "health_service"
          },
          {
            "module": "prompt_improver.core.services.analytics_factory",
            "name": "get_analytics_router"
          },
          {
            "module": "prompt_improver.ml.automl.orchestrator",
            "name": "auto_ml_orchestrator"
          },
          {
            "module": "prompt_improver.ml.evaluation.experiment_orchestrator",
            "name": "experiment_orchestrator"
          },
          {
            "module": "prompt_improver.core.services.manager",
            "name": "apes_service_manager"
          }
        ],
        "relative_from": []
      }
    },
    "tui.widgets.ab_testing": {
      "path": "src/prompt_improver/tui/widgets/ab_testing.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "rich.bar",
            "name": "Bar"
          },
          {
            "module": "rich.console",
            "name": "Console"
          },
          {
            "module": "rich.panel",
            "name": "Panel"
          },
          {
            "module": "rich.table",
            "name": "Table"
          },
          {
            "module": "rich.text",
            "name": "Text"
          },
          {
            "module": "textual.containers",
            "name": "Horizontal"
          },
          {
            "module": "textual.containers",
            "name": "Vertical"
          },
          {
            "module": "textual.reactive",
            "name": "reactive"
          },
          {
            "module": "textual.widgets",
            "name": "DataTable"
          },
          {
            "module": "textual.widgets",
            "name": "Static"
          },
          {
            "module": "rich.console",
            "name": "Group"
          },
          {
            "module": "rich.console",
            "name": "Group"
          }
        ],
        "relative_from": []
      }
    },
    "tui.widgets.performance_metrics": {
      "path": "src/prompt_improver/tui/widgets/performance_metrics.py",
      "imports": {
        "absolute": [
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "rich.bar",
            "name": "Bar"
          },
          {
            "module": "rich.console",
            "name": "Console"
          },
          {
            "module": "rich.panel",
            "name": "Panel"
          },
          {
            "module": "rich.table",
            "name": "Table"
          },
          {
            "module": "rich.text",
            "name": "Text"
          },
          {
            "module": "textual.containers",
            "name": "Horizontal"
          },
          {
            "module": "textual.containers",
            "name": "Vertical"
          },
          {
            "module": "textual.reactive",
            "name": "reactive"
          },
          {
            "module": "textual.widgets",
            "name": "Static"
          },
          {
            "module": "rich.console",
            "name": "Group"
          },
          {
            "module": "rich.console",
            "name": "Group"
          }
        ],
        "relative_from": [
          {
            "module": "performance.monitoring.performance_monitor",
            "name": "EnhancedPerformanceMonitor",
            "level": 3
          },
          {
            "module": "performance.monitoring.performance_monitor",
            "name": "SLO",
            "level": 3
          },
          {
            "module": "performance.monitoring.performance_monitor",
            "name": "SLI",
            "level": 3
          },
          {
            "module": "performance.monitoring.performance_monitor",
            "name": "SLIType",
            "level": 3
          }
        ]
      }
    },
    "tui.widgets.__init__": {
      "path": "src/prompt_improver/tui/widgets/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "ab_testing",
            "name": "ABTestingWidget",
            "level": 1
          },
          {
            "module": "automl_status",
            "name": "AutoMLStatusWidget",
            "level": 1
          },
          {
            "module": "performance_metrics",
            "name": "PerformanceMetricsWidget",
            "level": 1
          },
          {
            "module": "service_control",
            "name": "ServiceControlWidget",
            "level": 1
          },
          {
            "module": "system_overview",
            "name": "SystemOverviewWidget",
            "level": 1
          }
        ]
      }
    },
    "tui.widgets.service_control": {
      "path": "src/prompt_improver/tui/widgets/service_control.py",
      "imports": {
        "absolute": [
          "asyncio"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "rich.console",
            "name": "Console"
          },
          {
            "module": "rich.panel",
            "name": "Panel"
          },
          {
            "module": "rich.table",
            "name": "Table"
          },
          {
            "module": "rich.text",
            "name": "Text"
          },
          {
            "module": "textual",
            "name": "on"
          },
          {
            "module": "textual.containers",
            "name": "Horizontal"
          },
          {
            "module": "textual.containers",
            "name": "Vertical"
          },
          {
            "module": "textual.reactive",
            "name": "reactive"
          },
          {
            "module": "textual.widgets",
            "name": "Button"
          },
          {
            "module": "textual.widgets",
            "name": "DataTable"
          },
          {
            "module": "textual.widgets",
            "name": "Static"
          },
          {
            "module": "rich.console",
            "name": "Group"
          }
        ],
        "relative_from": []
      }
    },
    "tui.widgets.system_overview": {
      "path": "src/prompt_improver/tui/widgets/system_overview.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "rich.bar",
            "name": "Bar"
          },
          {
            "module": "rich.console",
            "name": "Console"
          },
          {
            "module": "rich.panel",
            "name": "Panel"
          },
          {
            "module": "rich.table",
            "name": "Table"
          },
          {
            "module": "rich.text",
            "name": "Text"
          },
          {
            "module": "textual.containers",
            "name": "Horizontal"
          },
          {
            "module": "textual.containers",
            "name": "Vertical"
          },
          {
            "module": "textual.reactive",
            "name": "reactive"
          },
          {
            "module": "textual.widgets",
            "name": "Label"
          },
          {
            "module": "textual.widgets",
            "name": "Static"
          }
        ],
        "relative_from": []
      }
    },
    "tui.widgets.automl_status": {
      "path": "src/prompt_improver/tui/widgets/automl_status.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "rich.bar",
            "name": "Bar"
          },
          {
            "module": "rich.console",
            "name": "Console"
          },
          {
            "module": "rich.panel",
            "name": "Panel"
          },
          {
            "module": "rich.table",
            "name": "Table"
          },
          {
            "module": "textual.reactive",
            "name": "reactive"
          },
          {
            "module": "textual.widgets",
            "name": "Static"
          },
          {
            "module": "rich.console",
            "name": "Group"
          }
        ],
        "relative_from": []
      }
    },
    "utils.event_loop_manager": {
      "path": "src/prompt_improver/utils/event_loop_manager.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "sys",
          "time",
          "uvloop",
          "uvloop"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Type"
          },
          {
            "module": "typing",
            "name": "Union"
          }
        ],
        "relative_from": []
      }
    },
    "utils.health_checks": {
      "path": "src/prompt_improver/utils/health_checks.py",
      "imports": {
        "absolute": [
          "time"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Awaitable"
          },
          {
            "module": "collections.abc",
            "name": "Coroutine"
          }
        ],
        "relative_from": [
          {
            "module": "performance.monitoring.health",
            "name": "AggregatedHealthResult",
            "level": 2
          },
          {
            "module": "performance.monitoring.health",
            "name": "HealthResult",
            "level": 2
          },
          {
            "module": "performance.monitoring.health",
            "name": "HealthStatus",
            "level": 2
          },
          {
            "module": "performance.monitoring.health",
            "name": "get_health_service",
            "level": 2
          }
        ]
      }
    },
    "utils.session_event_loop": {
      "path": "src/prompt_improver/utils/session_event_loop.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "collections.abc",
            "name": "AsyncGenerator"
          },
          {
            "module": "contextlib",
            "name": "asynccontextmanager"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "typing",
            "name": "TypeVar"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "prompt_improver.utils.event_loop_manager",
            "name": "get_event_loop_manager"
          }
        ],
        "relative_from": []
      }
    },
    "utils.__init__": {
      "path": "src/prompt_improver/utils/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "error_handlers",
            "name": "handle_common_errors",
            "level": 1
          },
          {
            "module": "error_handlers",
            "name": "handle_database_errors",
            "level": 1
          },
          {
            "module": "error_handlers",
            "name": "handle_filesystem_errors",
            "level": 1
          },
          {
            "module": "error_handlers",
            "name": "handle_network_errors",
            "level": 1
          },
          {
            "module": "error_handlers",
            "name": "handle_validation_errors",
            "level": 1
          },
          {
            "module": "session_store",
            "name": "SessionStore",
            "level": 1
          },
          {
            "module": "sql",
            "name": "fetch_scalar",
            "level": 1
          },
          {
            "module": "subprocess_security",
            "name": "SecureSubprocessManager",
            "level": 1
          },
          {
            "module": "subprocess_security",
            "name": "ensure_running",
            "level": 1
          },
          {
            "module": "subprocess_security",
            "name": "secure_subprocess",
            "level": 1
          }
        ]
      }
    },
    "utils.subprocess_security": {
      "path": "src/prompt_improver/utils/subprocess_security.py",
      "imports": {
        "absolute": [
          "logging",
          "os",
          "shutil",
          "subprocess",
          "sys",
          "psutil"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "collections.abc",
            "name": "Callable"
          },
          {
            "module": "functools",
            "name": "wraps"
          },
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Union"
          }
        ],
        "relative_from": []
      }
    },
    "utils.multi_level_cache": {
      "path": "src/prompt_improver/utils/multi_level_cache.py",
      "imports": {
        "absolute": [
          "asyncio",
          "json",
          "logging",
          "time",
          "hashlib"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "collections",
            "name": "OrderedDict"
          },
          {
            "module": "functools",
            "name": "wraps"
          },
          {
            "module": "prompt_improver.utils.redis_cache",
            "name": "RedisCache"
          },
          {
            "module": "opentelemetry",
            "name": "trace"
          },
          {
            "module": "opentelemetry",
            "name": "metrics"
          },
          {
            "module": "opentelemetry.trace",
            "name": "Status"
          },
          {
            "module": "opentelemetry.trace",
            "name": "StatusCode"
          },
          {
            "module": "contextlib",
            "name": "asynccontextmanager"
          }
        ],
        "relative_from": [
          {
            "module": "performance.optimization.performance_optimizer",
            "name": "measure_cache_operation",
            "level": 2
          }
        ]
      }
    },
    "utils.datetime_utils": {
      "path": "src/prompt_improver/utils/datetime_utils.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "UTC"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "typing",
            "name": "Optional"
          }
        ],
        "relative_from": []
      }
    },
    "utils.error_handlers_example": {
      "path": "src/prompt_improver/utils/error_handlers_example.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          }
        ],
        "relative_from": [
          {
            "module": "error_handlers",
            "name": "AsyncContextLogger",
            "level": 1
          },
          {
            "module": "error_handlers",
            "name": "AsyncErrorBoundary",
            "level": 1
          },
          {
            "module": "error_handlers",
            "name": "PIIRedactionFilter",
            "level": 1
          },
          {
            "module": "error_handlers",
            "name": "async_error_boundary",
            "level": 1
          },
          {
            "module": "error_handlers",
            "name": "configure_structured_logging",
            "level": 1
          }
        ]
      }
    },
    "utils.error_handlers": {
      "path": "src/prompt_improver/utils/error_handlers.py",
      "imports": {
        "absolute": [
          "asyncio",
          "json",
          "logging",
          "re",
          "time",
          "uuid",
          "json"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "collections.abc",
            "name": "Callable"
          },
          {
            "module": "contextlib",
            "name": "asynccontextmanager"
          },
          {
            "module": "functools",
            "name": "wraps"
          },
          {
            "module": "re",
            "name": "Pattern"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Literal"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          }
        ],
        "relative_from": [
          {
            "module": "ml.orchestration.core.unified_retry_manager",
            "name": "get_retry_manager",
            "level": 2
          },
          {
            "module": "ml.orchestration.core.unified_retry_manager",
            "name": "RetryConfig",
            "level": 2
          },
          {
            "module": "ml.orchestration.core.unified_retry_manager",
            "name": "RetryStrategy",
            "level": 2
          },
          {
            "module": "ml.orchestration.core.unified_retry_manager",
            "name": "RetryableErrorType",
            "level": 2
          }
        ]
      }
    },
    "utils.sql": {
      "path": "src/prompt_improver/utils/sql.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Type"
          },
          {
            "module": "typing",
            "name": "TypeVar"
          },
          {
            "module": "typing",
            "name": "cast"
          },
          {
            "module": "sqlalchemy",
            "name": "Executable"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          }
        ],
        "relative_from": []
      }
    },
    "utils.session_store": {
      "path": "src/prompt_improver/utils/session_store.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "cachetools",
            "name": "TTLCache"
          }
        ],
        "relative_from": []
      }
    },
    "utils.event_loop_benchmark": {
      "path": "src/prompt_improver/utils/event_loop_benchmark.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "statistics",
          "time"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "prompt_improver.utils.event_loop_manager",
            "name": "get_event_loop_manager"
          },
          {
            "module": "prompt_improver.utils.session_event_loop",
            "name": "get_session_wrapper"
          }
        ],
        "relative_from": []
      }
    },
    "utils.redis_cache": {
      "path": "src/prompt_improver/utils/redis_cache.py",
      "imports": {
        "absolute": [
          "asyncio",
          "hashlib",
          "json",
          "logging",
          "os",
          "time",
          "lz4.frame",
          "coredis",
          "yaml"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "functools",
            "name": "wraps"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "coredis",
            "name": "exceptions"
          },
          {
            "module": "prometheus_client",
            "name": "Counter"
          },
          {
            "module": "prometheus_client",
            "name": "Histogram"
          },
          {
            "module": "prometheus_client",
            "name": "REGISTRY"
          },
          {
            "module": "pydantic",
            "name": "BaseModel"
          },
          {
            "module": "pydantic",
            "name": "ConfigDict"
          },
          {
            "module": "pydantic",
            "name": "Field"
          },
          {
            "module": "pydantic",
            "name": "ValidationError"
          }
        ],
        "relative_from": [
          {
            "module": "performance.monitoring.metrics_registry",
            "name": "get_metrics_registry",
            "level": 2
          },
          {
            "module": "performance.monitoring.metrics_registry",
            "name": "StandardMetrics",
            "level": 2
          }
        ]
      }
    },
    "utils.websocket_manager": {
      "path": "src/prompt_improver/utils/websocket_manager.py",
      "imports": {
        "absolute": [
          "asyncio",
          "json",
          "logging",
          "coredis"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "collections",
            "name": "defaultdict"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "uuid",
            "name": "uuid4"
          },
          {
            "module": "fastapi",
            "name": "WebSocket"
          },
          {
            "module": "fastapi",
            "name": "WebSocketDisconnect"
          },
          {
            "module": "prompt_improver.utils.datetime_utils",
            "name": "aware_utc_now"
          }
        ],
        "relative_from": []
      }
    },
    "cli.clean_cli": {
      "path": "src/prompt_improver/cli/clean_cli.py",
      "imports": {
        "absolute": [
          "asyncio",
          "signal",
          "sys",
          "typer",
          "json",
          "time",
          "time"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "rich.console",
            "name": "Console"
          },
          {
            "module": "rich.progress",
            "name": "Progress"
          },
          {
            "module": "rich.progress",
            "name": "SpinnerColumn"
          },
          {
            "module": "rich.progress",
            "name": "TextColumn"
          },
          {
            "module": "rich.progress",
            "name": "BarColumn"
          },
          {
            "module": "rich.progress",
            "name": "TaskProgressColumn"
          },
          {
            "module": "typing",
            "name": "Optional"
          }
        ],
        "relative_from": [
          {
            "module": "core.training_system_manager",
            "name": "TrainingSystemManager",
            "level": 1
          },
          {
            "module": "core.cli_orchestrator",
            "name": "CLIOrchestrator",
            "level": 1
          },
          {
            "module": "core.system_state_reporter",
            "name": "SystemStateReporter",
            "level": 1
          },
          {
            "module": "core.signal_handler",
            "name": "AsyncSignalHandler",
            "level": 1
          },
          {
            "module": "core.signal_handler",
            "name": "ShutdownContext",
            "level": 1
          },
          {
            "module": "core.signal_handler",
            "name": "ShutdownReason",
            "level": 1
          },
          {
            "module": "core.progress_preservation",
            "name": "ProgressPreservationManager",
            "level": 1
          }
        ]
      }
    },
    "cli.__init__": {
      "path": "src/prompt_improver/cli/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "clean_cli",
            "name": "app",
            "level": 1
          }
        ]
      }
    },
    "cli.core.emergency_save": {
      "path": "src/prompt_improver/cli/core/emergency_save.py",
      "imports": {
        "absolute": [
          "asyncio",
          "json",
          "logging",
          "os",
          "shutil",
          "tempfile",
          "time",
          "psutil"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "asdict"
          },
          {
            "module": "sqlalchemy",
            "name": "select"
          }
        ],
        "relative_from": [
          {
            "module": "progress_preservation",
            "name": "ProgressPreservationManager",
            "level": 1
          },
          {
            "module": "progress_preservation",
            "name": "ProgressSnapshot",
            "level": 1
          },
          {
            "module": "database",
            "name": "get_session_context",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "TrainingSession",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "TrainingIteration",
            "level": 3
          }
        ]
      }
    },
    "cli.core.training_system_manager": {
      "path": "src/prompt_improver/cli/core/training_system_manager.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "math",
          "sys",
          "time",
          "uuid",
          "psutil",
          "psutil",
          "psutil"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          },
          {
            "module": "rich.console",
            "name": "Console"
          },
          {
            "module": "sqlalchemy",
            "name": "select"
          },
          {
            "module": "sqlalchemy",
            "name": "func"
          },
          {
            "module": "sqlalchemy",
            "name": "select"
          },
          {
            "module": "sqlalchemy",
            "name": "func"
          },
          {
            "module": "sqlalchemy",
            "name": "select"
          },
          {
            "module": "sqlalchemy",
            "name": "select"
          },
          {
            "module": "sqlalchemy",
            "name": "func"
          }
        ],
        "relative_from": [
          {
            "module": "database",
            "name": "get_sessionmanager",
            "level": 3
          },
          {
            "module": "ml.orchestration.core.ml_pipeline_orchestrator",
            "name": "MLPipelineOrchestrator",
            "level": 3
          },
          {
            "module": "ml.orchestration.config.orchestrator_config",
            "name": "OrchestratorConfig",
            "level": 3
          },
          {
            "module": "ml.preprocessing.synthetic_data_generator",
            "name": "ProductionSyntheticDataGenerator",
            "level": 3
          },
          {
            "module": "core.services.analytics_factory",
            "name": "get_analytics_interface",
            "level": 3
          },
          {
            "module": "rule_validation_service",
            "name": "RuleValidationService",
            "level": 1
          },
          {
            "module": "database.models",
            "name": "TrainingPrompt",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "TrainingSession",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "TrainingSessionCreate",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "TrainingSession",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "TrainingPrompt",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "PromptSession",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "PromptSession",
            "level": 3
          }
        ]
      }
    },
    "cli.core.session_resume": {
      "path": "src/prompt_improver/cli/core/session_resume.py",
      "imports": {
        "absolute": [
          "asyncio",
          "json",
          "logging",
          "os",
          "time"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "asdict"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "sqlalchemy",
            "name": "select"
          },
          {
            "module": "sqlalchemy",
            "name": "update"
          },
          {
            "module": "sqlalchemy",
            "name": "and_"
          },
          {
            "module": "sqlalchemy",
            "name": "or_"
          },
          {
            "module": "sqlalchemy.orm",
            "name": "selectinload"
          }
        ],
        "relative_from": [
          {
            "module": "progress_preservation",
            "name": "ProgressPreservationManager",
            "level": 1
          },
          {
            "module": "progress_preservation",
            "name": "ProgressSnapshot",
            "level": 1
          },
          {
            "module": "training_system_manager",
            "name": "TrainingSystemManager",
            "level": 1
          },
          {
            "module": "database",
            "name": "get_session_context",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "TrainingSession",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "TrainingIteration",
            "level": 3
          }
        ]
      }
    },
    "cli.core.pid_manager": {
      "path": "src/prompt_improver/cli/core/pid_manager.py",
      "imports": {
        "absolute": [
          "asyncio",
          "fcntl",
          "json",
          "logging",
          "os",
          "psutil",
          "signal",
          "stat",
          "time",
          "tempfile",
          "pwd",
          "grp"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "asdict"
          },
          {
            "module": "enum",
            "name": "Enum"
          }
        ],
        "relative_from": [
          {
            "module": "core.config",
            "name": "get_config",
            "level": 3
          }
        ]
      }
    },
    "cli.core.enhanced_workflow_manager": {
      "path": "src/prompt_improver/cli/core/enhanced_workflow_manager.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "rich.console",
            "name": "Console"
          },
          {
            "module": "rich.progress",
            "name": "Progress"
          },
          {
            "module": "rich.progress",
            "name": "SpinnerColumn"
          },
          {
            "module": "rich.progress",
            "name": "TextColumn"
          },
          {
            "module": "rich.progress",
            "name": "BarColumn"
          },
          {
            "module": "rich.progress",
            "name": "TaskProgressColumn"
          }
        ],
        "relative_from": [
          {
            "module": "core.cli_orchestrator",
            "name": "CLIOrchestrator",
            "level": 2
          },
          {
            "module": "ml.orchestration.core.ml_pipeline_orchestrator",
            "name": "MLPipelineOrchestrator",
            "level": 3
          },
          {
            "module": "ml.orchestration.core.ml_pipeline_orchestrator",
            "name": "PipelineState",
            "level": 3
          }
        ]
      }
    },
    "cli.core.system_state_reporter": {
      "path": "src/prompt_improver/cli/core/system_state_reporter.py",
      "imports": {
        "absolute": [
          "time",
          "json"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "rich.console",
            "name": "Console"
          },
          {
            "module": "rich.table",
            "name": "Table"
          },
          {
            "module": "rich.panel",
            "name": "Panel"
          },
          {
            "module": "rich.columns",
            "name": "Columns"
          },
          {
            "module": "rich.text",
            "name": "Text"
          }
        ],
        "relative_from": []
      }
    },
    "cli.core.emergency_operations": {
      "path": "src/prompt_improver/cli/core/emergency_operations.py",
      "imports": {
        "absolute": [
          "asyncio",
          "json",
          "logging",
          "os",
          "psutil"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "sqlalchemy",
            "name": "select"
          }
        ],
        "relative_from": [
          {
            "module": "signal_handler",
            "name": "SignalContext",
            "level": 1
          },
          {
            "module": "signal_handler",
            "name": "SignalOperation",
            "level": 1
          },
          {
            "module": "progress_preservation",
            "name": "ProgressPreservationManager",
            "level": 1
          },
          {
            "module": "database",
            "name": "get_session_context",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "TrainingSession",
            "level": 3
          },
          {
            "module": "database.ha_connection_manager",
            "name": "HAConnectionManager",
            "level": 3
          }
        ]
      }
    },
    "cli.core.cli_orchestrator": {
      "path": "src/prompt_improver/cli/core/cli_orchestrator.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Awaitable"
          },
          {
            "module": "rich.console",
            "name": "Console"
          },
          {
            "module": "rich.progress",
            "name": "Progress"
          },
          {
            "module": "rich.progress",
            "name": "SpinnerColumn"
          },
          {
            "module": "rich.progress",
            "name": "TextColumn"
          },
          {
            "module": "rich.progress",
            "name": "BarColumn"
          },
          {
            "module": "rich.progress",
            "name": "TaskProgressColumn"
          },
          {
            "module": "rich.progress",
            "name": "TimeElapsedColumn"
          }
        ],
        "relative_from": [
          {
            "module": "ml.orchestration.core.ml_pipeline_orchestrator",
            "name": "MLPipelineOrchestrator",
            "level": 3
          },
          {
            "module": "ml.orchestration.config.workflow_templates",
            "name": "WorkflowTemplates",
            "level": 3
          },
          {
            "module": "database",
            "name": "get_sessionmanager",
            "level": 3
          },
          {
            "module": "ml.orchestration.config.workflow_definition",
            "name": "WorkflowDefinition",
            "level": 3
          },
          {
            "module": "ml.orchestration.config.workflow_definition",
            "name": "WorkflowStep",
            "level": 3
          },
          {
            "module": "ml.orchestration.config.orchestrator_config",
            "name": "OrchestratorConfig",
            "level": 3
          }
        ]
      }
    },
    "cli.core.signal_handler": {
      "path": "src/prompt_improver/cli/core/signal_handler.py",
      "imports": {
        "absolute": [
          "asyncio",
          "signal",
          "logging",
          "sys",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "rich.console",
            "name": "Console"
          }
        ],
        "relative_from": [
          {
            "module": "emergency_operations",
            "name": "EmergencyOperationsManager",
            "level": 1
          },
          {
            "module": "emergency_operations",
            "name": "EmergencyOperationsManager",
            "level": 1
          },
          {
            "module": "database.ha_connection_manager",
            "name": "HAConnectionManager",
            "level": 3
          },
          {
            "module": "database",
            "name": "get_sessionmanager",
            "level": 3
          }
        ]
      }
    },
    "cli.core.rule_validation_service": {
      "path": "src/prompt_improver/cli/core/rule_validation_service.py",
      "imports": {
        "absolute": [
          "json",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "sqlalchemy",
            "name": "select"
          },
          {
            "module": "sqlalchemy",
            "name": "func"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          }
        ],
        "relative_from": [
          {
            "module": "database",
            "name": "get_sessionmanager",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "RuleMetadata",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "RulePerformance",
            "level": 3
          }
        ]
      }
    },
    "cli.core.progress_preservation": {
      "path": "src/prompt_improver/cli/core/progress_preservation.py",
      "imports": {
        "absolute": [
          "asyncio",
          "json",
          "logging",
          "os",
          "signal",
          "csv",
          "gc"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "asdict"
          },
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "sqlalchemy",
            "name": "select"
          },
          {
            "module": "sqlalchemy",
            "name": "update"
          },
          {
            "module": "sqlalchemy.orm",
            "name": "selectinload"
          }
        ],
        "relative_from": [
          {
            "module": "database",
            "name": "get_session_context",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "TrainingSession",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "TrainingIteration",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "RulePerformance",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "RuleMetadata",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "DiscoveredPattern",
            "level": 3
          }
        ]
      }
    },
    "cli.core.crash_recovery": {
      "path": "src/prompt_improver/cli/core/crash_recovery.py",
      "imports": {
        "absolute": [
          "asyncio",
          "json",
          "logging",
          "os",
          "psutil",
          "signal",
          "time"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "asdict"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "sqlalchemy",
            "name": "select"
          },
          {
            "module": "sqlalchemy",
            "name": "update"
          },
          {
            "module": "sqlalchemy",
            "name": "and_"
          },
          {
            "module": "sqlalchemy",
            "name": "or_"
          }
        ],
        "relative_from": [
          {
            "module": "progress_preservation",
            "name": "ProgressPreservationManager",
            "level": 1
          },
          {
            "module": "session_resume",
            "name": "SessionResumeManager",
            "level": 1
          },
          {
            "module": "session_resume",
            "name": "SessionState",
            "level": 1
          },
          {
            "module": "emergency_save",
            "name": "EmergencySaveManager",
            "level": 1
          },
          {
            "module": "database",
            "name": "get_session_context",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "TrainingSession",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "TrainingIteration",
            "level": 3
          },
          {
            "module": "training_system_manager",
            "name": "TrainingSystemManager",
            "level": 1
          }
        ]
      }
    },
    "cli.utils.console": {
      "path": "src/prompt_improver/cli/utils/console.py",
      "imports": {
        "absolute": [
          "json"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "rich.console",
            "name": "Console"
          },
          {
            "module": "rich.progress",
            "name": "Progress"
          },
          {
            "module": "rich.progress",
            "name": "SpinnerColumn"
          },
          {
            "module": "rich.progress",
            "name": "TextColumn"
          },
          {
            "module": "rich.progress",
            "name": "BarColumn"
          },
          {
            "module": "rich.progress",
            "name": "TaskProgressColumn"
          },
          {
            "module": "rich.table",
            "name": "Table"
          },
          {
            "module": "rich.panel",
            "name": "Panel"
          },
          {
            "module": "rich.text",
            "name": "Text"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          }
        ],
        "relative_from": []
      }
    },
    "cli.utils.__init__": {
      "path": "src/prompt_improver/cli/utils/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "console",
            "name": "ConsoleManager",
            "level": 1
          },
          {
            "module": "console",
            "name": "create_progress_bar",
            "level": 1
          },
          {
            "module": "validation",
            "name": "validate_path",
            "level": 1
          },
          {
            "module": "validation",
            "name": "validate_port",
            "level": 1
          },
          {
            "module": "validation",
            "name": "validate_timeout",
            "level": 1
          },
          {
            "module": "progress",
            "name": "ProgressReporter",
            "level": 1
          }
        ]
      }
    },
    "cli.utils.progress": {
      "path": "src/prompt_improver/cli/utils/progress.py",
      "imports": {
        "absolute": [
          "asyncio",
          "time"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "contextlib",
            "name": "contextmanager"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "rich.console",
            "name": "Console"
          },
          {
            "module": "rich.progress",
            "name": "BarColumn"
          },
          {
            "module": "rich.progress",
            "name": "Progress"
          },
          {
            "module": "rich.progress",
            "name": "SpinnerColumn"
          },
          {
            "module": "rich.progress",
            "name": "TaskProgressColumn"
          },
          {
            "module": "rich.progress",
            "name": "TextColumn"
          },
          {
            "module": "rich.progress",
            "name": "TimeElapsedColumn"
          },
          {
            "module": "rich.progress",
            "name": "TimeRemainingColumn"
          }
        ],
        "relative_from": []
      }
    },
    "cli.utils.validation": {
      "path": "src/prompt_improver/cli/utils/validation.py",
      "imports": {
        "absolute": [
          "re"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "typing",
            "name": "Union"
          }
        ],
        "relative_from": []
      }
    },
    "feedback.enhanced_feedback_collector": {
      "path": "src/prompt_improver/feedback/enhanced_feedback_collector.py",
      "imports": {
        "absolute": [
          "asyncio",
          "hashlib",
          "logging",
          "re",
          "time",
          "uuid",
          "coredis",
          "json"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "asdict"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "fastapi",
            "name": "BackgroundTasks"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          },
          {
            "module": "prompt_improver.utils.datetime_utils",
            "name": "aware_utc_now"
          }
        ],
        "relative_from": []
      }
    },
    "ml.fix_ml_types": {
      "path": "src/prompt_improver/ml/fix_ml_types.py",
      "imports": {
        "absolute": [
          "os",
          "re"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Tuple"
          }
        ],
        "relative_from": []
      }
    },
    "ml.__init__": {
      "path": "src/prompt_improver/ml/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "core.training_data_loader",
            "name": "TrainingDataLoader",
            "level": 1
          },
          {
            "module": "core.training_data_loader",
            "name": "get_training_data_stats",
            "level": 1
          },
          {
            "module": "core.ml_integration",
            "name": "MLModelService",
            "level": 1
          },
          {
            "module": "models.model_manager",
            "name": "ModelManager",
            "level": 1
          },
          {
            "module": "models.production_registry",
            "name": "ProductionModelRegistry",
            "level": 1
          },
          {
            "module": "learning.algorithms",
            "name": "ContextLearner",
            "level": 1
          },
          {
            "module": "learning.algorithms",
            "name": "FailureAnalyzer",
            "level": 1
          },
          {
            "module": "learning.algorithms",
            "name": "InsightGenerationEngine",
            "level": 1
          },
          {
            "module": "learning.algorithms",
            "name": "RuleAnalyzer",
            "level": 1
          },
          {
            "module": "optimization.algorithms.rule_optimizer",
            "name": "RuleOptimizer",
            "level": 1
          },
          {
            "module": "optimization.algorithms.multi_armed_bandit",
            "name": "MultiarmedBanditFramework",
            "level": 1
          },
          {
            "module": "optimization.algorithms.clustering_optimizer",
            "name": "ClusteringOptimizer",
            "level": 1
          },
          {
            "module": "optimization.algorithms.dimensionality_reducer",
            "name": "AdvancedDimensionalityReducer",
            "level": 1
          },
          {
            "module": "automl.orchestrator",
            "name": "AutoMLOrchestrator",
            "level": 1
          },
          {
            "module": "utils.nltk_manager",
            "name": "NLTKResourceManager",
            "level": 1
          }
        ]
      }
    },
    "ml.types": {
      "path": "src/prompt_improver/ml/types.py",
      "imports": {
        "absolute": [
          "numpy"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Literal"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Protocol"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "TypeVar"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "typing",
            "name": "runtime_checkable"
          },
          {
            "module": "numpy.typing",
            "name": "NDArray"
          }
        ],
        "relative_from": []
      }
    },
    "ml.measure_type_improvements": {
      "path": "src/prompt_improver/ml/measure_type_improvements.py",
      "imports": {
        "absolute": [
          "subprocess",
          "time",
          "json",
          "re"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Any"
          }
        ],
        "relative_from": []
      }
    },
    "ml.core.ml_integration": {
      "path": "src/prompt_improver/ml/core/ml_integration.py",
      "imports": {
        "absolute": [
          "asyncio",
          "glob",
          "json",
          "logging",
          "os",
          "time",
          "mlflow",
          "mlflow.sklearn",
          "mlflow.tracking",
          "numpy",
          "optuna",
          "pickle",
          "os",
          "os"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "threading",
            "name": "Lock"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "sklearn.ensemble",
            "name": "GradientBoostingClassifier"
          },
          {
            "module": "sklearn.ensemble",
            "name": "RandomForestClassifier"
          },
          {
            "module": "sklearn.ensemble",
            "name": "StackingClassifier"
          },
          {
            "module": "sklearn.linear_model",
            "name": "LogisticRegression"
          },
          {
            "module": "sklearn.metrics",
            "name": "accuracy_score"
          },
          {
            "module": "sklearn.metrics",
            "name": "precision_score"
          },
          {
            "module": "sklearn.metrics",
            "name": "recall_score"
          },
          {
            "module": "sklearn.model_selection",
            "name": "StratifiedKFold"
          },
          {
            "module": "sklearn.model_selection",
            "name": "cross_val_score"
          },
          {
            "module": "sklearn.pipeline",
            "name": "Pipeline"
          },
          {
            "module": "sklearn.preprocessing",
            "name": "StandardScaler"
          },
          {
            "module": "sqlalchemy",
            "name": "select"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          },
          {
            "module": "prompt_improver.utils.datetime_utils",
            "name": "aware_utc_now"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "prompt_improver.database",
            "name": "get_session"
          }
        ],
        "relative_from": [
          {
            "module": "database.connection",
            "name": "DatabaseManager",
            "level": 3
          },
          {
            "module": "database.connection",
            "name": "DatabaseSessionManager",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "MLModelPerformance",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "RuleMetadata",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "RulePerformance",
            "level": 3
          },
          {
            "module": "utils.redis_cache",
            "name": "redis_client",
            "level": 3
          },
          {
            "module": "security.input_validator",
            "name": "InputValidator",
            "level": 3
          },
          {
            "module": "security.input_validator",
            "name": "ValidationError",
            "level": 3
          },
          {
            "module": "models.production_registry",
            "name": "DeploymentStrategy",
            "level": 2
          },
          {
            "module": "models.production_registry",
            "name": "ModelAlias",
            "level": 2
          },
          {
            "module": "models.production_registry",
            "name": "ModelDeploymentConfig",
            "level": 2
          },
          {
            "module": "models.production_registry",
            "name": "ModelMetrics",
            "level": 2
          },
          {
            "module": "models.production_registry",
            "name": "ProductionModelRegistry",
            "level": 2
          },
          {
            "module": "models.production_registry",
            "name": "get_production_registry",
            "level": 2
          },
          {
            "module": "learning.patterns.advanced_pattern_discovery",
            "name": "AdvancedPatternDiscovery",
            "level": 2
          },
          {
            "module": "orchestration.events.event_types",
            "name": "EventType",
            "level": 2
          },
          {
            "module": "orchestration.events.event_types",
            "name": "MLEvent",
            "level": 2
          }
        ]
      }
    },
    "ml.core.__init__": {
      "path": "src/prompt_improver/ml/core/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "training_data_loader",
            "name": "TrainingDataLoader",
            "level": 1
          },
          {
            "module": "training_data_loader",
            "name": "get_training_data_stats",
            "level": 1
          },
          {
            "module": "ml_integration",
            "name": "MLModelService",
            "level": 1
          }
        ]
      }
    },
    "ml.core.training_data_loader": {
      "path": "src/prompt_improver/ml/core/training_data_loader.py",
      "imports": {
        "absolute": [
          "logging",
          "numpy"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "sqlalchemy",
            "name": "and_"
          },
          {
            "module": "sqlalchemy",
            "name": "func"
          },
          {
            "module": "sqlalchemy",
            "name": "select"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          }
        ],
        "relative_from": [
          {
            "module": "database.models",
            "name": "TrainingPrompt",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "RulePerformance",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "RuleMetadata",
            "level": 3
          },
          {
            "module": "utils.datetime_utils",
            "name": "aware_utc_now",
            "level": 3
          }
        ]
      }
    },
    "ml.analysis.generation_strategy_analyzer": {
      "path": "src/prompt_improver/ml/analysis/generation_strategy_analyzer.py",
      "imports": {
        "absolute": [
          "logging",
          "numpy"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "enum",
            "name": "Enum"
          }
        ],
        "relative_from": [
          {
            "module": "performance_gap_analyzer",
            "name": "PerformanceGap",
            "level": 1
          },
          {
            "module": "performance_gap_analyzer",
            "name": "GapAnalysisResult",
            "level": 1
          }
        ]
      }
    },
    "ml.analysis.__init__": {
      "path": "src/prompt_improver/ml/analysis/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "linguistic_analyzer",
            "name": "LinguisticAnalyzer",
            "level": 1
          },
          {
            "module": "linguistic_analyzer",
            "name": "LinguisticConfig",
            "level": 1
          },
          {
            "module": "domain_detector",
            "name": "DomainDetector",
            "level": 1
          },
          {
            "module": "domain_detector",
            "name": "PromptDomain",
            "level": 1
          },
          {
            "module": "domain_feature_extractor",
            "name": "DomainFeatureExtractor",
            "level": 1
          },
          {
            "module": "ner_extractor",
            "name": "NERExtractor",
            "level": 1
          },
          {
            "module": "dependency_parser",
            "name": "DependencyParser",
            "level": 1
          }
        ]
      }
    },
    "ml.analysis.ner_extractor": {
      "path": "src/prompt_improver/ml/analysis/ner_extractor.py",
      "imports": {
        "absolute": [
          "logging",
          "re",
          "nltk"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "nltk",
            "name": "ne_chunk"
          },
          {
            "module": "nltk",
            "name": "pos_tag"
          },
          {
            "module": "nltk",
            "name": "word_tokenize"
          },
          {
            "module": "nltk.tree",
            "name": "Tree"
          }
        ],
        "relative_from": []
      }
    },
    "ml.analysis.domain_feature_extractor": {
      "path": "src/prompt_improver/ml/analysis/domain_feature_extractor.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "re",
          "spacy"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "abc",
            "name": "ABC"
          },
          {
            "module": "abc",
            "name": "abstractmethod"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "functools",
            "name": "lru_cache"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "spacy.language",
            "name": "language"
          },
          {
            "module": "spacy.matcher",
            "name": "matcher"
          },
          {
            "module": "spacy.matcher",
            "name": "phrase_matcher"
          },
          {
            "module": "spacy.tokens",
            "name": "doc"
          },
          {
            "module": "spacy.tokens",
            "name": "span"
          },
          {
            "module": "spacy.tokens",
            "name": "token"
          }
        ],
        "relative_from": [
          {
            "module": "domain_detector",
            "name": "DomainClassificationResult",
            "level": 1
          },
          {
            "module": "domain_detector",
            "name": "DomainDetector",
            "level": 1
          },
          {
            "module": "domain_detector",
            "name": "PromptDomain",
            "level": 1
          }
        ]
      }
    },
    "ml.analysis.performance_gap_analyzer": {
      "path": "src/prompt_improver/ml/analysis/performance_gap_analyzer.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "numpy"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          },
          {
            "module": "sqlalchemy",
            "name": "select"
          },
          {
            "module": "sqlalchemy",
            "name": "func"
          }
        ],
        "relative_from": [
          {
            "module": "database.models",
            "name": "ImprovementSession",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "RulePerformance",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "UserFeedback",
            "level": 3
          }
        ]
      }
    },
    "ml.analysis.difficulty_distribution_analyzer": {
      "path": "src/prompt_improver/ml/analysis/difficulty_distribution_analyzer.py",
      "imports": {
        "absolute": [
          "logging",
          "numpy"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "enum",
            "name": "Enum"
          }
        ],
        "relative_from": [
          {
            "module": "performance_gap_analyzer",
            "name": "PerformanceGap",
            "level": 1
          }
        ]
      }
    },
    "ml.analysis.domain_detector": {
      "path": "src/prompt_improver/ml/analysis/domain_detector.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "re",
          "spacy"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "functools",
            "name": "lru_cache"
          },
          {
            "module": "spacy.lang.en",
            "name": "english"
          },
          {
            "module": "spacy.language",
            "name": "Language"
          },
          {
            "module": "spacy.matcher",
            "name": "Matcher"
          },
          {
            "module": "spacy.matcher",
            "name": "PhraseMatcher"
          },
          {
            "module": "spacy.tokens",
            "name": "Doc"
          },
          {
            "module": "spacy.tokens",
            "name": "Span"
          },
          {
            "module": "spacy.tokens",
            "name": "Token"
          }
        ],
        "relative_from": []
      }
    },
    "ml.analysis.linguistic_analyzer": {
      "path": "src/prompt_improver/ml/analysis/linguistic_analyzer.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "re",
          "nltk",
          "textstat",
          "numpy",
          "psutil"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "concurrent.futures",
            "name": "ThreadPoolExecutor"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "functools",
            "name": "lru_cache"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "transformers",
            "name": "auto_model_for_token_classification"
          },
          {
            "module": "transformers",
            "name": "auto_tokenizer"
          },
          {
            "module": "transformers",
            "name": "pipeline"
          },
          {
            "module": "transformers",
            "name": "set_seed"
          }
        ],
        "relative_from": [
          {
            "module": "models.model_manager",
            "name": "model_config",
            "level": 2
          },
          {
            "module": "models.model_manager",
            "name": "ModelManager",
            "level": 2
          },
          {
            "module": "models.model_manager",
            "name": "get_lightweight_ner_pipeline",
            "level": 2
          },
          {
            "module": "models.model_manager",
            "name": "get_memory_optimized_config",
            "level": 2
          },
          {
            "module": "models.model_manager",
            "name": "get_ultra_lightweight_ner_pipeline",
            "level": 2
          },
          {
            "module": "utils.nltk_manager",
            "name": "get_nltk_manager",
            "level": 2
          },
          {
            "module": "utils.nltk_manager",
            "name": "setup_nltk_for_production",
            "level": 2
          },
          {
            "module": "dependency_parser",
            "name": "DependencyParser",
            "level": 1
          },
          {
            "module": "ner_extractor",
            "name": "NERExtractor",
            "level": 1
          }
        ]
      }
    },
    "ml.analysis.dependency_parser": {
      "path": "src/prompt_improver/ml/analysis/dependency_parser.py",
      "imports": {
        "absolute": [
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "collections",
            "name": "defaultdict"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "nltk",
            "name": "pos_tag"
          },
          {
            "module": "nltk",
            "name": "sent_tokenize"
          },
          {
            "module": "nltk",
            "name": "word_tokenize"
          },
          {
            "module": "nltk.chunk",
            "name": "RegexpParser"
          },
          {
            "module": "nltk.tree",
            "name": "Tree"
          }
        ],
        "relative_from": []
      }
    },
    "ml.learning.__init__": {
      "path": "src/prompt_improver/ml/learning/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "algorithms",
            "name": "ContextLearner",
            "level": 1
          },
          {
            "module": "algorithms",
            "name": "FailureAnalyzer",
            "level": 1
          },
          {
            "module": "algorithms",
            "name": "InsightGenerationEngine",
            "level": 1
          },
          {
            "module": "algorithms",
            "name": "RuleAnalyzer",
            "level": 1
          },
          {
            "module": "algorithms",
            "name": "ContextLearner",
            "level": 1
          },
          {
            "module": "algorithms",
            "name": "ContextConfig",
            "level": 1
          },
          {
            "module": "features",
            "name": "CompositeFeatureExtractor",
            "level": 1
          },
          {
            "module": "features",
            "name": "LinguisticFeatureExtractor",
            "level": 1
          },
          {
            "module": "features",
            "name": "DomainFeatureExtractor",
            "level": 1
          },
          {
            "module": "features",
            "name": "ContextFeatureExtractor",
            "level": 1
          },
          {
            "module": "features",
            "name": "FeatureExtractionConfig",
            "level": 1
          },
          {
            "module": "optimization.algorithms.clustering_optimizer",
            "name": "ClusteringOptimizer",
            "level": 2
          },
          {
            "module": "clustering",
            "name": "ClusteringConfig",
            "level": 1
          },
          {
            "module": "algorithms.context_aware_weighter",
            "name": "ContextAwareFeatureWeighter",
            "level": 1
          },
          {
            "module": "quality.enhanced_scorer",
            "name": "EnhancedQualityScorer",
            "level": 1
          }
        ]
      }
    },
    "ml.learning.patterns.apriori_analyzer": {
      "path": "src/prompt_improver/ml/learning/patterns/apriori_analyzer.py",
      "imports": {
        "absolute": [
          "logging",
          "numpy",
          "pandas"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "mlxtend.frequent_patterns",
            "name": "apriori"
          },
          {
            "module": "mlxtend.frequent_patterns",
            "name": "association_rules"
          },
          {
            "module": "mlxtend.preprocessing",
            "name": "TransactionEncoder"
          }
        ],
        "relative_from": [
          {
            "module": "database.connection",
            "name": "DatabaseManager",
            "level": 4
          },
          {
            "module": "utils.error_handlers",
            "name": "handle_common_errors",
            "level": 4
          },
          {
            "module": "utils.redis_cache",
            "name": "cached",
            "level": 4
          }
        ]
      }
    },
    "ml.learning.patterns.advanced_pattern_discovery": {
      "path": "src/prompt_improver/ml/learning/patterns/advanced_pattern_discovery.py",
      "imports": {
        "absolute": [
          "logging",
          "threading",
          "time",
          "numpy",
          "pandas",
          "hdbscan",
          "joblib",
          "time",
          "os"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "collections",
            "name": "Counter"
          },
          {
            "module": "collections",
            "name": "defaultdict"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "itertools",
            "name": "combinations"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "sklearn.cluster",
            "name": "DBSCAN"
          },
          {
            "module": "sklearn.metrics",
            "name": "calinski_harabasz_score"
          },
          {
            "module": "sklearn.metrics",
            "name": "silhouette_score"
          },
          {
            "module": "sklearn.preprocessing",
            "name": "StandardScaler"
          },
          {
            "module": "sqlalchemy",
            "name": "select"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          },
          {
            "module": "concurrent.futures",
            "name": "ThreadPoolExecutor"
          },
          {
            "module": "mlxtend.frequent_patterns",
            "name": "association_rules"
          },
          {
            "module": "mlxtend.frequent_patterns",
            "name": "fpgrowth"
          },
          {
            "module": "mlxtend.preprocessing",
            "name": "TransactionEncoder"
          },
          {
            "module": "sklearn.datasets",
            "name": "make_blobs"
          },
          {
            "module": "scipy.stats",
            "name": "ttest_ind"
          },
          {
            "module": "scipy.stats",
            "name": "linregress"
          }
        ],
        "relative_from": [
          {
            "module": "database.connection",
            "name": "DatabaseManager",
            "level": 4
          },
          {
            "module": "database.models",
            "name": "RuleMetadata",
            "level": 4
          },
          {
            "module": "database.models",
            "name": "RulePerformance",
            "level": 4
          },
          {
            "module": "apriori_analyzer",
            "name": "AprioriAnalyzer",
            "level": 1
          },
          {
            "module": "apriori_analyzer",
            "name": "AprioriConfig",
            "level": 1
          },
          {
            "module": "utils.redis_cache",
            "name": "cached",
            "level": 4
          },
          {
            "module": "core.training_data_loader",
            "name": "TrainingDataLoader",
            "level": 3
          }
        ]
      }
    },
    "ml.learning.quality.__init__": {
      "path": "src/prompt_improver/ml/learning/quality/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "enhanced_scorer",
            "name": "EnhancedQualityScorer",
            "level": 1
          },
          {
            "module": "enhanced_scorer",
            "name": "EnhancedQualityMetrics",
            "level": 1
          }
        ]
      }
    },
    "ml.learning.quality.enhanced_scorer": {
      "path": "src/prompt_improver/ml/learning/quality/enhanced_scorer.py",
      "imports": {
        "absolute": [
          "logging",
          "warnings",
          "numpy"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "scipy",
            "name": "stats"
          },
          {
            "module": "scipy.spatial.distance",
            "name": "jensenshannon"
          },
          {
            "module": "sklearn.cluster",
            "name": "KMeans"
          },
          {
            "module": "sklearn.decomposition",
            "name": "PCA"
          },
          {
            "module": "sklearn.metrics",
            "name": "silhouette_score"
          },
          {
            "module": "sklearn.preprocessing",
            "name": "StandardScaler"
          },
          {
            "module": "scipy.spatial.distance",
            "name": "pdist"
          }
        ],
        "relative_from": []
      }
    },
    "ml.learning.features.composite_feature_extractor": {
      "path": "src/prompt_improver/ml/learning/features/composite_feature_extractor.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time",
          "numpy",
          "hashlib",
          "json",
          "os"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "contextlib",
            "name": "asynccontextmanager"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "enum",
            "name": "Enum"
          }
        ],
        "relative_from": [
          {
            "module": "linguistic_feature_extractor",
            "name": "LinguisticFeatureExtractor",
            "level": 1
          },
          {
            "module": "domain_feature_extractor",
            "name": "DomainFeatureExtractor",
            "level": 1
          },
          {
            "module": "context_feature_extractor",
            "name": "ContextFeatureExtractor",
            "level": 1
          },
          {
            "module": "linguistic_feature_extractor",
            "name": "FeatureExtractionConfig",
            "level": 1
          },
          {
            "module": "domain_feature_extractor",
            "name": "DomainFeatureConfig",
            "level": 1
          },
          {
            "module": "context_feature_extractor",
            "name": "ContextFeatureConfig",
            "level": 1
          }
        ]
      }
    },
    "ml.learning.features.context_feature_extractor": {
      "path": "src/prompt_improver/ml/learning/features/context_feature_extractor.py",
      "imports": {
        "absolute": [
          "asyncio",
          "hashlib",
          "logging",
          "time",
          "numpy",
          "concurrent.futures",
          "json",
          "os"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "contextlib",
            "name": "asynccontextmanager"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "pydantic",
            "name": "BaseModel"
          },
          {
            "module": "pydantic",
            "name": "Field"
          },
          {
            "module": "pydantic",
            "name": "field_validator"
          }
        ],
        "relative_from": [
          {
            "module": "security",
            "name": "InputValidator",
            "level": 4
          },
          {
            "module": "security",
            "name": "ValidationError",
            "level": 4
          },
          {
            "module": "security.input_sanitization",
            "name": "InputSanitizer",
            "level": 4
          },
          {
            "module": "utils.datetime_utils",
            "name": "aware_utc_now",
            "level": 4
          }
        ]
      }
    },
    "ml.learning.features.__init__": {
      "path": "src/prompt_improver/ml/learning/features/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "linguistic_feature_extractor",
            "name": "LinguisticFeatureExtractor",
            "level": 1
          },
          {
            "module": "domain_feature_extractor",
            "name": "DomainFeatureExtractor",
            "level": 1
          },
          {
            "module": "context_feature_extractor",
            "name": "ContextFeatureExtractor",
            "level": 1
          },
          {
            "module": "composite_feature_extractor",
            "name": "CompositeFeatureExtractor",
            "level": 1
          },
          {
            "module": "composite_feature_extractor",
            "name": "FeatureExtractionConfig",
            "level": 1
          },
          {
            "module": "composite_feature_extractor",
            "name": "FeatureExtractorFactory",
            "level": 1
          }
        ]
      }
    },
    "ml.learning.features.english_nltk_manager": {
      "path": "src/prompt_improver/ml/learning/features/english_nltk_manager.py",
      "imports": {
        "absolute": [
          "logging",
          "os",
          "nltk",
          "re",
          "re"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "nltk.tokenize",
            "name": "sent_tokenize"
          },
          {
            "module": "nltk.tokenize",
            "name": "word_tokenize"
          },
          {
            "module": "nltk.corpus",
            "name": "stopwords"
          },
          {
            "module": "nltk.stem",
            "name": "WordNetLemmatizer"
          },
          {
            "module": "nltk.corpus",
            "name": "stopwords"
          },
          {
            "module": "nltk.corpus",
            "name": "stopwords"
          }
        ],
        "relative_from": []
      }
    },
    "ml.learning.features.linguistic_feature_extractor": {
      "path": "src/prompt_improver/ml/learning/features/linguistic_feature_extractor.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time",
          "uuid",
          "numpy",
          "aiofiles",
          "hashlib",
          "re",
          "concurrent.futures"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "contextlib",
            "name": "asynccontextmanager"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "decimal",
            "name": "Decimal"
          },
          {
            "module": "pydantic",
            "name": "BaseModel"
          },
          {
            "module": "pydantic",
            "name": "Field"
          },
          {
            "module": "pydantic",
            "name": "field_validator"
          }
        ],
        "relative_from": [
          {
            "module": "security.input_sanitization",
            "name": "InputSanitizer",
            "level": 4
          },
          {
            "module": "utils.redis_cache",
            "name": "RedisCache",
            "level": 4
          },
          {
            "module": "english_nltk_manager",
            "name": "get_english_nltk_manager",
            "level": 1
          },
          {
            "module": "analysis.linguistic_analyzer",
            "name": "LinguisticAnalyzer",
            "level": 3
          },
          {
            "module": "analysis.linguistic_analyzer",
            "name": "LinguisticConfig",
            "level": 3
          }
        ]
      }
    },
    "ml.learning.features.domain_feature_extractor": {
      "path": "src/prompt_improver/ml/learning/features/domain_feature_extractor.py",
      "imports": {
        "absolute": [
          "asyncio",
          "hashlib",
          "logging",
          "random",
          "time",
          "numpy",
          "concurrent.futures",
          "json",
          "os"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "contextlib",
            "name": "asynccontextmanager"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "pydantic",
            "name": "BaseModel"
          },
          {
            "module": "pydantic",
            "name": "Field"
          },
          {
            "module": "pydantic",
            "name": "field_validator"
          }
        ],
        "relative_from": [
          {
            "module": "security",
            "name": "InputValidator",
            "level": 4
          },
          {
            "module": "security",
            "name": "ValidationError",
            "level": 4
          },
          {
            "module": "security.input_sanitization",
            "name": "InputSanitizer",
            "level": 4
          },
          {
            "module": "utils.datetime_utils",
            "name": "aware_utc_now",
            "level": 4
          },
          {
            "module": "analysis.domain_detector",
            "name": "PromptDomain",
            "level": 3
          },
          {
            "module": "analysis.domain_analyzer",
            "name": "DomainAnalyzer",
            "level": 3
          }
        ]
      }
    },
    "ml.learning.algorithms.insight_engine": {
      "path": "src/prompt_improver/ml/learning/algorithms/insight_engine.py",
      "imports": {
        "absolute": [
          "logging",
          "warnings",
          "numpy",
          "networkx",
          "pandas",
          "pandas"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "collections",
            "name": "defaultdict"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "scipy",
            "name": "stats"
          },
          {
            "module": "causallearn.search.ConstraintBased.PC",
            "name": "pc"
          },
          {
            "module": "causallearn.utils.cit",
            "name": "fisherz"
          },
          {
            "module": "statsmodels.stats.diagnostic",
            "name": "acorr_ljungbox"
          },
          {
            "module": "statsmodels.tsa.stattools",
            "name": "grangercausalitytests"
          },
          {
            "module": "scipy.stats",
            "name": "linregress"
          },
          {
            "module": "scipy.stats",
            "name": "linregress"
          }
        ],
        "relative_from": []
      }
    },
    "ml.learning.algorithms.context_learner": {
      "path": "src/prompt_improver/ml/learning/algorithms/context_learner.py",
      "imports": {
        "absolute": [
          "logging",
          "numpy",
          "time"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "collections",
            "name": "Counter"
          }
        ],
        "relative_from": [
          {
            "module": "security",
            "name": "InputValidator",
            "level": 4
          },
          {
            "module": "security",
            "name": "ValidationError",
            "level": 4
          },
          {
            "module": "security",
            "name": "MemoryGuard",
            "level": 4
          },
          {
            "module": "security",
            "name": "get_memory_guard",
            "level": 4
          },
          {
            "module": "utils.datetime_utils",
            "name": "aware_utc_now",
            "level": 4
          },
          {
            "module": "features",
            "name": "CompositeFeatureExtractor",
            "level": 2
          },
          {
            "module": "features",
            "name": "FeatureExtractionConfig",
            "level": 2
          },
          {
            "module": "features",
            "name": "FeatureExtractorFactory",
            "level": 2
          },
          {
            "module": "clustering",
            "name": "ClusteringConfig",
            "level": 2
          },
          {
            "module": "optimization.algorithms.clustering_optimizer",
            "name": "ClusteringOptimizer",
            "level": 3
          },
          {
            "module": "optimization.algorithms.clustering_optimizer",
            "name": "ClusteringResult",
            "level": 3
          },
          {
            "module": "optimization.algorithms.clustering_optimizer",
            "name": "ClusteringConfig",
            "level": 3
          }
        ]
      }
    },
    "ml.learning.algorithms.rule_analyzer": {
      "path": "src/prompt_improver/ml/learning/algorithms/rule_analyzer.py",
      "imports": {
        "absolute": [
          "logging",
          "warnings",
          "numpy",
          "pandas",
          "arviz",
          "pymc",
          "arviz",
          "pymc3",
          "pandas"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "collections",
            "name": "Counter"
          },
          {
            "module": "collections",
            "name": "defaultdict"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "scipy",
            "name": "stats"
          },
          {
            "module": "sklearn.metrics",
            "name": "mean_absolute_error"
          },
          {
            "module": "sklearn.metrics",
            "name": "mean_squared_error"
          },
          {
            "module": "sklearn.model_selection",
            "name": "TimeSeriesSplit"
          },
          {
            "module": "statsmodels.tsa.seasonal",
            "name": "seasonal_decompose"
          }
        ],
        "relative_from": []
      }
    },
    "ml.learning.algorithms.context_aware_weighter": {
      "path": "src/prompt_improver/ml/learning/algorithms/context_aware_weighter.py",
      "imports": {
        "absolute": [
          "logging",
          "numpy"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "functools",
            "name": "lru_cache"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          }
        ],
        "relative_from": [
          {
            "module": "analysis.domain_detector",
            "name": "DomainClassificationResult",
            "level": 3
          },
          {
            "module": "analysis.domain_detector",
            "name": "PromptDomain",
            "level": 3
          },
          {
            "module": "analysis.domain_feature_extractor",
            "name": "DomainFeatures",
            "level": 3
          }
        ]
      }
    },
    "ml.learning.algorithms.__init__": {
      "path": "src/prompt_improver/ml/learning/algorithms/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "context_learner",
            "name": "ContextLearner",
            "level": 1
          },
          {
            "module": "context_learner",
            "name": "ContextConfig",
            "level": 1
          },
          {
            "module": "failure_analyzer",
            "name": "FailureModeAnalyzer",
            "level": 1
          },
          {
            "module": "insight_engine",
            "name": "InsightGenerationEngine",
            "level": 1
          },
          {
            "module": "rule_analyzer",
            "name": "RuleEffectivenessAnalyzer",
            "level": 1
          }
        ]
      }
    },
    "ml.learning.algorithms.context_performance_monitor": {
      "path": "src/prompt_improver/ml/learning/algorithms/context_performance_monitor.py",
      "imports": {
        "absolute": [
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          }
        ],
        "relative_from": [
          {
            "module": "security",
            "name": "MemoryGuard",
            "level": 4
          }
        ]
      }
    },
    "ml.learning.algorithms.context_cache_manager": {
      "path": "src/prompt_improver/ml/learning/algorithms/context_cache_manager.py",
      "imports": {
        "absolute": [
          "time"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "cachetools",
            "name": "TTLCache"
          },
          {
            "module": "opentelemetry",
            "name": "trace"
          }
        ],
        "relative_from": []
      }
    },
    "ml.learning.algorithms.failure_analyzer": {
      "path": "src/prompt_improver/ml/learning/algorithms/failure_analyzer.py",
      "imports": {
        "absolute": [
          "logging",
          "re",
          "warnings",
          "numpy",
          "prometheus_client",
          "art"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "collections",
            "name": "Counter"
          },
          {
            "module": "collections",
            "name": "defaultdict"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "scipy",
            "name": "stats"
          },
          {
            "module": "sklearn.cluster",
            "name": "DBSCAN"
          },
          {
            "module": "sklearn.feature_extraction.text",
            "name": "TfidfVectorizer"
          },
          {
            "module": "sklearn.metrics.pairwise",
            "name": "cosine_similarity"
          },
          {
            "module": "sklearn.covariance",
            "name": "EllipticEnvelope"
          },
          {
            "module": "sklearn.ensemble",
            "name": "IsolationForest"
          },
          {
            "module": "sklearn.svm",
            "name": "OneClassSVM"
          },
          {
            "module": "prometheus_client",
            "name": "Counter"
          },
          {
            "module": "prometheus_client",
            "name": "Gauge"
          },
          {
            "module": "prometheus_client",
            "name": "Histogram"
          },
          {
            "module": "prometheus_client",
            "name": "start_http_server"
          },
          {
            "module": "art.attacks.evasion",
            "name": "FastGradientMethod"
          },
          {
            "module": "art.estimators.classification",
            "name": "SklearnClassifier"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          }
        ],
        "relative_from": [
          {
            "module": "core.training_data_loader",
            "name": "TrainingDataLoader",
            "level": 3
          }
        ]
      }
    },
    "ml.learning.clustering.__init__": {
      "path": "src/prompt_improver/ml/learning/clustering/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "optimization.algorithms.clustering_optimizer",
            "name": "ClusteringOptimizer",
            "level": 3
          },
          {
            "module": "optimization.algorithms.clustering_optimizer",
            "name": "ClusteringConfig",
            "level": 3
          },
          {
            "module": "optimization.algorithms.clustering_optimizer",
            "name": "ClusteringResult",
            "level": 3
          }
        ]
      }
    },
    "ml.optimization.__init__": {
      "path": "src/prompt_improver/ml/optimization/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "algorithms.rule_optimizer",
            "name": "RuleOptimizer",
            "level": 1
          },
          {
            "module": "algorithms.multi_armed_bandit",
            "name": "MultiarmedBanditFramework",
            "level": 1
          },
          {
            "module": "algorithms.clustering_optimizer",
            "name": "ClusteringOptimizer",
            "level": 1
          },
          {
            "module": "algorithms.dimensionality_reducer",
            "name": "AdvancedDimensionalityReducer",
            "level": 1
          },
          {
            "module": "validation.optimization_validator",
            "name": "OptimizationValidator",
            "level": 1
          },
          {
            "module": "batch.batch_processor",
            "name": "BatchProcessor",
            "level": 1
          },
          {
            "module": "batch.batch_processor",
            "name": "BatchProcessorConfig",
            "level": 1
          }
        ]
      }
    },
    "ml.optimization.algorithms.dimensionality_reducer": {
      "path": "src/prompt_improver/ml/optimization/algorithms/dimensionality_reducer.py",
      "imports": {
        "absolute": [
          "logging",
          "time",
          "warnings",
          "numpy",
          "umap",
          "torch",
          "torch.nn",
          "torch.optim",
          "tensorflow",
          "hashlib"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "numpy.typing",
            "name": "NDArray"
          },
          {
            "module": "sklearn.decomposition",
            "name": "PCA"
          },
          {
            "module": "sklearn.decomposition",
            "name": "FastICA"
          },
          {
            "module": "sklearn.decomposition",
            "name": "KernelPCA"
          },
          {
            "module": "sklearn.decomposition",
            "name": "TruncatedSVD"
          },
          {
            "module": "sklearn.decomposition",
            "name": "IncrementalPCA"
          },
          {
            "module": "sklearn.discriminant_analysis",
            "name": "LinearDiscriminantAnalysis"
          },
          {
            "module": "sklearn.feature_selection",
            "name": "VarianceThreshold"
          },
          {
            "module": "sklearn.manifold",
            "name": "TSNE"
          },
          {
            "module": "sklearn.manifold",
            "name": "Isomap"
          },
          {
            "module": "sklearn.pipeline",
            "name": "Pipeline"
          },
          {
            "module": "sklearn.preprocessing",
            "name": "RobustScaler"
          },
          {
            "module": "sklearn.random_projection",
            "name": "GaussianRandomProjection"
          },
          {
            "module": "sklearn.random_projection",
            "name": "SparseRandomProjection"
          },
          {
            "module": "sklearn.decomposition",
            "name": "factor_analysis"
          },
          {
            "module": "torch.utils.data",
            "name": "DataLoader"
          },
          {
            "module": "torch.utils.data",
            "name": "TensorDataset"
          },
          {
            "module": "tensorflow",
            "name": "keras"
          },
          {
            "module": "sklearn.preprocessing",
            "name": "StandardScaler"
          },
          {
            "module": "sklearn.preprocessing",
            "name": "StandardScaler"
          },
          {
            "module": "sklearn.decomposition",
            "name": "PCA"
          },
          {
            "module": "sklearn.decomposition",
            "name": "PCA"
          },
          {
            "module": "sklearn.neighbors",
            "name": "NearestNeighbors"
          },
          {
            "module": "sklearn.cluster",
            "name": "KMeans"
          },
          {
            "module": "sklearn.metrics",
            "name": "adjusted_rand_score"
          },
          {
            "module": "sklearn.linear_model",
            "name": "LogisticRegression"
          },
          {
            "module": "sklearn.model_selection",
            "name": "cross_val_score"
          },
          {
            "module": "sklearn.decomposition",
            "name": "PCA"
          }
        ],
        "relative_from": [
          {
            "module": "types",
            "name": "features",
            "level": 3
          },
          {
            "module": "types",
            "name": "labels",
            "level": 3
          },
          {
            "module": "types",
            "name": "reduced_features",
            "level": 3
          },
          {
            "module": "types",
            "name": "float_array",
            "level": 3
          },
          {
            "module": "types",
            "name": "metrics_dict",
            "level": 3
          },
          {
            "module": "core.training_data_loader",
            "name": "TrainingDataLoader",
            "level": 3
          }
        ]
      }
    },
    "ml.optimization.algorithms.rule_optimizer": {
      "path": "src/prompt_improver/ml/optimization/algorithms/rule_optimizer.py",
      "imports": {
        "absolute": [
          "logging",
          "warnings",
          "numpy",
          "random",
          "pandas"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "scipy",
            "name": "stats"
          },
          {
            "module": "deap",
            "name": "algorithms"
          },
          {
            "module": "deap",
            "name": "base"
          },
          {
            "module": "deap",
            "name": "creator"
          },
          {
            "module": "deap",
            "name": "tools"
          },
          {
            "module": "sklearn.gaussian_process",
            "name": "GaussianProcessRegressor"
          },
          {
            "module": "sklearn.gaussian_process.kernels",
            "name": "RBF"
          },
          {
            "module": "sklearn.gaussian_process.kernels",
            "name": "WhiteKernel"
          },
          {
            "module": "sklearn.preprocessing",
            "name": "StandardScaler"
          },
          {
            "module": "sklearn.model_selection",
            "name": "cross_val_score"
          }
        ],
        "relative_from": []
      }
    },
    "ml.optimization.algorithms.__init__": {
      "path": "src/prompt_improver/ml/optimization/algorithms/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "rule_optimizer",
            "name": "RuleOptimizer",
            "level": 1
          },
          {
            "module": "rule_optimizer",
            "name": "OptimizationConfig",
            "level": 1
          },
          {
            "module": "multi_armed_bandit",
            "name": "MultiarmedBanditFramework",
            "level": 1
          },
          {
            "module": "multi_armed_bandit",
            "name": "BanditConfig",
            "level": 1
          },
          {
            "module": "clustering_optimizer",
            "name": "ClusteringOptimizer",
            "level": 1
          },
          {
            "module": "clustering_optimizer",
            "name": "ClusteringConfig",
            "level": 1
          },
          {
            "module": "dimensionality_reducer",
            "name": "AdvancedDimensionalityReducer",
            "level": 1
          },
          {
            "module": "dimensionality_reducer",
            "name": "DimensionalityConfig",
            "level": 1
          },
          {
            "module": "early_stopping",
            "name": "AdvancedEarlyStoppingFramework",
            "level": 1
          },
          {
            "module": "early_stopping",
            "name": "EarlyStoppingConfig",
            "level": 1
          }
        ]
      }
    },
    "ml.optimization.algorithms.clustering_optimizer": {
      "path": "src/prompt_improver/ml/optimization/algorithms/clustering_optimizer.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time",
          "warnings",
          "joblib",
          "numpy",
          "hdbscan",
          "umap",
          "itertools",
          "hashlib",
          "psutil"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "numpy.typing",
            "name": "NDArray"
          },
          {
            "module": "sklearn.decomposition",
            "name": "PCA"
          },
          {
            "module": "sklearn.decomposition",
            "name": "KernelPCA"
          },
          {
            "module": "sklearn.feature_selection",
            "name": "SelectKBest"
          },
          {
            "module": "sklearn.feature_selection",
            "name": "f_classif"
          },
          {
            "module": "sklearn.feature_selection",
            "name": "mutual_info_classif"
          },
          {
            "module": "sklearn.manifold",
            "name": "TSNE"
          },
          {
            "module": "sklearn.metrics",
            "name": "calinski_harabasz_score"
          },
          {
            "module": "sklearn.metrics",
            "name": "davies_bouldin_score"
          },
          {
            "module": "sklearn.metrics",
            "name": "silhouette_score"
          },
          {
            "module": "sklearn.pipeline",
            "name": "Pipeline"
          },
          {
            "module": "sklearn.preprocessing",
            "name": "RobustScaler"
          },
          {
            "module": "sklearn.preprocessing",
            "name": "StandardScaler"
          }
        ],
        "relative_from": [
          {
            "module": "types",
            "name": "features",
            "level": 3
          },
          {
            "module": "types",
            "name": "labels",
            "level": 3
          },
          {
            "module": "types",
            "name": "cluster_labels",
            "level": 3
          },
          {
            "module": "types",
            "name": "cluster_centers",
            "level": 3
          },
          {
            "module": "types",
            "name": "weights",
            "level": 3
          },
          {
            "module": "types",
            "name": "metrics_dict",
            "level": 3
          },
          {
            "module": "types",
            "name": "float_array",
            "level": 3
          },
          {
            "module": "types",
            "name": "int_array",
            "level": 3
          },
          {
            "module": "core.training_data_loader",
            "name": "TrainingDataLoader",
            "level": 3
          }
        ]
      }
    },
    "ml.optimization.algorithms.multi_armed_bandit": {
      "path": "src/prompt_improver/ml/optimization/algorithms/multi_armed_bandit.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "math",
          "uuid",
          "numpy"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "abc",
            "name": "ABC"
          },
          {
            "module": "abc",
            "name": "abstractmethod"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "scipy",
            "name": "stats"
          },
          {
            "module": "sklearn.linear_model",
            "name": "Ridge"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          }
        ],
        "relative_from": []
      }
    },
    "ml.optimization.algorithms.early_stopping": {
      "path": "src/prompt_improver/ml/optimization/algorithms/early_stopping.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "math",
          "numpy"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "scipy",
            "name": "stats"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          }
        ],
        "relative_from": []
      }
    },
    "ml.optimization.batch.dynamic_batch_optimizer": {
      "path": "src/prompt_improver/ml/optimization/batch/dynamic_batch_optimizer.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time",
          "numpy",
          "psutil"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          }
        ],
        "relative_from": []
      }
    },
    "ml.optimization.batch.batch_processor": {
      "path": "src/prompt_improver/ml/optimization/batch/batch_processor.py",
      "imports": {
        "absolute": [
          "asyncio",
          "heapq",
          "logging",
          "random",
          "time",
          "ray",
          "dask",
          "gc"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "asyncio",
            "name": "create_task"
          },
          {
            "module": "asyncio",
            "name": "gather"
          },
          {
            "module": "asyncio",
            "name": "sleep"
          },
          {
            "module": "collections",
            "name": "defaultdict"
          },
          {
            "module": "collections",
            "name": "deque"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "pydantic",
            "name": "BaseModel"
          },
          {
            "module": "pydantic",
            "name": "ConfigDict"
          },
          {
            "module": "pydantic",
            "name": "Field"
          },
          {
            "module": "prompt_improver.database",
            "name": "get_session"
          },
          {
            "module": "prompt_improver.utils.datetime_utils",
            "name": "aware_utc_now"
          },
          {
            "module": "dask.distributed",
            "name": "Client"
          },
          {
            "module": "kafka",
            "name": "KafkaProducer"
          },
          {
            "module": "kafka",
            "name": "KafkaConsumer"
          },
          {
            "module": "opentelemetry",
            "name": "trace"
          },
          {
            "module": "opentelemetry",
            "name": "metrics"
          },
          {
            "module": "opentelemetry.trace",
            "name": "Status"
          },
          {
            "module": "opentelemetry.trace",
            "name": "StatusCode"
          },
          {
            "module": "prompt_improver.ml.core.ml_integration",
            "name": "get_ml_service"
          }
        ],
        "relative_from": [
          {
            "module": "orchestration.core.unified_retry_manager",
            "name": "get_retry_manager",
            "level": 3
          },
          {
            "module": "orchestration.core.unified_retry_manager",
            "name": "RetryConfig",
            "level": 3
          },
          {
            "module": "orchestration.core.unified_retry_manager",
            "name": "RetryStrategy",
            "level": 3
          },
          {
            "module": "orchestration.core.unified_retry_manager",
            "name": "get_retry_manager",
            "level": 3
          },
          {
            "module": "orchestration.core.unified_retry_manager",
            "name": "RetryConfig",
            "level": 3
          },
          {
            "module": "orchestration.core.unified_retry_manager",
            "name": "RetryStrategy",
            "level": 3
          }
        ]
      }
    },
    "ml.optimization.batch.__init__": {
      "path": "src/prompt_improver/ml/optimization/batch/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "batch_processor",
            "name": "BatchProcessor",
            "level": 1
          },
          {
            "module": "batch_processor",
            "name": "BatchProcessorConfig",
            "level": 1
          },
          {
            "module": "batch_processor",
            "name": "periodic_batch_processor_coroutine",
            "level": 1
          },
          {
            "module": "enhanced_batch_processor",
            "name": "StreamingBatchProcessor",
            "level": 1
          },
          {
            "module": "enhanced_batch_processor",
            "name": "StreamingBatchConfig",
            "level": 1
          },
          {
            "module": "enhanced_batch_processor",
            "name": "ChunkingStrategy",
            "level": 1
          },
          {
            "module": "enhanced_batch_processor",
            "name": "ProcessingStatus",
            "level": 1
          },
          {
            "module": "enhanced_batch_processor",
            "name": "ProcessingMetrics",
            "level": 1
          },
          {
            "module": "enhanced_batch_processor",
            "name": "MemoryMonitor",
            "level": 1
          },
          {
            "module": "enhanced_batch_processor",
            "name": "ChunkProcessor",
            "level": 1
          }
        ]
      }
    },
    "ml.optimization.batch.enhanced_batch_processor": {
      "path": "src/prompt_improver/ml/optimization/batch/enhanced_batch_processor.py",
      "imports": {
        "absolute": [
          "asyncio",
          "gc",
          "json",
          "logging",
          "os",
          "psutil",
          "time",
          "tempfile",
          "pickle",
          "zlib",
          "numpy"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "asyncio",
            "name": "Queue"
          },
          {
            "module": "asyncio",
            "name": "Semaphore"
          },
          {
            "module": "collections",
            "name": "defaultdict"
          },
          {
            "module": "concurrent.futures",
            "name": "ProcessPoolExecutor"
          },
          {
            "module": "concurrent.futures",
            "name": "ThreadPoolExecutor"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "AsyncIterator"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Iterator"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "pydantic",
            "name": "BaseModel"
          },
          {
            "module": "pydantic",
            "name": "Field"
          },
          {
            "module": "prompt_improver.utils.datetime_utils",
            "name": "aware_utc_now"
          }
        ],
        "relative_from": []
      }
    },
    "ml.optimization.validation.__init__": {
      "path": "src/prompt_improver/ml/optimization/validation/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "optimization_validator",
            "name": "OptimizationValidator",
            "level": 1
          },
          {
            "module": "optimization_validator",
            "name": "ValidationConfig",
            "level": 1
          }
        ]
      }
    },
    "ml.optimization.validation.optimization_validator": {
      "path": "src/prompt_improver/ml/optimization/validation/optimization_validator.py",
      "imports": {
        "absolute": [
          "logging",
          "warnings",
          "numpy",
          "pymc",
          "arviz"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "scipy",
            "name": "stats"
          },
          {
            "module": "scipy.stats",
            "name": "bootstrap"
          },
          {
            "module": "sklearn.model_selection",
            "name": "KFold"
          },
          {
            "module": "sklearn.model_selection",
            "name": "PermutationTestScore"
          },
          {
            "module": "sklearn.ensemble",
            "name": "RandomForestRegressor"
          },
          {
            "module": "sklearn.linear_model",
            "name": "BayesianRidge"
          },
          {
            "module": "sklearn.metrics",
            "name": "mean_squared_error"
          },
          {
            "module": "sklearn.metrics",
            "name": "r2_score"
          }
        ],
        "relative_from": []
      }
    },
    "ml.health.integration_manager": {
      "path": "src/prompt_improver/ml/health/integration_manager.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Optional"
          }
        ],
        "relative_from": [
          {
            "module": "utils.datetime_utils",
            "name": "aware_utc_now",
            "level": 3
          },
          {
            "module": "ml_health_monitor",
            "name": "get_ml_health_monitor",
            "level": 1
          },
          {
            "module": "drift_detector",
            "name": "get_drift_detector",
            "level": 1
          },
          {
            "module": "model_performance_tracker",
            "name": "get_performance_tracker",
            "level": 1
          }
        ]
      }
    },
    "ml.health.drift_detector": {
      "path": "src/prompt_improver/ml/health/drift_detector.py",
      "imports": {
        "absolute": [
          "logging",
          "time",
          "numpy"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "collections",
            "name": "defaultdict"
          },
          {
            "module": "collections",
            "name": "deque"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "scipy",
            "name": "stats"
          }
        ],
        "relative_from": [
          {
            "module": "utils.datetime_utils",
            "name": "aware_utc_now",
            "level": 3
          }
        ]
      }
    },
    "ml.health.__init__": {
      "path": "src/prompt_improver/ml/health/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "ml_health_monitor",
            "name": "MLHealthMonitor",
            "level": 1
          },
          {
            "module": "model_performance_tracker",
            "name": "ModelPerformanceTracker",
            "level": 1
          },
          {
            "module": "resource_monitor",
            "name": "ResourceMonitor",
            "level": 1
          },
          {
            "module": "drift_detector",
            "name": "ModelDriftDetector",
            "level": 1
          },
          {
            "module": "integration_manager",
            "name": "MLHealthIntegrationManager",
            "level": 1
          }
        ]
      }
    },
    "ml.health.example_usage": {
      "path": "src/prompt_improver/ml/health/example_usage.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "sklearn.ensemble",
            "name": "RandomForestClassifier"
          },
          {
            "module": "sklearn.datasets",
            "name": "make_classification"
          }
        ],
        "relative_from": [
          {
            "module": "integration_manager",
            "name": "get_ml_health_integration_manager",
            "level": 1
          },
          {
            "module": "health.ml_health_monitor",
            "name": "get_ml_health_monitor",
            "level": 2
          },
          {
            "module": "health.resource_monitor",
            "name": "get_resource_monitor",
            "level": 2
          }
        ]
      }
    },
    "ml.health.resource_monitor": {
      "path": "src/prompt_improver/ml/health/resource_monitor.py",
      "imports": {
        "absolute": [
          "logging",
          "time",
          "psutil",
          "pynvml"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          }
        ],
        "relative_from": [
          {
            "module": "utils.datetime_utils",
            "name": "aware_utc_now",
            "level": 3
          }
        ]
      }
    },
    "ml.health.model_performance_tracker": {
      "path": "src/prompt_improver/ml/health/model_performance_tracker.py",
      "imports": {
        "absolute": [
          "logging",
          "time",
          "numpy"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "collections",
            "name": "defaultdict"
          },
          {
            "module": "collections",
            "name": "deque"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          }
        ],
        "relative_from": [
          {
            "module": "utils.datetime_utils",
            "name": "aware_utc_now",
            "level": 3
          }
        ]
      }
    },
    "ml.health.ml_health_monitor": {
      "path": "src/prompt_improver/ml/health/ml_health_monitor.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time",
          "numpy",
          "psutil",
          "pynvml",
          "pickle"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "collections",
            "name": "defaultdict"
          },
          {
            "module": "collections",
            "name": "deque"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "threading",
            "name": "Lock"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          }
        ],
        "relative_from": [
          {
            "module": "utils.datetime_utils",
            "name": "aware_utc_now",
            "level": 3
          }
        ]
      }
    },
    "ml.tests.test_type_safety": {
      "path": "src/prompt_improver/ml/tests/test_type_safety.py",
      "imports": {
        "absolute": [
          "pytest",
          "numpy"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "TYPE_CHECKING"
          }
        ],
        "relative_from": [
          {
            "module": "types",
            "name": "features",
            "level": 2
          },
          {
            "module": "types",
            "name": "labels",
            "level": 2
          },
          {
            "module": "types",
            "name": "cluster_labels",
            "level": 2
          },
          {
            "module": "types",
            "name": "ensure_features",
            "level": 2
          },
          {
            "module": "types",
            "name": "ensure_labels",
            "level": 2
          },
          {
            "module": "types",
            "name": "is_valid_features",
            "level": 2
          },
          {
            "module": "types",
            "name": "is_valid_labels",
            "level": 2
          },
          {
            "module": "types",
            "name": "TrainingBatch",
            "level": 2
          },
          {
            "module": "types",
            "name": "OptimizationResult",
            "level": 2
          },
          {
            "module": "types",
            "name": "ClusteringResult",
            "level": 2
          },
          {
            "module": "models.model_manager",
            "name": "ModelManager",
            "level": 2
          },
          {
            "module": "models.model_manager",
            "name": "model_config",
            "level": 2
          },
          {
            "module": "optimization.algorithms.clustering_optimizer",
            "name": "ClusteringOptimizer",
            "level": 2
          },
          {
            "module": "optimization.algorithms.clustering_optimizer",
            "name": "ClusteringConfig",
            "level": 2
          }
        ]
      }
    },
    "ml.tests.test_ml_integration": {
      "path": "src/prompt_improver/ml/tests/test_ml_integration.py",
      "imports": {
        "absolute": [
          "asyncio",
          "pytest",
          "numpy",
          "time",
          "subprocess",
          "time",
          "sys",
          "psutil",
          "gc"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          }
        ],
        "relative_from": [
          {
            "module": "types",
            "name": "features",
            "level": 2
          },
          {
            "module": "types",
            "name": "labels",
            "level": 2
          },
          {
            "module": "models.model_manager",
            "name": "ModelManager",
            "level": 2
          },
          {
            "module": "models.model_manager",
            "name": "model_config",
            "level": 2
          },
          {
            "module": "models.model_manager",
            "name": "get_memory_optimized_config",
            "level": 2
          },
          {
            "module": "optimization.algorithms.clustering_optimizer",
            "name": "ClusteringOptimizer",
            "level": 2
          },
          {
            "module": "optimization.algorithms.clustering_optimizer",
            "name": "ClusteringConfig",
            "level": 2
          },
          {
            "module": "optimization.algorithms.dimensionality_reducer",
            "name": "DimensionalityReducer",
            "level": 2
          },
          {
            "module": "optimization.algorithms.dimensionality_reducer",
            "name": "DimensionalityConfig",
            "level": 2
          },
          {
            "module": "learning.features.linguistic_feature_extractor",
            "name": "LinguisticFeatureExtractor",
            "level": 2
          },
          {
            "module": "core.training_data_loader",
            "name": "TrainingDataLoader",
            "level": 2
          },
          {
            "module": "types",
            "name": "TrainingBatch",
            "level": 2
          },
          {
            "module": "types",
            "name": "OptimizationResult",
            "level": 2
          },
          {
            "module": "types",
            "name": "ClusteringResult",
            "level": 2
          },
          {
            "module": "types",
            "name": "features",
            "level": 2
          },
          {
            "module": "types",
            "name": "labels",
            "level": 2
          },
          {
            "module": "types",
            "name": "cluster_labels",
            "level": 2
          },
          {
            "module": "optimization.algorithms.dimensionality_reducer",
            "name": "DimensionalityReducer",
            "level": 2
          },
          {
            "module": "optimization.algorithms.dimensionality_reducer",
            "name": "DimensionalityConfig",
            "level": 2
          }
        ]
      }
    },
    "ml.lifecycle.enhanced_experiment_orchestrator": {
      "path": "src/prompt_improver/ml/lifecycle/enhanced_experiment_orchestrator.py",
      "imports": {
        "absolute": [
          "asyncio",
          "json",
          "logging",
          "time",
          "uuid",
          "numpy",
          "ray",
          "optuna",
          "time",
          "random"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "concurrent.futures",
            "name": "ThreadPoolExecutor"
          },
          {
            "module": "concurrent.futures",
            "name": "ProcessPoolExecutor"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "queue",
            "name": "PriorityQueue"
          },
          {
            "module": "pydantic",
            "name": "BaseModel"
          },
          {
            "module": "pydantic",
            "name": "Field"
          },
          {
            "module": "pydantic",
            "name": "ConfigDict"
          },
          {
            "module": "scipy.stats",
            "name": "norm"
          },
          {
            "module": "sklearn.gaussian_process",
            "name": "GaussianProcessRegressor"
          },
          {
            "module": "sklearn.gaussian_process.kernels",
            "name": "Matern"
          },
          {
            "module": "prompt_improver.ml.types",
            "name": "features"
          },
          {
            "module": "prompt_improver.ml.types",
            "name": "labels"
          },
          {
            "module": "prompt_improver.ml.types",
            "name": "hyper_parameters"
          },
          {
            "module": "prompt_improver.ml.types",
            "name": "metrics_dict"
          },
          {
            "module": "prompt_improver.utils.datetime_utils",
            "name": "aware_utc_now"
          },
          {
            "module": "ray",
            "name": "tune"
          },
          {
            "module": "ray.tune.schedulers",
            "name": "ASHAScheduler"
          },
          {
            "module": "ray.tune.schedulers",
            "name": "PopulationBasedTraining"
          },
          {
            "module": "optuna.samplers",
            "name": "TPESampler"
          },
          {
            "module": "optuna.samplers",
            "name": "CmaEsSampler"
          },
          {
            "module": "optuna.pruners",
            "name": "MedianPruner"
          },
          {
            "module": "optuna.pruners",
            "name": "HyperbandPruner"
          }
        ],
        "relative_from": [
          {
            "module": "enhanced_model_registry",
            "name": "EnhancedModelRegistry",
            "level": 1
          },
          {
            "module": "enhanced_model_registry",
            "name": "ModelMetadata",
            "level": 1
          },
          {
            "module": "enhanced_model_registry",
            "name": "ModelStatus",
            "level": 1
          },
          {
            "module": "experiment_tracker",
            "name": "ExperimentTracker",
            "level": 1
          },
          {
            "module": "experiment_tracker",
            "name": "ExperimentConfig",
            "level": 1
          },
          {
            "module": "experiment_tracker",
            "name": "Trial",
            "level": 1
          },
          {
            "module": "experiment_tracker",
            "name": "ExperimentResults",
            "level": 1
          }
        ]
      }
    },
    "ml.lifecycle.model_deployment": {
      "path": "src/prompt_improver/ml/lifecycle/model_deployment.py",
      "imports": {
        "absolute": [
          "asyncio",
          "json",
          "logging",
          "os",
          "tempfile",
          "time",
          "yaml",
          "docker",
          "requests",
          "mlflow.sklearn",
          "mlflow.pytorch",
          "mlflow.tensorflow",
          "mlflow.pyfunc"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "concurrent.futures",
            "name": "ThreadPoolExecutor"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "kubernetes",
            "name": "client"
          },
          {
            "module": "kubernetes",
            "name": "config"
          },
          {
            "module": "pydantic",
            "name": "BaseModel"
          },
          {
            "module": "pydantic",
            "name": "Field"
          },
          {
            "module": "prompt_improver.utils.datetime_utils",
            "name": "aware_utc_now"
          }
        ],
        "relative_from": [
          {
            "module": "model_registry",
            "name": "DeploymentConfig",
            "level": 1
          },
          {
            "module": "model_registry",
            "name": "DeploymentTarget",
            "level": 1
          },
          {
            "module": "model_registry",
            "name": "ModelFormat",
            "level": 1
          },
          {
            "module": "model_registry",
            "name": "ModelMetadata",
            "level": 1
          },
          {
            "module": "model_registry",
            "name": "ModelStatus",
            "level": 1
          },
          {
            "module": "model_registry",
            "name": "ModelTier",
            "level": 1
          }
        ]
      }
    },
    "ml.lifecycle.model_serving_infrastructure": {
      "path": "src/prompt_improver/ml/lifecycle/model_serving_infrastructure.py",
      "imports": {
        "absolute": [
          "asyncio",
          "json",
          "logging",
          "time",
          "uuid",
          "numpy",
          "psutil"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "concurrent.futures",
            "name": "ThreadPoolExecutor"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "pydantic",
            "name": "BaseModel"
          },
          {
            "module": "pydantic",
            "name": "Field"
          },
          {
            "module": "prometheus_client",
            "name": "Counter"
          },
          {
            "module": "prometheus_client",
            "name": "Histogram"
          },
          {
            "module": "prometheus_client",
            "name": "Gauge"
          },
          {
            "module": "prometheus_client",
            "name": "CollectorRegistry"
          },
          {
            "module": "prometheus_client",
            "name": "generate_latest"
          },
          {
            "module": "prompt_improver.utils.datetime_utils",
            "name": "aware_utc_now"
          }
        ],
        "relative_from": [
          {
            "module": "enhanced_model_registry",
            "name": "EnhancedModelRegistry",
            "level": 1
          },
          {
            "module": "enhanced_model_registry",
            "name": "ModelMetadata",
            "level": 1
          },
          {
            "module": "enhanced_model_registry",
            "name": "ModelStatus",
            "level": 1
          }
        ]
      }
    },
    "ml.lifecycle.experiment_tracker": {
      "path": "src/prompt_improver/ml/lifecycle/experiment_tracker.py",
      "imports": {
        "absolute": [
          "asyncio",
          "json",
          "logging",
          "time",
          "numpy",
          "optuna",
          "ray",
          "traceback"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "concurrent.futures",
            "name": "ProcessPoolExecutor"
          },
          {
            "module": "concurrent.futures",
            "name": "ThreadPoolExecutor"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "pydantic",
            "name": "BaseModel"
          },
          {
            "module": "pydantic",
            "name": "Field"
          },
          {
            "module": "pydantic",
            "name": "ConfigDict"
          },
          {
            "module": "scipy.stats",
            "name": "norm"
          },
          {
            "module": "sklearn.gaussian_process",
            "name": "GaussianProcessRegressor"
          },
          {
            "module": "sklearn.gaussian_process.kernels",
            "name": "Matern"
          },
          {
            "module": "sklearn.model_selection",
            "name": "ParameterGrid"
          },
          {
            "module": "prompt_improver.ml.types",
            "name": "features"
          },
          {
            "module": "prompt_improver.ml.types",
            "name": "labels"
          },
          {
            "module": "prompt_improver.ml.types",
            "name": "hyper_parameters"
          },
          {
            "module": "prompt_improver.ml.types",
            "name": "metrics_dict"
          },
          {
            "module": "prompt_improver.ml.types",
            "name": "TrainingBatch"
          },
          {
            "module": "prompt_improver.ml.types",
            "name": "OptimizationResult"
          },
          {
            "module": "prompt_improver.utils.datetime_utils",
            "name": "aware_utc_now"
          },
          {
            "module": "ray",
            "name": "tune"
          }
        ],
        "relative_from": [
          {
            "module": "model_registry",
            "name": "ModelMetadata",
            "level": 1
          },
          {
            "module": "model_registry",
            "name": "ModelStatus",
            "level": 1
          }
        ]
      }
    },
    "ml.lifecycle.ml_platform_integration": {
      "path": "src/prompt_improver/ml/lifecycle/ml_platform_integration.py",
      "imports": {
        "absolute": [
          "asyncio",
          "json",
          "logging",
          "time",
          "uuid",
          "numpy"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "concurrent.futures",
            "name": "ThreadPoolExecutor"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "pydantic",
            "name": "BaseModel"
          },
          {
            "module": "pydantic",
            "name": "Field"
          },
          {
            "module": "pydantic",
            "name": "ConfigDict"
          },
          {
            "module": "prompt_improver.ml.optimization.batch.enhanced_batch_processor",
            "name": "EnhancedBatchProcessor"
          },
          {
            "module": "prompt_improver.performance.testing.ab_testing_service",
            "name": "ABTestingService"
          },
          {
            "module": "prompt_improver.database.optimization_integration",
            "name": "DatabaseOptimizationManager"
          },
          {
            "module": "prompt_improver.performance.monitoring.performance_monitor",
            "name": "PerformanceMonitor"
          },
          {
            "module": "prompt_improver.utils.datetime_utils",
            "name": "aware_utc_now"
          }
        ],
        "relative_from": [
          {
            "module": "enhanced_model_registry",
            "name": "EnhancedModelRegistry",
            "level": 1
          },
          {
            "module": "enhanced_model_registry",
            "name": "ModelMetadata",
            "level": 1
          },
          {
            "module": "enhanced_model_registry",
            "name": "ModelStatus",
            "level": 1
          },
          {
            "module": "enhanced_model_registry",
            "name": "SemanticVersion",
            "level": 1
          },
          {
            "module": "enhanced_model_registry",
            "name": "create_enhanced_registry",
            "level": 1
          },
          {
            "module": "automated_deployment_pipeline",
            "name": "AutomatedDeploymentPipeline",
            "level": 1
          },
          {
            "module": "automated_deployment_pipeline",
            "name": "DeploymentConfig",
            "level": 1
          },
          {
            "module": "automated_deployment_pipeline",
            "name": "DeploymentStrategy",
            "level": 1
          },
          {
            "module": "automated_deployment_pipeline",
            "name": "create_deployment_pipeline",
            "level": 1
          },
          {
            "module": "enhanced_experiment_orchestrator",
            "name": "EnhancedExperimentOrchestrator",
            "level": 1
          },
          {
            "module": "enhanced_experiment_orchestrator",
            "name": "EnhancedExperimentConfig",
            "level": 1
          },
          {
            "module": "enhanced_experiment_orchestrator",
            "name": "ExperimentPriority",
            "level": 1
          },
          {
            "module": "enhanced_experiment_orchestrator",
            "name": "OptimizationStrategy",
            "level": 1
          },
          {
            "module": "enhanced_experiment_orchestrator",
            "name": "create_enhanced_orchestrator",
            "level": 1
          },
          {
            "module": "model_serving_infrastructure",
            "name": "ProductionModelServer",
            "level": 1
          },
          {
            "module": "model_serving_infrastructure",
            "name": "ServingConfig",
            "level": 1
          },
          {
            "module": "model_serving_infrastructure",
            "name": "ServingStatus",
            "level": 1
          },
          {
            "module": "model_serving_infrastructure",
            "name": "ScalingStrategy",
            "level": 1
          },
          {
            "module": "model_serving_infrastructure",
            "name": "create_model_server",
            "level": 1
          }
        ]
      }
    },
    "ml.lifecycle.enhanced_model_registry": {
      "path": "src/prompt_improver/ml/lifecycle/enhanced_model_registry.py",
      "imports": {
        "absolute": [
          "asyncio",
          "hashlib",
          "json",
          "logging",
          "time",
          "mlflow",
          "numpy"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "concurrent.futures",
            "name": "ThreadPoolExecutor"
          },
          {
            "module": "pydantic",
            "name": "BaseModel"
          },
          {
            "module": "pydantic",
            "name": "Field"
          },
          {
            "module": "pydantic",
            "name": "ConfigDict"
          },
          {
            "module": "sqlalchemy",
            "name": "select"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          },
          {
            "module": "prompt_improver.ml.types",
            "name": "features"
          },
          {
            "module": "prompt_improver.ml.types",
            "name": "labels"
          },
          {
            "module": "prompt_improver.ml.types",
            "name": "model_config"
          },
          {
            "module": "prompt_improver.ml.types",
            "name": "hyper_parameters"
          },
          {
            "module": "prompt_improver.utils.datetime_utils",
            "name": "aware_utc_now"
          }
        ],
        "relative_from": []
      }
    },
    "ml.lifecycle.performance_validation": {
      "path": "src/prompt_improver/ml/lifecycle/performance_validation.py",
      "imports": {
        "absolute": [
          "asyncio",
          "json",
          "logging",
          "statistics",
          "time",
          "uuid",
          "numpy",
          "sys",
          "random",
          "psutil",
          "psutil"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "concurrent.futures",
            "name": "ThreadPoolExecutor"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "pydantic",
            "name": "BaseModel"
          },
          {
            "module": "prompt_improver.utils.datetime_utils",
            "name": "aware_utc_now"
          }
        ],
        "relative_from": [
          {
            "module": "ml_platform_integration",
            "name": "MLPlatformIntegration",
            "level": 1
          },
          {
            "module": "ml_platform_integration",
            "name": "WorkflowRequest",
            "level": 1
          },
          {
            "module": "ml_platform_integration",
            "name": "WorkflowType",
            "level": 1
          },
          {
            "module": "ml_platform_integration",
            "name": "create_ml_platform",
            "level": 1
          },
          {
            "module": "ml_platform_integration",
            "name": "create_experiment_to_production_request",
            "level": 1
          },
          {
            "module": "enhanced_model_registry",
            "name": "create_enhanced_registry",
            "level": 1
          },
          {
            "module": "enhanced_experiment_orchestrator",
            "name": "EnhancedExperimentConfig",
            "level": 1
          },
          {
            "module": "enhanced_experiment_orchestrator",
            "name": "OptimizationStrategy",
            "level": 1
          },
          {
            "module": "enhanced_experiment_orchestrator",
            "name": "ExperimentPriority",
            "level": 1
          },
          {
            "module": "automated_deployment_pipeline",
            "name": "DeploymentConfig",
            "level": 1
          },
          {
            "module": "automated_deployment_pipeline",
            "name": "DeploymentStrategy",
            "level": 1
          },
          {
            "module": "model_serving_infrastructure",
            "name": "ServingConfig",
            "level": 1
          },
          {
            "module": "model_serving_infrastructure",
            "name": "ScalingStrategy",
            "level": 1
          }
        ]
      }
    },
    "ml.lifecycle.model_registry": {
      "path": "src/prompt_improver/ml/lifecycle/model_registry.py",
      "imports": {
        "absolute": [
          "asyncio",
          "hashlib",
          "json",
          "logging",
          "time",
          "mlflow",
          "numpy",
          "pickle"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "pydantic",
            "name": "BaseModel"
          },
          {
            "module": "pydantic",
            "name": "Field"
          },
          {
            "module": "pydantic",
            "name": "ConfigDict"
          },
          {
            "module": "sqlalchemy",
            "name": "select"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          },
          {
            "module": "prompt_improver.database.models",
            "name": "ABExperiment"
          },
          {
            "module": "prompt_improver.ml.types",
            "name": "features"
          },
          {
            "module": "prompt_improver.ml.types",
            "name": "labels"
          },
          {
            "module": "prompt_improver.ml.types",
            "name": "model_config"
          },
          {
            "module": "prompt_improver.ml.types",
            "name": "hyper_parameters"
          },
          {
            "module": "prompt_improver.utils.datetime_utils",
            "name": "aware_utc_now"
          }
        ],
        "relative_from": []
      }
    },
    "ml.lifecycle.lifecycle_monitoring": {
      "path": "src/prompt_improver/ml/lifecycle/lifecycle_monitoring.py",
      "imports": {
        "absolute": [
          "asyncio",
          "json",
          "logging",
          "time",
          "uuid",
          "numpy",
          "psutil"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "collections",
            "name": "defaultdict"
          },
          {
            "module": "collections",
            "name": "deque"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "pydantic",
            "name": "BaseModel"
          },
          {
            "module": "pydantic",
            "name": "Field"
          },
          {
            "module": "prometheus_client",
            "name": "Counter"
          },
          {
            "module": "prometheus_client",
            "name": "Histogram"
          },
          {
            "module": "prometheus_client",
            "name": "Gauge"
          },
          {
            "module": "prometheus_client",
            "name": "CollectorRegistry"
          },
          {
            "module": "prometheus_client",
            "name": "generate_latest"
          },
          {
            "module": "prompt_improver.performance.monitoring.health.enhanced_base",
            "name": "EnhancedHealthMonitor"
          },
          {
            "module": "prompt_improver.performance.monitoring.health.service",
            "name": "HealthService"
          },
          {
            "module": "prompt_improver.performance.monitoring.performance_monitor",
            "name": "PerformanceMonitor"
          },
          {
            "module": "prompt_improver.utils.datetime_utils",
            "name": "aware_utc_now"
          }
        ],
        "relative_from": []
      }
    },
    "ml.lifecycle.automated_deployment_pipeline": {
      "path": "src/prompt_improver/ml/lifecycle/automated_deployment_pipeline.py",
      "imports": {
        "absolute": [
          "asyncio",
          "json",
          "logging",
          "os",
          "tempfile",
          "time",
          "yaml",
          "docker",
          "requests"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "concurrent.futures",
            "name": "ThreadPoolExecutor"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "kubernetes",
            "name": "client"
          },
          {
            "module": "kubernetes",
            "name": "config"
          },
          {
            "module": "pydantic",
            "name": "BaseModel"
          },
          {
            "module": "pydantic",
            "name": "Field"
          },
          {
            "module": "prompt_improver.utils.datetime_utils",
            "name": "aware_utc_now"
          }
        ],
        "relative_from": [
          {
            "module": "enhanced_model_registry",
            "name": "EnhancedModelRegistry",
            "level": 1
          },
          {
            "module": "enhanced_model_registry",
            "name": "ModelMetadata",
            "level": 1
          },
          {
            "module": "enhanced_model_registry",
            "name": "ModelStatus",
            "level": 1
          },
          {
            "module": "enhanced_model_registry",
            "name": "ModelTier",
            "level": 1
          }
        ]
      }
    },
    "ml.utils.__init__": {
      "path": "src/prompt_improver/ml/utils/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "nltk_manager",
            "name": "NLTKResourceManager",
            "level": 1
          }
        ]
      }
    },
    "ml.utils.nltk_manager": {
      "path": "src/prompt_improver/ml/utils/nltk_manager.py",
      "imports": {
        "absolute": [
          "logging",
          "os",
          "nltk"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Set"
          }
        ],
        "relative_from": []
      }
    },
    "ml.models.__init__": {
      "path": "src/prompt_improver/ml/models/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "model_manager",
            "name": "ModelManager",
            "level": 1
          },
          {
            "module": "model_manager",
            "name": "model_config",
            "level": 1
          },
          {
            "module": "production_registry",
            "name": "ProductionModelRegistry",
            "level": 1
          },
          {
            "module": "production_registry",
            "name": "ModelAlias",
            "level": 1
          },
          {
            "module": "production_registry",
            "name": "DeploymentStrategy",
            "level": 1
          },
          {
            "module": "prompt_enhancement",
            "name": "PromptEnhancementRecordBase",
            "level": 1
          }
        ]
      }
    },
    "ml.models.model_manager": {
      "path": "src/prompt_improver/ml/models/model_manager.py",
      "imports": {
        "absolute": [
          "gc",
          "logging",
          "threading",
          "torch",
          "psutil",
          "psutil",
          "accelerate"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "contextlib",
            "name": "contextmanager"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Type"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "transformers",
            "name": "AutoModelForTokenClassification"
          },
          {
            "module": "transformers",
            "name": "AutoTokenizer"
          },
          {
            "module": "transformers",
            "name": "bits_and_bytes_config"
          },
          {
            "module": "transformers",
            "name": "pipeline"
          },
          {
            "module": "transformers",
            "name": "set_seed"
          },
          {
            "module": "transformers",
            "name": "pipeline"
          }
        ],
        "relative_from": []
      }
    },
    "ml.models.production_registry": {
      "path": "src/prompt_improver/ml/models/production_registry.py",
      "imports": {
        "absolute": [
          "asyncio",
          "hashlib",
          "logging",
          "time",
          "mlflow",
          "mlflow.sklearn",
          "numpy",
          "sys"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "mlflow.entities.model_registry",
            "name": "ModelVersion"
          },
          {
            "module": "mlflow.tracking",
            "name": "MlflowClient"
          },
          {
            "module": "prompt_improver.utils.datetime_utils",
            "name": "aware_utc_now"
          }
        ],
        "relative_from": []
      }
    },
    "ml.models.prompt_enhancement": {
      "path": "src/prompt_improver/ml/models/prompt_enhancement.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "uuid",
            "name": "UUID"
          },
          {
            "module": "uuid",
            "name": "uuid4"
          },
          {
            "module": "pydantic",
            "name": "BaseModel"
          },
          {
            "module": "pydantic",
            "name": "Field"
          },
          {
            "module": "pydantic",
            "name": "field_validator"
          },
          {
            "module": "pydantic",
            "name": "model_validator"
          },
          {
            "module": "pydantic.json_schema",
            "name": "JsonSchemaValue"
          },
          {
            "module": "sqlalchemy",
            "name": "CheckConstraint"
          },
          {
            "module": "sqlalchemy",
            "name": "Column"
          },
          {
            "module": "sqlalchemy",
            "name": "Index"
          },
          {
            "module": "sqlalchemy",
            "name": "Text"
          },
          {
            "module": "sqlalchemy.dialects.postgresql",
            "name": "JSONB"
          },
          {
            "module": "sqlalchemy.dialects.postgresql",
            "name": "UUID"
          },
          {
            "module": "sqlmodel",
            "name": "Field"
          },
          {
            "module": "sqlmodel",
            "name": "SQLModel"
          }
        ],
        "relative_from": []
      }
    },
    "ml.automl.__init__": {
      "path": "src/prompt_improver/ml/automl/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "callbacks",
            "name": "AutoMLCallback",
            "level": 1
          },
          {
            "module": "callbacks",
            "name": "ExperimentCallback",
            "level": 1
          },
          {
            "module": "callbacks",
            "name": "ModelSelectionCallback",
            "level": 1
          },
          {
            "module": "callbacks",
            "name": "RealTimeAnalyticsCallback",
            "level": 1
          },
          {
            "module": "orchestrator",
            "name": "AutoMLOrchestrator",
            "level": 1
          }
        ]
      }
    },
    "ml.automl.orchestrator": {
      "path": "src/prompt_improver/ml/automl/orchestrator.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time",
          "numpy",
          "optuna",
          "asyncio",
          "concurrent.futures",
          "concurrent.futures"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "collections.abc",
            "name": "Callable"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "typing",
            "name": "TYPE_CHECKING"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "optuna.integration",
            "name": "OptunaSearchCV"
          },
          {
            "module": "optuna.storages",
            "name": "RDBStorage"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          },
          {
            "module": "opentelemetry",
            "name": "trace"
          },
          {
            "module": "prompt_improver.utils.datetime_utils",
            "name": "aware_utc_now"
          }
        ],
        "relative_from": [
          {
            "module": "callbacks",
            "name": "AutoMLCallback",
            "level": 1
          },
          {
            "module": "database.connection",
            "name": "DatabaseManager",
            "level": 2
          },
          {
            "module": "evaluation.experiment_orchestrator",
            "name": "ExperimentOrchestrator",
            "level": 2
          },
          {
            "module": "optimization.algorithms.rule_optimizer",
            "name": "OptimizationConfig",
            "level": 2
          },
          {
            "module": "optimization.algorithms.rule_optimizer",
            "name": "RuleOptimizer",
            "level": 2
          },
          {
            "module": "core.services.analytics_factory",
            "name": "get_analytics_router",
            "level": 3
          },
          {
            "module": "utils.model_manager",
            "name": "ModelManager",
            "level": 2
          },
          {
            "module": "optimization.algorithms.rule_optimizer",
            "name": "RuleOptimizer",
            "level": 2
          },
          {
            "module": "database.connection",
            "name": "DatabaseManager",
            "level": 2
          },
          {
            "module": "optimization.algorithms.rule_optimizer",
            "name": "RuleOptimizer",
            "level": 2
          },
          {
            "module": "callbacks",
            "name": "RealTimeAnalyticsCallback",
            "level": 1
          },
          {
            "module": "optimization.algorithms.rule_optimizer",
            "name": "OptimizationConfig",
            "level": 2
          }
        ]
      }
    },
    "ml.automl.callbacks": {
      "path": "src/prompt_improver/ml/automl/callbacks.py",
      "imports": {
        "absolute": [
          "json",
          "logging",
          "time",
          "optuna"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "typing",
            "name": "TYPE_CHECKING"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "optuna.trial",
            "name": "TrialState"
          }
        ],
        "relative_from": [
          {
            "module": "evaluation.experiment_orchestrator",
            "name": "ExperimentOrchestrator",
            "level": 2
          },
          {
            "module": "core.services.analytics_factory",
            "name": "get_analytics_router",
            "level": 3
          },
          {
            "module": "orchestrator",
            "name": "AutoMLOrchestrator",
            "level": 1
          }
        ]
      }
    },
    "ml.orchestration.__init__": {
      "path": "src/prompt_improver/ml/orchestration/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "core.ml_pipeline_orchestrator",
            "name": "MLPipelineOrchestrator",
            "level": 1
          },
          {
            "module": "core.workflow_execution_engine",
            "name": "WorkflowExecutionEngine",
            "level": 1
          },
          {
            "module": "core.resource_manager",
            "name": "ResourceManager",
            "level": 1
          },
          {
            "module": "core.component_registry",
            "name": "ComponentRegistry",
            "level": 1
          },
          {
            "module": "core.unified_retry_manager",
            "name": "UnifiedRetryManager",
            "level": 1
          },
          {
            "module": "core.unified_retry_manager",
            "name": "get_retry_manager",
            "level": 1
          }
        ]
      }
    },
    "ml.orchestration.connectors.tier4_connectors": {
      "path": "src/prompt_improver/ml/orchestration/connectors/tier4_connectors.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "prompt_improver.database.performance_monitor",
            "name": "get_performance_monitor"
          },
          {
            "module": "prompt_improver.database.query_optimizer",
            "name": "DatabaseConnectionOptimizer"
          },
          {
            "module": "prompt_improver.database.query_optimizer",
            "name": "PreparedStatementCache"
          },
          {
            "module": "prompt_improver.database.psycopg_client",
            "name": "get_psycopg_client"
          }
        ],
        "relative_from": [
          {
            "module": "component_connector",
            "name": "ComponentConnector",
            "level": 1
          },
          {
            "module": "component_connector",
            "name": "ComponentMetadata",
            "level": 1
          },
          {
            "module": "component_connector",
            "name": "ComponentCapability",
            "level": 1
          },
          {
            "module": "component_connector",
            "name": "ComponentTier",
            "level": 1
          },
          {
            "module": "core.unified_retry_manager",
            "name": "RetryConfig",
            "level": 2
          },
          {
            "module": "core.unified_retry_manager",
            "name": "RetryStrategy",
            "level": 2
          },
          {
            "module": "core.unified_retry_manager",
            "name": "UnifiedRetryManager",
            "level": 2
          },
          {
            "module": "core.unified_retry_manager",
            "name": "RetryConfig",
            "level": 2
          }
        ]
      }
    },
    "ml.orchestration.connectors.tier3_connectors": {
      "path": "src/prompt_improver/ml/orchestration/connectors/tier3_connectors.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Any"
          }
        ],
        "relative_from": [
          {
            "module": "component_connector",
            "name": "ComponentConnector",
            "level": 1
          },
          {
            "module": "component_connector",
            "name": "ComponentMetadata",
            "level": 1
          },
          {
            "module": "component_connector",
            "name": "ComponentCapability",
            "level": 1
          },
          {
            "module": "component_connector",
            "name": "ComponentTier",
            "level": 1
          }
        ]
      }
    },
    "ml.orchestration.connectors.__init__": {
      "path": "src/prompt_improver/ml/orchestration/connectors/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "component_connector",
            "name": "ComponentConnector",
            "level": 1
          },
          {
            "module": "component_connector",
            "name": "ComponentMetadata",
            "level": 1
          },
          {
            "module": "component_connector",
            "name": "ComponentCapability",
            "level": 1
          },
          {
            "module": "component_connector",
            "name": "ComponentTier",
            "level": 1
          },
          {
            "module": "component_connector",
            "name": "ComponentStatus",
            "level": 1
          },
          {
            "module": "tier1_connectors",
            "name": "TrainingDataLoaderConnector",
            "level": 1
          },
          {
            "module": "tier1_connectors",
            "name": "MLModelServiceConnector",
            "level": 1
          },
          {
            "module": "tier1_connectors",
            "name": "RuleOptimizerConnector",
            "level": 1
          },
          {
            "module": "tier1_connectors",
            "name": "MultiArmedBanditConnector",
            "level": 1
          },
          {
            "module": "tier1_connectors",
            "name": "AprioriAnalyzerConnector",
            "level": 1
          },
          {
            "module": "tier1_connectors",
            "name": "Tier1ConnectorFactory",
            "level": 1
          }
        ]
      }
    },
    "ml.orchestration.connectors.tier6_connectors": {
      "path": "src/prompt_improver/ml/orchestration/connectors/tier6_connectors.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Any"
          }
        ],
        "relative_from": [
          {
            "module": "component_connector",
            "name": "ComponentConnector",
            "level": 1
          },
          {
            "module": "component_connector",
            "name": "ComponentMetadata",
            "level": 1
          },
          {
            "module": "component_connector",
            "name": "ComponentCapability",
            "level": 1
          },
          {
            "module": "component_connector",
            "name": "ComponentTier",
            "level": 1
          }
        ]
      }
    },
    "ml.orchestration.connectors.component_connector": {
      "path": "src/prompt_improver/ml/orchestration/connectors/component_connector.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "abc",
            "name": "ABC"
          },
          {
            "module": "abc",
            "name": "abstractmethod"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Protocol"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "enum",
            "name": "Enum"
          }
        ],
        "relative_from": [
          {
            "module": "events.event_types",
            "name": "EventType",
            "level": 2
          },
          {
            "module": "events.event_types",
            "name": "MLEvent",
            "level": 2
          }
        ]
      }
    },
    "ml.orchestration.connectors.tier2_connectors": {
      "path": "src/prompt_improver/ml/orchestration/connectors/tier2_connectors.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Any"
          }
        ],
        "relative_from": [
          {
            "module": "component_connector",
            "name": "ComponentConnector",
            "level": 1
          },
          {
            "module": "component_connector",
            "name": "ComponentMetadata",
            "level": 1
          },
          {
            "module": "component_connector",
            "name": "ComponentCapability",
            "level": 1
          },
          {
            "module": "component_connector",
            "name": "ComponentTier",
            "level": 1
          }
        ]
      }
    },
    "ml.orchestration.connectors.tier5_connectors": {
      "path": "src/prompt_improver/ml/orchestration/connectors/tier5_connectors.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Any"
          }
        ],
        "relative_from": [
          {
            "module": "component_connector",
            "name": "ComponentConnector",
            "level": 1
          },
          {
            "module": "component_connector",
            "name": "ComponentMetadata",
            "level": 1
          },
          {
            "module": "component_connector",
            "name": "ComponentCapability",
            "level": 1
          },
          {
            "module": "component_connector",
            "name": "ComponentTier",
            "level": 1
          }
        ]
      }
    },
    "ml.orchestration.connectors.tier1_connectors": {
      "path": "src/prompt_improver/ml/orchestration/connectors/tier1_connectors.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Any"
          }
        ],
        "relative_from": [
          {
            "module": "component_connector",
            "name": "ComponentConnector",
            "level": 1
          },
          {
            "module": "component_connector",
            "name": "ComponentMetadata",
            "level": 1
          },
          {
            "module": "component_connector",
            "name": "ComponentCapability",
            "level": 1
          },
          {
            "module": "component_connector",
            "name": "ComponentTier",
            "level": 1
          },
          {
            "module": "component_connector",
            "name": "ComponentStatus",
            "level": 1
          }
        ]
      }
    },
    "ml.orchestration.coordinators.training_workflow_coordinator": {
      "path": "src/prompt_improver/ml/orchestration/coordinators/training_workflow_coordinator.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          }
        ],
        "relative_from": [
          {
            "module": "events.event_types",
            "name": "EventType",
            "level": 2
          },
          {
            "module": "events.event_types",
            "name": "MLEvent",
            "level": 2
          },
          {
            "module": "core.workflow_types",
            "name": "WorkflowStep",
            "level": 2
          },
          {
            "module": "core.workflow_types",
            "name": "WorkflowStepStatus",
            "level": 2
          }
        ]
      }
    },
    "ml.orchestration.coordinators.adaptive_training_coordinator": {
      "path": "src/prompt_improver/ml/orchestration/coordinators/adaptive_training_coordinator.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "uuid"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          },
          {
            "module": "sqlalchemy",
            "name": "select"
          },
          {
            "module": "sqlalchemy",
            "name": "select"
          },
          {
            "module": "sqlalchemy",
            "name": "select"
          },
          {
            "module": "sqlalchemy",
            "name": "select"
          },
          {
            "module": "sqlalchemy",
            "name": "select"
          },
          {
            "module": "sqlalchemy",
            "name": "select"
          }
        ],
        "relative_from": [
          {
            "module": "database",
            "name": "get_sessionmanager",
            "level": 4
          },
          {
            "module": "database.models",
            "name": "TrainingSession",
            "level": 4
          },
          {
            "module": "database.models",
            "name": "TrainingSessionUpdate",
            "level": 4
          },
          {
            "module": "core.ml_pipeline_orchestrator",
            "name": "MLPipelineOrchestrator",
            "level": 2
          },
          {
            "module": "analysis.performance_gap_analyzer",
            "name": "PerformanceGapAnalyzer",
            "level": 3
          },
          {
            "module": "analysis.performance_gap_analyzer",
            "name": "GapAnalysisResult",
            "level": 3
          },
          {
            "module": "analysis.generation_strategy_analyzer",
            "name": "GenerationStrategyAnalyzer",
            "level": 3
          },
          {
            "module": "analysis.generation_strategy_analyzer",
            "name": "StrategyRecommendation",
            "level": 3
          },
          {
            "module": "analysis.difficulty_distribution_analyzer",
            "name": "DifficultyDistributionAnalyzer",
            "level": 3
          },
          {
            "module": "analysis.difficulty_distribution_analyzer",
            "name": "DifficultyProfile",
            "level": 3
          },
          {
            "module": "preprocessing.synthetic_data_generator",
            "name": "ProductionSyntheticDataGenerator",
            "level": 3
          },
          {
            "module": "analytics.generation_analytics",
            "name": "GenerationHistoryTracker",
            "level": 3
          },
          {
            "module": "analytics.generation_analytics",
            "name": "GenerationAnalytics",
            "level": 3
          },
          {
            "module": "optimization.batch.dynamic_batch_optimizer",
            "name": "DynamicBatchOptimizer",
            "level": 3
          },
          {
            "module": "optimization.batch.dynamic_batch_optimizer",
            "name": "BatchOptimizationConfig",
            "level": 3
          }
        ]
      }
    },
    "ml.orchestration.coordinators.__init__": {
      "path": "src/prompt_improver/ml/orchestration/coordinators/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "training_workflow_coordinator",
            "name": "TrainingWorkflowCoordinator",
            "level": 1
          },
          {
            "module": "optimization_controller",
            "name": "OptimizationController",
            "level": 1
          },
          {
            "module": "evaluation_pipeline_manager",
            "name": "EvaluationPipelineManager",
            "level": 1
          },
          {
            "module": "deployment_controller",
            "name": "DeploymentController",
            "level": 1
          },
          {
            "module": "data_pipeline_coordinator",
            "name": "DataPipelineCoordinator",
            "level": 1
          }
        ]
      }
    },
    "ml.orchestration.coordinators.data_pipeline_coordinator": {
      "path": "src/prompt_improver/ml/orchestration/coordinators/data_pipeline_coordinator.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          }
        ],
        "relative_from": [
          {
            "module": "events.event_types",
            "name": "EventType",
            "level": 2
          },
          {
            "module": "events.event_types",
            "name": "MLEvent",
            "level": 2
          }
        ]
      }
    },
    "ml.orchestration.coordinators.evaluation_pipeline_manager": {
      "path": "src/prompt_improver/ml/orchestration/coordinators/evaluation_pipeline_manager.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          }
        ],
        "relative_from": [
          {
            "module": "events.event_types",
            "name": "EventType",
            "level": 2
          },
          {
            "module": "events.event_types",
            "name": "MLEvent",
            "level": 2
          }
        ]
      }
    },
    "ml.orchestration.coordinators.deployment_controller": {
      "path": "src/prompt_improver/ml/orchestration/coordinators/deployment_controller.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "enum",
            "name": "Enum"
          }
        ],
        "relative_from": [
          {
            "module": "events.event_types",
            "name": "EventType",
            "level": 2
          },
          {
            "module": "events.event_types",
            "name": "MLEvent",
            "level": 2
          }
        ]
      }
    },
    "ml.orchestration.coordinators.optimization_controller": {
      "path": "src/prompt_improver/ml/orchestration/coordinators/optimization_controller.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "random",
          "numpy"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "enum",
            "name": "Enum"
          }
        ],
        "relative_from": [
          {
            "module": "events.event_types",
            "name": "EventType",
            "level": 2
          },
          {
            "module": "events.event_types",
            "name": "MLEvent",
            "level": 2
          },
          {
            "module": "optimization.algorithms.rule_optimizer",
            "name": "RuleOptimizer",
            "level": 3
          }
        ]
      }
    },
    "ml.orchestration.core.retry_observability": {
      "path": "src/prompt_improver/ml/orchestration/core/retry_observability.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "opentelemetry",
            "name": "trace"
          },
          {
            "module": "opentelemetry",
            "name": "metrics"
          },
          {
            "module": "opentelemetry.trace",
            "name": "Status"
          },
          {
            "module": "opentelemetry.trace",
            "name": "StatusCode"
          },
          {
            "module": "opentelemetry.metrics",
            "name": "Observation"
          }
        ],
        "relative_from": [
          {
            "module": "performance.monitoring.metrics_registry",
            "name": "get_metrics_registry",
            "level": 4
          },
          {
            "module": "performance.monitoring.metrics_registry",
            "name": "StandardMetrics",
            "level": 4
          },
          {
            "module": "performance.monitoring.metrics_registry",
            "name": "PROMETHEUS_AVAILABLE",
            "level": 4
          }
        ]
      }
    },
    "ml.orchestration.core.workflow_types": {
      "path": "src/prompt_improver/ml/orchestration/core/workflow_types.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          }
        ],
        "relative_from": []
      }
    },
    "ml.orchestration.core.component_registry": {
      "path": "src/prompt_improver/ml/orchestration/core/component_registry.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          }
        ],
        "relative_from": [
          {
            "module": "config.orchestrator_config",
            "name": "OrchestratorConfig",
            "level": 2
          },
          {
            "module": "config.component_definitions",
            "name": "ComponentDefinitions",
            "level": 2
          }
        ]
      }
    },
    "ml.orchestration.core.resource_manager": {
      "path": "src/prompt_improver/ml/orchestration/core/resource_manager.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "psutil",
          "time",
          "gc"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          }
        ],
        "relative_from": [
          {
            "module": "config.orchestrator_config",
            "name": "OrchestratorConfig",
            "level": 2
          },
          {
            "module": "events.event_types",
            "name": "EventType",
            "level": 2
          },
          {
            "module": "events.event_types",
            "name": "MLEvent",
            "level": 2
          },
          {
            "module": "k8s.resource_integration",
            "name": "kubernetes_resource_manager",
            "level": 2
          }
        ]
      }
    },
    "ml.orchestration.core.__init__": {
      "path": "src/prompt_improver/ml/orchestration/core/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "ml_pipeline_orchestrator",
            "name": "MLPipelineOrchestrator",
            "level": 1
          },
          {
            "module": "workflow_execution_engine",
            "name": "WorkflowExecutionEngine",
            "level": 1
          },
          {
            "module": "resource_manager",
            "name": "ResourceManager",
            "level": 1
          },
          {
            "module": "component_registry",
            "name": "ComponentRegistry",
            "level": 1
          },
          {
            "module": "workflow_types",
            "name": "WorkflowDefinition",
            "level": 1
          },
          {
            "module": "workflow_types",
            "name": "WorkflowStep",
            "level": 1
          },
          {
            "module": "workflow_types",
            "name": "WorkflowStepStatus",
            "level": 1
          },
          {
            "module": "unified_retry_manager",
            "name": "UnifiedRetryManager",
            "level": 1
          },
          {
            "module": "unified_retry_manager",
            "name": "RetryConfig",
            "level": 1
          },
          {
            "module": "unified_retry_manager",
            "name": "RetryStrategy",
            "level": 1
          },
          {
            "module": "unified_retry_manager",
            "name": "get_retry_manager",
            "level": 1
          }
        ]
      }
    },
    "ml.orchestration.core.ml_pipeline_orchestrator": {
      "path": "src/prompt_improver/ml/orchestration/core/ml_pipeline_orchestrator.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "prompt_improver.security.input_sanitization",
            "name": "SecurityError"
          },
          {
            "module": "prompt_improver.security.input_sanitization",
            "name": "SecurityThreatLevel"
          },
          {
            "module": "contextlib",
            "name": "asynccontextmanager"
          }
        ],
        "relative_from": [
          {
            "module": "workflow_execution_engine",
            "name": "WorkflowExecutionEngine",
            "level": 1
          },
          {
            "module": "resource_manager",
            "name": "ResourceManager",
            "level": 1
          },
          {
            "module": "component_registry",
            "name": "ComponentRegistry",
            "level": 1
          },
          {
            "module": "events.event_bus",
            "name": "EventBus",
            "level": 2
          },
          {
            "module": "events.event_types",
            "name": "EventType",
            "level": 2
          },
          {
            "module": "events.event_types",
            "name": "MLEvent",
            "level": 2
          },
          {
            "module": "config.orchestrator_config",
            "name": "OrchestratorConfig",
            "level": 2
          },
          {
            "module": "integration.direct_component_loader",
            "name": "DirectComponentLoader",
            "level": 2
          },
          {
            "module": "integration.component_invoker",
            "name": "ComponentInvoker",
            "level": 2
          },
          {
            "module": "unified_retry_manager",
            "name": "RetryConfig",
            "level": 1
          },
          {
            "module": "security.input_sanitization",
            "name": "ValidationResult",
            "level": 2
          },
          {
            "module": "security.input_sanitization",
            "name": "SecurityThreatLevel",
            "level": 2
          }
        ]
      }
    },
    "ml.orchestration.core.unified_retry_manager": {
      "path": "src/prompt_improver/ml/orchestration/core/unified_retry_manager.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "random",
          "time",
          "random"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Coroutine"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "TypeVar"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "contextlib",
            "name": "asynccontextmanager"
          },
          {
            "module": "opentelemetry",
            "name": "trace"
          },
          {
            "module": "opentelemetry",
            "name": "metrics"
          },
          {
            "module": "opentelemetry.trace",
            "name": "Status"
          },
          {
            "module": "opentelemetry.trace",
            "name": "StatusCode"
          }
        ],
        "relative_from": [
          {
            "module": "core.protocols.retry_protocols",
            "name": "RetryStrategy",
            "level": 4
          },
          {
            "module": "core.protocols.retry_protocols",
            "name": "RetryableErrorType",
            "level": 4
          },
          {
            "module": "core.protocols.retry_protocols",
            "name": "RetryConfigProtocol",
            "level": 4
          },
          {
            "module": "core.protocols.retry_protocols",
            "name": "MetricsRegistryProtocol",
            "level": 4
          },
          {
            "module": "core.retry_config",
            "name": "RetryConfig",
            "level": 4
          },
          {
            "module": "performance.monitoring.metrics_registry",
            "name": "get_metrics_registry",
            "level": 4
          },
          {
            "module": "performance.monitoring.metrics_registry",
            "name": "StandardMetrics",
            "level": 4
          },
          {
            "module": "performance.monitoring.metrics_registry",
            "name": "PROMETHEUS_AVAILABLE",
            "level": 4
          },
          {
            "module": "retry_observability",
            "name": "AlertRule",
            "level": 1
          },
          {
            "module": "retry_observability",
            "name": "AlertSeverity",
            "level": 1
          },
          {
            "module": "retry_observability",
            "name": "get_observability_manager",
            "level": 1
          },
          {
            "module": "retry_observability",
            "name": "get_observability_manager",
            "level": 1
          }
        ]
      }
    },
    "ml.orchestration.core.workflow_execution_engine": {
      "path": "src/prompt_improver/ml/orchestration/core/workflow_execution_engine.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "uuid"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          }
        ],
        "relative_from": [
          {
            "module": "config.orchestrator_config",
            "name": "OrchestratorConfig",
            "level": 2
          },
          {
            "module": "events.event_types",
            "name": "EventType",
            "level": 2
          },
          {
            "module": "events.event_types",
            "name": "MLEvent",
            "level": 2
          },
          {
            "module": "workflow_types",
            "name": "WorkflowStep",
            "level": 1
          },
          {
            "module": "workflow_types",
            "name": "WorkflowDefinition",
            "level": 1
          },
          {
            "module": "workflow_types",
            "name": "WorkflowStepStatus",
            "level": 1
          },
          {
            "module": "unified_retry_manager",
            "name": "RetryConfig",
            "level": 1
          },
          {
            "module": "unified_retry_manager",
            "name": "RetryStrategy",
            "level": 1
          },
          {
            "module": "config.workflow_templates",
            "name": "WorkflowTemplates",
            "level": 2
          }
        ]
      }
    },
    "ml.orchestration.config.component_definitions": {
      "path": "src/prompt_improver/ml/orchestration/config/component_definitions.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          }
        ],
        "relative_from": [
          {
            "module": "core.component_registry",
            "name": "ComponentTier",
            "level": 2
          },
          {
            "module": "core.component_registry",
            "name": "ComponentInfo",
            "level": 2
          },
          {
            "module": "core.component_registry",
            "name": "ComponentCapability",
            "level": 2
          }
        ]
      }
    },
    "ml.orchestration.config.__init__": {
      "path": "src/prompt_improver/ml/orchestration/config/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "orchestrator_config",
            "name": "OrchestratorConfig",
            "level": 1
          },
          {
            "module": "component_definitions",
            "name": "ComponentDefinitions",
            "level": 1
          },
          {
            "module": "workflow_templates",
            "name": "WorkflowTemplates",
            "level": 1
          }
        ]
      }
    },
    "ml.orchestration.config.orchestrator_config": {
      "path": "src/prompt_improver/ml/orchestration/config/orchestrator_config.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          }
        ],
        "relative_from": []
      }
    },
    "ml.orchestration.config.workflow_templates": {
      "path": "src/prompt_improver/ml/orchestration/config/workflow_templates.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          }
        ],
        "relative_from": [
          {
            "module": "core.workflow_types",
            "name": "WorkflowDefinition",
            "level": 2
          },
          {
            "module": "core.workflow_types",
            "name": "WorkflowStep",
            "level": 2
          }
        ]
      }
    },
    "ml.orchestration.integration.direct_component_loader": {
      "path": "src/prompt_improver/ml/orchestration/integration/direct_component_loader.py",
      "imports": {
        "absolute": [
          "importlib",
          "inspect",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Type"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "pathlib",
            "name": "Path"
          }
        ],
        "relative_from": [
          {
            "module": "core.component_registry",
            "name": "ComponentInfo",
            "level": 2
          },
          {
            "module": "core.component_registry",
            "name": "ComponentTier",
            "level": 2
          }
        ]
      }
    },
    "ml.orchestration.integration.component_invoker": {
      "path": "src/prompt_improver/ml/orchestration/integration/component_invoker.py",
      "imports": {
        "absolute": [
          "asyncio",
          "inspect",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          }
        ],
        "relative_from": [
          {
            "module": "direct_component_loader",
            "name": "DirectComponentLoader",
            "level": 1
          },
          {
            "module": "direct_component_loader",
            "name": "LoadedComponent",
            "level": 1
          },
          {
            "module": "core.unified_retry_manager",
            "name": "RetryConfig",
            "level": 2
          },
          {
            "module": "database",
            "name": "get_sessionmanager",
            "level": 3
          }
        ]
      }
    },
    "ml.orchestration.integration.__init__": {
      "path": "src/prompt_improver/ml/orchestration/integration/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "direct_component_loader",
            "name": "DirectComponentLoader",
            "level": 1
          },
          {
            "module": "component_invoker",
            "name": "ComponentInvoker",
            "level": 1
          }
        ]
      }
    },
    "ml.orchestration.k8s.resource_integration": {
      "path": "src/prompt_improver/ml/orchestration/k8s/resource_integration.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "kubernetes",
            "name": "client"
          },
          {
            "module": "kubernetes",
            "name": "config"
          },
          {
            "module": "kubernetes.client.rest",
            "name": "api_exception"
          }
        ],
        "relative_from": []
      }
    },
    "ml.orchestration.api.__init__": {
      "path": "src/prompt_improver/ml/orchestration/api/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "orchestrator_endpoints",
            "name": "OrchestratorEndpoints",
            "level": 1
          }
        ]
      }
    },
    "ml.orchestration.api.orchestrator_endpoints": {
      "path": "src/prompt_improver/ml/orchestration/api/orchestrator_endpoints.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "fastapi",
            "name": "APIRouter"
          },
          {
            "module": "fastapi",
            "name": "HTTPException"
          },
          {
            "module": "fastapi",
            "name": "Depends"
          },
          {
            "module": "fastapi",
            "name": "BackgroundTasks"
          },
          {
            "module": "pydantic",
            "name": "BaseModel"
          },
          {
            "module": "pydantic",
            "name": "Field"
          }
        ],
        "relative_from": [
          {
            "module": "events.event_types",
            "name": "EventType",
            "level": 2
          },
          {
            "module": "events.event_types",
            "name": "MLEvent",
            "level": 2
          }
        ]
      }
    },
    "ml.orchestration.monitoring.alert_manager": {
      "path": "src/prompt_improver/ml/orchestration/monitoring/alert_manager.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "json"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "asdict"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "enum",
            "name": "Enum"
          }
        ],
        "relative_from": [
          {
            "module": "events.event_types",
            "name": "EventType",
            "level": 2
          },
          {
            "module": "events.event_types",
            "name": "MLEvent",
            "level": 2
          }
        ]
      }
    },
    "ml.orchestration.monitoring.__init__": {
      "path": "src/prompt_improver/ml/orchestration/monitoring/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "orchestrator_monitor",
            "name": "OrchestratorMonitor",
            "level": 1
          },
          {
            "module": "component_health_monitor",
            "name": "ComponentHealthMonitor",
            "level": 1
          },
          {
            "module": "workflow_metrics_collector",
            "name": "WorkflowMetricsCollector",
            "level": 1
          },
          {
            "module": "pipeline_health_monitor",
            "name": "PipelineHealthMonitor",
            "level": 1
          },
          {
            "module": "alert_manager",
            "name": "AlertManager",
            "level": 1
          }
        ]
      }
    },
    "ml.orchestration.monitoring.pipeline_health_monitor": {
      "path": "src/prompt_improver/ml/orchestration/monitoring/pipeline_health_monitor.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "asdict"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "enum",
            "name": "Enum"
          }
        ],
        "relative_from": [
          {
            "module": "events.event_types",
            "name": "EventType",
            "level": 2
          },
          {
            "module": "events.event_types",
            "name": "MLEvent",
            "level": 2
          },
          {
            "module": "component_health_monitor",
            "name": "ComponentHealthStatus",
            "level": 1
          },
          {
            "module": "component_health_monitor",
            "name": "ComponentHealthMonitor",
            "level": 1
          },
          {
            "module": "orchestrator_monitor",
            "name": "HealthStatus",
            "level": 1
          },
          {
            "module": "orchestrator_monitor",
            "name": "OrchestratorMonitor",
            "level": 1
          }
        ]
      }
    },
    "ml.orchestration.monitoring.orchestrator_monitor": {
      "path": "src/prompt_improver/ml/orchestration/monitoring/orchestrator_monitor.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "psutil"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "asdict"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "enum",
            "name": "Enum"
          }
        ],
        "relative_from": [
          {
            "module": "events.event_types",
            "name": "EventType",
            "level": 2
          },
          {
            "module": "events.event_types",
            "name": "MLEvent",
            "level": 2
          }
        ]
      }
    },
    "ml.orchestration.monitoring.component_health_monitor": {
      "path": "src/prompt_improver/ml/orchestration/monitoring/component_health_monitor.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "asdict"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "enum",
            "name": "Enum"
          }
        ],
        "relative_from": [
          {
            "module": "events.event_types",
            "name": "EventType",
            "level": 2
          },
          {
            "module": "events.event_types",
            "name": "MLEvent",
            "level": 2
          },
          {
            "module": "connectors.component_connector",
            "name": "ComponentStatus",
            "level": 2
          }
        ]
      }
    },
    "ml.orchestration.monitoring.workflow_metrics_collector": {
      "path": "src/prompt_improver/ml/orchestration/monitoring/workflow_metrics_collector.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time",
          "json"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "asdict"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "enum",
            "name": "Enum"
          }
        ],
        "relative_from": [
          {
            "module": "events.event_types",
            "name": "EventType",
            "level": 2
          },
          {
            "module": "events.event_types",
            "name": "MLEvent",
            "level": 2
          }
        ]
      }
    },
    "ml.orchestration.events.__init__": {
      "path": "src/prompt_improver/ml/orchestration/events/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "event_bus",
            "name": "EventBus",
            "level": 1
          },
          {
            "module": "event_types",
            "name": "EventType",
            "level": 1
          },
          {
            "module": "event_types",
            "name": "MLEvent",
            "level": 1
          }
        ]
      }
    },
    "ml.orchestration.events.event_bus": {
      "path": "src/prompt_improver/ml/orchestration/events/event_bus.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "collections",
            "name": "defaultdict"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          }
        ],
        "relative_from": [
          {
            "module": "event_types",
            "name": "EventType",
            "level": 1
          },
          {
            "module": "event_types",
            "name": "MLEvent",
            "level": 1
          },
          {
            "module": "config.orchestrator_config",
            "name": "OrchestratorConfig",
            "level": 2
          }
        ]
      }
    },
    "ml.orchestration.events.adaptive_event_bus": {
      "path": "src/prompt_improver/ml/orchestration/events/adaptive_event_bus.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time",
          "statistics"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "collections",
            "name": "defaultdict"
          },
          {
            "module": "collections",
            "name": "deque"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "enum",
            "name": "Enum"
          }
        ],
        "relative_from": [
          {
            "module": "event_types",
            "name": "EventType",
            "level": 1
          },
          {
            "module": "event_types",
            "name": "MLEvent",
            "level": 1
          },
          {
            "module": "config.orchestrator_config",
            "name": "OrchestratorConfig",
            "level": 2
          }
        ]
      }
    },
    "ml.orchestration.events.event_types": {
      "path": "src/prompt_improver/ml/orchestration/events/event_types.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          }
        ],
        "relative_from": []
      }
    },
    "ml.orchestration.events.handlers.__init__": {
      "path": "src/prompt_improver/ml/orchestration/events/handlers/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "training_handler",
            "name": "TrainingEventHandler",
            "level": 1
          },
          {
            "module": "optimization_handler",
            "name": "OptimizationEventHandler",
            "level": 1
          },
          {
            "module": "evaluation_handler",
            "name": "EvaluationEventHandler",
            "level": 1
          },
          {
            "module": "deployment_handler",
            "name": "DeploymentEventHandler",
            "level": 1
          }
        ]
      }
    },
    "ml.orchestration.events.handlers.training_handler": {
      "path": "src/prompt_improver/ml/orchestration/events/handlers/training_handler.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          }
        ],
        "relative_from": [
          {
            "module": "event_types",
            "name": "EventType",
            "level": 2
          },
          {
            "module": "event_types",
            "name": "MLEvent",
            "level": 2
          }
        ]
      }
    },
    "ml.orchestration.events.handlers.database_handler": {
      "path": "src/prompt_improver/ml/orchestration/events/handlers/database_handler.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Optional"
          }
        ],
        "relative_from": [
          {
            "module": "event_types",
            "name": "EventType",
            "level": 2
          },
          {
            "module": "event_types",
            "name": "MLEvent",
            "level": 2
          }
        ]
      }
    },
    "ml.orchestration.events.handlers.optimization_handler": {
      "path": "src/prompt_improver/ml/orchestration/events/handlers/optimization_handler.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          }
        ],
        "relative_from": [
          {
            "module": "event_types",
            "name": "EventType",
            "level": 2
          },
          {
            "module": "event_types",
            "name": "MLEvent",
            "level": 2
          }
        ]
      }
    },
    "ml.orchestration.events.handlers.deployment_handler": {
      "path": "src/prompt_improver/ml/orchestration/events/handlers/deployment_handler.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          }
        ],
        "relative_from": [
          {
            "module": "event_types",
            "name": "EventType",
            "level": 2
          },
          {
            "module": "event_types",
            "name": "MLEvent",
            "level": 2
          }
        ]
      }
    },
    "ml.orchestration.events.handlers.evaluation_handler": {
      "path": "src/prompt_improver/ml/orchestration/events/handlers/evaluation_handler.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          }
        ],
        "relative_from": [
          {
            "module": "event_types",
            "name": "EventType",
            "level": 2
          },
          {
            "module": "event_types",
            "name": "MLEvent",
            "level": 2
          }
        ]
      }
    },
    "ml.orchestration.performance.telemetry": {
      "path": "src/prompt_improver/ml/orchestration/performance/telemetry.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time",
          "statistics",
          "json",
          "psutil"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "collections",
            "name": "defaultdict"
          },
          {
            "module": "collections",
            "name": "deque"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "enum",
            "name": "Enum"
          }
        ],
        "relative_from": []
      }
    },
    "ml.evaluation.__init__": {
      "path": "src/prompt_improver/ml/evaluation/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "statistical_analyzer",
            "name": "StatisticalAnalyzer",
            "level": 1
          },
          {
            "module": "statistical_analyzer",
            "name": "StatisticalConfig",
            "level": 1
          },
          {
            "module": "advanced_statistical_validator",
            "name": "AdvancedStatisticalValidator",
            "level": 1
          },
          {
            "module": "causal_inference_analyzer",
            "name": "CausalInferenceAnalyzer",
            "level": 1
          },
          {
            "module": "experiment_orchestrator",
            "name": "ExperimentOrchestrator",
            "level": 1
          },
          {
            "module": "pattern_significance_analyzer",
            "name": "PatternSignificanceAnalyzer",
            "level": 1
          },
          {
            "module": "structural_analyzer",
            "name": "StructuralAnalyzer",
            "level": 1
          }
        ]
      }
    },
    "ml.evaluation.pattern_significance_analyzer": {
      "path": "src/prompt_improver/ml/evaluation/pattern_significance_analyzer.py",
      "imports": {
        "absolute": [
          "logging",
          "warnings",
          "numpy",
          "pandas"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "collections",
            "name": "defaultdict"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "scipy",
            "name": "stats"
          },
          {
            "module": "scipy.stats",
            "name": "chi2_contingency"
          },
          {
            "module": "scipy.stats",
            "name": "fisher_exact"
          },
          {
            "module": "statsmodels.stats.contingency_tables",
            "name": "mcnemar"
          },
          {
            "module": "statsmodels.stats.proportion",
            "name": "proportions_ztest"
          },
          {
            "module": "statsmodels.stats.multitest",
            "name": "multipletests"
          }
        ],
        "relative_from": []
      }
    },
    "ml.evaluation.advanced_statistical_validator": {
      "path": "src/prompt_improver/ml/evaluation/advanced_statistical_validator.py",
      "imports": {
        "absolute": [
          "logging",
          "warnings",
          "numpy",
          "pandas"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "scipy",
            "name": "stats"
          },
          {
            "module": "scipy.stats",
            "name": "chi2_contingency"
          },
          {
            "module": "scipy.stats",
            "name": "kruskal"
          },
          {
            "module": "scipy.stats",
            "name": "mannwhitneyu"
          },
          {
            "module": "statsmodels.stats.multitest",
            "name": "multipletests"
          },
          {
            "module": "statsmodels.stats.power",
            "name": "ttest_power"
          },
          {
            "module": "statsmodels.stats.weightstats",
            "name": "ztest"
          }
        ],
        "relative_from": []
      }
    },
    "ml.evaluation.structural_analyzer": {
      "path": "src/prompt_improver/ml/evaluation/structural_analyzer.py",
      "imports": {
        "absolute": [
          "logging",
          "re",
          "warnings",
          "numpy",
          "networkx",
          "spacy",
          "torch"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "collections",
            "name": "defaultdict"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "sklearn.feature_extraction.text",
            "name": "TfidfVectorizer"
          },
          {
            "module": "sklearn.cluster",
            "name": "DBSCAN"
          },
          {
            "module": "sklearn.metrics.pairwise",
            "name": "cosine_similarity"
          },
          {
            "module": "transformers",
            "name": "AutoTokenizer"
          },
          {
            "module": "transformers",
            "name": "AutoModel"
          }
        ],
        "relative_from": []
      }
    },
    "ml.evaluation.causal_inference_analyzer": {
      "path": "src/prompt_improver/ml/evaluation/causal_inference_analyzer.py",
      "imports": {
        "absolute": [
          "logging",
          "numpy"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "scipy",
            "name": "stats"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          },
          {
            "module": "sklearn.linear_model",
            "name": "LogisticRegression"
          },
          {
            "module": "sklearn.linear_model",
            "name": "LogisticRegression"
          },
          {
            "module": "sklearn.neighbors",
            "name": "NearestNeighbors"
          },
          {
            "module": "sklearn.linear_model",
            "name": "LinearRegression"
          },
          {
            "module": "sklearn.linear_model",
            "name": "LogisticRegression"
          }
        ],
        "relative_from": [
          {
            "module": "core.training_data_loader",
            "name": "TrainingDataLoader",
            "level": 2
          }
        ]
      }
    },
    "ml.evaluation.statistical_analyzer": {
      "path": "src/prompt_improver/ml/evaluation/statistical_analyzer.py",
      "imports": {
        "absolute": [
          "json",
          "logging",
          "warnings",
          "numpy"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "scipy",
            "name": "stats"
          },
          {
            "module": "scipy.stats",
            "name": "normaltest"
          },
          {
            "module": "scipy.stats",
            "name": "pearsonr"
          },
          {
            "module": "scipy.stats",
            "name": "shapiro"
          },
          {
            "module": "scipy.stats",
            "name": "spearmanr"
          },
          {
            "module": "sklearn.metrics",
            "name": "cohen_kappa_score"
          },
          {
            "module": "sklearn.utils",
            "name": "resample"
          },
          {
            "module": "statsmodels.stats.multitest",
            "name": "multipletests"
          }
        ],
        "relative_from": []
      }
    },
    "ml.evaluation.experiment_orchestrator": {
      "path": "src/prompt_improver/ml/evaluation/experiment_orchestrator.py",
      "imports": {
        "absolute": [
          "asyncio",
          "json",
          "logging",
          "uuid",
          "numpy",
          "pandas",
          "random"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "collections.abc",
            "name": "Callable"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          },
          {
            "module": "prompt_improver.utils.datetime_utils",
            "name": "aware_utc_now"
          },
          {
            "module": "scipy",
            "name": "stats"
          },
          {
            "module": "sqlalchemy",
            "name": "and_"
          },
          {
            "module": "sqlalchemy",
            "name": "select"
          },
          {
            "module": "scipy",
            "name": "stats"
          },
          {
            "module": "sqlalchemy",
            "name": "select"
          },
          {
            "module": "sqlalchemy",
            "name": "update"
          },
          {
            "module": "sqlalchemy",
            "name": "select"
          },
          {
            "module": "sqlalchemy",
            "name": "update"
          }
        ],
        "relative_from": [
          {
            "module": "database.models",
            "name": "ABExperiment",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "RulePerformance",
            "level": 3
          },
          {
            "module": "core.services.analytics_factory",
            "name": "get_analytics_router",
            "level": 3
          },
          {
            "module": "advanced_statistical_validator",
            "name": "AdvancedStatisticalValidator",
            "level": 1
          },
          {
            "module": "advanced_statistical_validator",
            "name": "AdvancedValidationResult",
            "level": 1
          },
          {
            "module": "causal_inference_analyzer",
            "name": "CausalInferenceAnalyzer",
            "level": 1
          },
          {
            "module": "causal_inference_analyzer",
            "name": "CausalInferenceResult",
            "level": 1
          },
          {
            "module": "causal_inference_analyzer",
            "name": "CausalMethod",
            "level": 1
          },
          {
            "module": "pattern_significance_analyzer",
            "name": "PatternSignificanceAnalyzer",
            "level": 1
          },
          {
            "module": "pattern_significance_analyzer",
            "name": "PatternSignificanceReport",
            "level": 1
          },
          {
            "module": "advanced_statistical_validator",
            "name": "EffectSizeMagnitude",
            "level": 1
          },
          {
            "module": "advanced_statistical_validator",
            "name": "StatisticalTestResult",
            "level": 1
          },
          {
            "module": "performance.testing.ab_testing_service",
            "name": "ABTestingService",
            "level": 3
          }
        ]
      }
    },
    "ml.preprocessing.llm_transformer": {
      "path": "src/prompt_improver/ml/preprocessing/llm_transformer.py",
      "imports": {
        "absolute": [
          "json",
          "re",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Protocol"
          },
          {
            "module": "opentelemetry",
            "name": "trace"
          }
        ],
        "relative_from": [
          {
            "module": "core.ml_integration",
            "name": "get_ml_service",
            "level": 2
          },
          {
            "module": "models.model_manager",
            "name": "ModelManager",
            "level": 2
          },
          {
            "module": "models.model_manager",
            "name": "model_config",
            "level": 2
          }
        ]
      }
    },
    "ml.preprocessing.__init__": {
      "path": "src/prompt_improver/ml/preprocessing/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "llm_transformer",
            "name": "LLMTransformerService",
            "level": 1
          },
          {
            "module": "synthetic_data_generator",
            "name": "ProductionSyntheticDataGenerator",
            "level": 1
          }
        ]
      }
    },
    "ml.preprocessing.synthetic_data_generator": {
      "path": "src/prompt_improver/ml/preprocessing/synthetic_data_generator.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time",
          "warnings",
          "numpy",
          "torch",
          "torch.nn",
          "torch.optim",
          "tensorflow",
          "psutil",
          "psutil"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "sklearn.datasets",
            "name": "make_classification"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          },
          {
            "module": "torch.utils.data",
            "name": "DataLoader"
          },
          {
            "module": "torch.utils.data",
            "name": "TensorDataset"
          },
          {
            "module": "tensorflow",
            "name": "keras"
          },
          {
            "module": "sklearn.datasets",
            "name": "make_classification"
          },
          {
            "module": "scipy.spatial.distance",
            "name": "pdist"
          },
          {
            "module": "sklearn.preprocessing",
            "name": "StandardScaler"
          },
          {
            "module": "sklearn.preprocessing",
            "name": "StandardScaler"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          },
          {
            "module": "sklearn.decomposition",
            "name": "PCA"
          },
          {
            "module": "sklearn.preprocessing",
            "name": "StandardScaler"
          }
        ],
        "relative_from": [
          {
            "module": "database.models",
            "name": "TrainingPrompt",
            "level": 3
          },
          {
            "module": "learning.quality.enhanced_scorer",
            "name": "EnhancedQualityMetrics",
            "level": 2
          },
          {
            "module": "learning.quality.enhanced_scorer",
            "name": "EnhancedQualityScorer",
            "level": 2
          },
          {
            "module": "optimization.batch.dynamic_batch_optimizer",
            "name": "DynamicBatchOptimizer",
            "level": 2
          },
          {
            "module": "optimization.batch.dynamic_batch_optimizer",
            "name": "BatchOptimizationConfig",
            "level": 2
          },
          {
            "module": "analytics.generation_analytics",
            "name": "GenerationHistoryTracker",
            "level": 2
          },
          {
            "module": "analytics.generation_analytics",
            "name": "GenerationAnalytics",
            "level": 2
          }
        ]
      }
    },
    "ml.analytics.session_summary_reporter": {
      "path": "src/prompt_improver/ml/analytics/session_summary_reporter.py",
      "imports": {
        "absolute": [
          "logging",
          "json",
          "asyncio",
          "csv"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "asdict"
          },
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "rich.console",
            "name": "Console"
          },
          {
            "module": "rich.table",
            "name": "Table"
          },
          {
            "module": "rich.panel",
            "name": "Panel"
          },
          {
            "module": "rich.progress",
            "name": "Progress"
          },
          {
            "module": "rich.progress",
            "name": "SpinnerColumn"
          },
          {
            "module": "rich.progress",
            "name": "TextColumn"
          },
          {
            "module": "rich.progress",
            "name": "BarColumn"
          },
          {
            "module": "rich.progress",
            "name": "TimeElapsedColumn"
          },
          {
            "module": "rich.text",
            "name": "Text"
          },
          {
            "module": "rich.layout",
            "name": "Layout"
          },
          {
            "module": "rich.columns",
            "name": "Columns"
          },
          {
            "module": "rich.tree",
            "name": "Tree"
          },
          {
            "module": "rich.markdown",
            "name": "Markdown"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          },
          {
            "module": "sqlalchemy",
            "name": "select"
          },
          {
            "module": "sqlalchemy",
            "name": "and_"
          },
          {
            "module": "sqlalchemy",
            "name": "desc"
          },
          {
            "module": "sqlalchemy",
            "name": "func"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          },
          {
            "module": "sqlalchemy.orm",
            "name": "selectinload"
          }
        ],
        "relative_from": [
          {
            "module": "database.models",
            "name": "TrainingSession",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "TrainingIteration",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "GenerationSession",
            "level": 3
          },
          {
            "module": "performance_improvement_calculator",
            "name": "PerformanceImprovementCalculator",
            "level": 1
          },
          {
            "module": "utils.datetime_utils",
            "name": "naive_utc_now",
            "level": 3
          }
        ]
      }
    },
    "ml.analytics.generation_analytics": {
      "path": "src/prompt_improver/ml/analytics/generation_analytics.py",
      "imports": {
        "absolute": [
          "logging",
          "numpy"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          }
        ],
        "relative_from": [
          {
            "module": "database.services.generation_service",
            "name": "GenerationDatabaseService",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "GenerationSession",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "GenerationBatch",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "GenerationMethodPerformance",
            "level": 3
          }
        ]
      }
    },
    "ml.analytics.performance_improvement_calculator": {
      "path": "src/prompt_improver/ml/analytics/performance_improvement_calculator.py",
      "imports": {
        "absolute": [
          "logging",
          "numpy"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "scipy",
            "name": "stats"
          },
          {
            "module": "scipy.stats",
            "name": "pearsonr"
          },
          {
            "module": "scipy.stats",
            "name": "spearmanr"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          },
          {
            "module": "sqlalchemy",
            "name": "select"
          },
          {
            "module": "sqlalchemy",
            "name": "and_"
          },
          {
            "module": "sqlalchemy",
            "name": "desc"
          }
        ],
        "relative_from": [
          {
            "module": "database.models",
            "name": "TrainingSession",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "TrainingIteration",
            "level": 3
          },
          {
            "module": "utils.datetime_utils",
            "name": "naive_utc_now",
            "level": 3
          }
        ]
      }
    },
    "ml.analytics.session_comparison_analyzer": {
      "path": "src/prompt_improver/ml/analytics/session_comparison_analyzer.py",
      "imports": {
        "absolute": [
          "logging",
          "asyncio",
          "numpy"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "asdict"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "scipy",
            "name": "stats"
          },
          {
            "module": "scipy.stats",
            "name": "pearsonr"
          },
          {
            "module": "scipy.stats",
            "name": "spearmanr"
          },
          {
            "module": "scipy.stats",
            "name": "ttest_ind"
          },
          {
            "module": "scipy.stats",
            "name": "mannwhitneyu"
          },
          {
            "module": "sklearn.cluster",
            "name": "KMeans"
          },
          {
            "module": "sklearn.preprocessing",
            "name": "StandardScaler"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          },
          {
            "module": "sqlalchemy",
            "name": "select"
          },
          {
            "module": "sqlalchemy",
            "name": "and_"
          },
          {
            "module": "sqlalchemy",
            "name": "desc"
          },
          {
            "module": "sqlalchemy",
            "name": "func"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          },
          {
            "module": "sqlalchemy.orm",
            "name": "selectinload"
          }
        ],
        "relative_from": [
          {
            "module": "database.models",
            "name": "TrainingSession",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "TrainingIteration",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "GenerationSession",
            "level": 3
          },
          {
            "module": "performance_improvement_calculator",
            "name": "PerformanceImprovementCalculator",
            "level": 1
          },
          {
            "module": "session_summary_reporter",
            "name": "SessionSummaryReporter",
            "level": 1
          },
          {
            "module": "session_summary_reporter",
            "name": "SessionSummary",
            "level": 1
          },
          {
            "module": "utils.datetime_utils",
            "name": "naive_utc_now",
            "level": 3
          }
        ]
      }
    },
    "api.real_time_endpoints": {
      "path": "src/prompt_improver/api/real_time_endpoints.py",
      "imports": {
        "absolute": [
          "logging",
          "coredis",
          "json"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "typing",
            "name": "Annotated"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "fastapi",
            "name": "APIRouter"
          },
          {
            "module": "fastapi",
            "name": "Depends"
          },
          {
            "module": "fastapi",
            "name": "HTTPException"
          },
          {
            "module": "fastapi",
            "name": "WebSocket"
          },
          {
            "module": "fastapi",
            "name": "WebSocketDisconnect"
          },
          {
            "module": "fastapi",
            "name": "status"
          },
          {
            "module": "fastapi.responses",
            "name": "JSONResponse"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          },
          {
            "module": "sqlmodel",
            "name": "select"
          }
        ],
        "relative_from": [
          {
            "module": "database",
            "name": "get_session",
            "level": 2
          },
          {
            "module": "database.models",
            "name": "ABExperiment",
            "level": 2
          },
          {
            "module": "core.services.analytics_factory",
            "name": "get_analytics_router",
            "level": 2
          },
          {
            "module": "utils.error_handlers",
            "name": "handle_database_errors",
            "level": 2
          },
          {
            "module": "utils.websocket_manager",
            "name": "connection_manager",
            "level": 2
          },
          {
            "module": "utils.websocket_manager",
            "name": "setup_redis_connection",
            "level": 2
          },
          {
            "module": "ml.orchestration.core.ml_pipeline_orchestrator",
            "name": "MLPipelineOrchestrator",
            "level": 2
          },
          {
            "module": "ml.orchestration.config.orchestrator_config",
            "name": "OrchestratorConfig",
            "level": 2
          },
          {
            "module": "ml.orchestration.core.ml_pipeline_orchestrator",
            "name": "MLPipelineOrchestrator",
            "level": 2
          },
          {
            "module": "ml.orchestration.config.orchestrator_config",
            "name": "OrchestratorConfig",
            "level": 2
          },
          {
            "module": "ml.orchestration.core.ml_pipeline_orchestrator",
            "name": "MLPipelineOrchestrator",
            "level": 2
          },
          {
            "module": "ml.orchestration.config.orchestrator_config",
            "name": "OrchestratorConfig",
            "level": 2
          }
        ]
      }
    },
    "api.health": {
      "path": "src/prompt_improver/api/health.py",
      "imports": {
        "error": "unexpected character after line continuation character (<unknown>, line 1372)"
      }
    },
    "api.analytics_endpoints": {
      "path": "src/prompt_improver/api/analytics_endpoints.py",
      "imports": {
        "absolute": [
          "logging",
          "asyncio"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "fastapi",
            "name": "APIRouter"
          },
          {
            "module": "fastapi",
            "name": "HTTPException"
          },
          {
            "module": "fastapi",
            "name": "Depends"
          },
          {
            "module": "fastapi",
            "name": "Query"
          },
          {
            "module": "fastapi",
            "name": "WebSocket"
          },
          {
            "module": "fastapi",
            "name": "WebSocketDisconnect"
          },
          {
            "module": "fastapi",
            "name": "BackgroundTasks"
          },
          {
            "module": "fastapi.responses",
            "name": "JSONResponse"
          },
          {
            "module": "fastapi.responses",
            "name": "HTMLResponse"
          },
          {
            "module": "fastapi.security",
            "name": "HTTPBearer"
          },
          {
            "module": "fastapi.security",
            "name": "HTTPAuthorizationCredentials"
          },
          {
            "module": "pydantic",
            "name": "BaseModel"
          },
          {
            "module": "pydantic",
            "name": "Field"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          }
        ],
        "relative_from": [
          {
            "module": "database",
            "name": "get_session",
            "level": 2
          },
          {
            "module": "database.analytics_query_interface",
            "name": "AnalyticsQueryInterface",
            "level": 2
          },
          {
            "module": "database.analytics_query_interface",
            "name": "TimeGranularity",
            "level": 2
          },
          {
            "module": "database.analytics_query_interface",
            "name": "MetricType",
            "level": 2
          },
          {
            "module": "database.analytics_query_interface",
            "name": "TrendAnalysisResult",
            "level": 2
          },
          {
            "module": "database.analytics_query_interface",
            "name": "AnalyticsQueryResult",
            "level": 2
          },
          {
            "module": "ml.analytics.session_summary_reporter",
            "name": "SessionSummaryReporter",
            "level": 2
          },
          {
            "module": "ml.analytics.session_summary_reporter",
            "name": "UserRole",
            "level": 2
          },
          {
            "module": "ml.analytics.session_summary_reporter",
            "name": "ReportFormat",
            "level": 2
          },
          {
            "module": "ml.analytics.session_comparison_analyzer",
            "name": "SessionComparisonAnalyzer",
            "level": 2
          },
          {
            "module": "ml.analytics.session_comparison_analyzer",
            "name": "ComparisonDimension",
            "level": 2
          },
          {
            "module": "ml.analytics.session_comparison_analyzer",
            "name": "ComparisonMethod",
            "level": 2
          },
          {
            "module": "utils.websocket_manager",
            "name": "connection_manager",
            "level": 2
          },
          {
            "module": "utils.error_handlers",
            "name": "handle_database_errors",
            "level": 2
          }
        ]
      }
    },
    "api.apriori_endpoints": {
      "path": "src/prompt_improver/api/apriori_endpoints.py",
      "imports": {
        "absolute": [
          "logging",
          "uuid",
          "os",
          "os"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "typing",
            "name": "Annotated"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "fastapi",
            "name": "APIRouter"
          },
          {
            "module": "fastapi",
            "name": "Depends"
          },
          {
            "module": "fastapi",
            "name": "HTTPException"
          },
          {
            "module": "fastapi",
            "name": "status"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          },
          {
            "module": "sqlalchemy",
            "name": "and_"
          },
          {
            "module": "sqlalchemy",
            "name": "select"
          },
          {
            "module": "sqlalchemy",
            "name": "select"
          },
          {
            "module": "sqlalchemy",
            "name": "select"
          }
        ],
        "relative_from": [
          {
            "module": "database",
            "name": "get_session",
            "level": 2
          },
          {
            "module": "database.connection",
            "name": "DatabaseManager",
            "level": 2
          },
          {
            "module": "database.models",
            "name": "AprioriAnalysisRequest",
            "level": 2
          },
          {
            "module": "database.models",
            "name": "AprioriAnalysisResponse",
            "level": 2
          },
          {
            "module": "database.models",
            "name": "AprioriAssociationRule",
            "level": 2
          },
          {
            "module": "database.models",
            "name": "AprioriPatternDiscovery",
            "level": 2
          },
          {
            "module": "database.models",
            "name": "PatternDiscoveryRequest",
            "level": 2
          },
          {
            "module": "database.models",
            "name": "PatternDiscoveryResponse",
            "level": 2
          },
          {
            "module": "ml.learning.patterns.advanced_pattern_discovery",
            "name": "AdvancedPatternDiscovery",
            "level": 2
          },
          {
            "module": "ml.learning.patterns.apriori_analyzer",
            "name": "AprioriAnalyzer",
            "level": 2
          },
          {
            "module": "ml.learning.patterns.apriori_analyzer",
            "name": "AprioriConfig",
            "level": 2
          },
          {
            "module": "ml.core.ml_integration",
            "name": "MLModelService",
            "level": 2
          },
          {
            "module": "ml.core.ml_integration",
            "name": "get_ml_service",
            "level": 2
          },
          {
            "module": "database.config",
            "name": "get_database_config",
            "level": 2
          },
          {
            "module": "database.config",
            "name": "get_database_config",
            "level": 2
          },
          {
            "module": "database.models",
            "name": "AdvancedPatternResults",
            "level": 2
          }
        ]
      }
    },
    "api.__init__": {
      "path": "src/prompt_improver/api/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [
          {
            "module": "fastapi",
            "name": "APIRouter"
          }
        ],
        "relative_from": [
          {
            "module": "apriori_endpoints",
            "name": "apriori_router",
            "level": 1
          },
          {
            "module": "real_time_endpoints",
            "name": "real_time_router",
            "level": 1
          },
          {
            "module": "analytics_endpoints",
            "name": "analytics_router",
            "level": 1
          }
        ]
      }
    },
    "rule_engine.prompt_analyzer": {
      "path": "src/prompt_improver/rule_engine/prompt_analyzer.py",
      "imports": {
        "absolute": [
          "re",
          "logging",
          "textstat"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "dataclasses",
            "name": "asdict"
          },
          {
            "module": "transformers",
            "name": "pipeline"
          }
        ],
        "relative_from": [
          {
            "module": "intelligent_rule_selector",
            "name": "PromptCharacteristics",
            "level": 1
          }
        ]
      }
    },
    "rule_engine.__init__": {
      "path": "src/prompt_improver/rule_engine/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "typing",
            "name": "Any"
          }
        ],
        "relative_from": [
          {
            "module": "base",
            "name": "BasePromptRule",
            "level": 1
          },
          {
            "module": "rules.chain_of_thought",
            "name": "ChainOfThoughtRule",
            "level": 1
          },
          {
            "module": "rules.clarity",
            "name": "ClarityRule",
            "level": 1
          },
          {
            "module": "rules.few_shot_examples",
            "name": "FewShotExampleRule",
            "level": 1
          },
          {
            "module": "rules.role_based_prompting",
            "name": "RoleBasedPromptingRule",
            "level": 1
          },
          {
            "module": "rules.specificity",
            "name": "SpecificityRule",
            "level": 1
          },
          {
            "module": "rules.xml_structure_enhancement",
            "name": "XMLStructureRule",
            "level": 1
          }
        ]
      }
    },
    "rule_engine.intelligent_rule_selector": {
      "path": "src/prompt_improver/rule_engine/intelligent_rule_selector.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time",
          "asyncpg"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          },
          {
            "module": "prompt_improver.utils.multi_level_cache",
            "name": "get_cache"
          },
          {
            "module": "prompt_improver.ml.learning.patterns.advanced_pattern_discovery",
            "name": "AdvancedPatternDiscovery"
          },
          {
            "module": "prompt_improver.ml.optimization.algorithms.rule_optimizer",
            "name": "RuleOptimizer"
          },
          {
            "module": "prompt_improver.ml.analytics.performance_improvement_calculator",
            "name": "PerformanceImprovementCalculator"
          }
        ],
        "relative_from": []
      }
    },
    "rule_engine.rule_cache": {
      "path": "src/prompt_improver/rule_engine/rule_cache.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time",
          "json",
          "coredis"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "asdict"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "coredis",
            "name": "Redis"
          },
          {
            "module": "prompt_improver.utils.multi_level_cache",
            "name": "get_cache"
          }
        ],
        "relative_from": [
          {
            "module": "intelligent_rule_selector",
            "name": "RuleScore",
            "level": 1
          },
          {
            "module": "intelligent_rule_selector",
            "name": "PromptCharacteristics",
            "level": 1
          }
        ]
      }
    },
    "rule_engine.rule_combination_optimizer": {
      "path": "src/prompt_improver/rule_engine/rule_combination_optimizer.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "itertools",
            "name": "combinations"
          },
          {
            "module": "statistics",
            "name": "mean"
          },
          {
            "module": "statistics",
            "name": "stdev"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          }
        ],
        "relative_from": [
          {
            "module": "intelligent_rule_selector",
            "name": "RuleScore",
            "level": 1
          },
          {
            "module": "intelligent_rule_selector",
            "name": "PromptCharacteristics",
            "level": 1
          }
        ]
      }
    },
    "rule_engine.base": {
      "path": "src/prompt_improver/rule_engine/base.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [
          {
            "module": "abc",
            "name": "ABC"
          },
          {
            "module": "abc",
            "name": "abstractmethod"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "NamedTuple"
          }
        ],
        "relative_from": []
      }
    },
    "rule_engine.rules.clarity": {
      "path": "src/prompt_improver/rule_engine/rules/clarity.py",
      "imports": {
        "absolute": [
          "asyncio",
          "re",
          "string"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          }
        ],
        "relative_from": [
          {
            "module": "ml.preprocessing.llm_transformer",
            "name": "LLMTransformerService",
            "level": 3
          },
          {
            "module": "base",
            "name": "BasePromptRule",
            "level": 2
          },
          {
            "module": "base",
            "name": "RuleCheckResult",
            "level": 2
          },
          {
            "module": "base",
            "name": "TransformationResult",
            "level": 2
          }
        ]
      }
    },
    "rule_engine.rules.specificity": {
      "path": "src/prompt_improver/rule_engine/rules/specificity.py",
      "imports": {
        "absolute": [
          "asyncio",
          "re"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Tuple"
          }
        ],
        "relative_from": [
          {
            "module": "ml.preprocessing.llm_transformer",
            "name": "LLMTransformerService",
            "level": 3
          },
          {
            "module": "base",
            "name": "BasePromptRule",
            "level": 2
          },
          {
            "module": "base",
            "name": "RuleCheckResult",
            "level": 2
          },
          {
            "module": "base",
            "name": "TransformationResult",
            "level": 2
          }
        ]
      }
    },
    "rule_engine.rules.role_based_prompting": {
      "path": "src/prompt_improver/rule_engine/rules/role_based_prompting.py",
      "imports": {
        "absolute": [
          "re"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          }
        ],
        "relative_from": [
          {
            "module": "base",
            "name": "BasePromptRule",
            "level": 2
          },
          {
            "module": "base",
            "name": "RuleCheckResult",
            "level": 2
          },
          {
            "module": "base",
            "name": "TransformationResult",
            "level": 2
          }
        ]
      }
    },
    "rule_engine.rules.chain_of_thought": {
      "path": "src/prompt_improver/rule_engine/rules/chain_of_thought.py",
      "imports": {
        "absolute": [
          "re"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Tuple"
          }
        ],
        "relative_from": [
          {
            "module": "base",
            "name": "BasePromptRule",
            "level": 2
          },
          {
            "module": "base",
            "name": "RuleCheckResult",
            "level": 2
          },
          {
            "module": "base",
            "name": "TransformationResult",
            "level": 2
          }
        ]
      }
    },
    "rule_engine.rules.__init__": {
      "path": "src/prompt_improver/rule_engine/rules/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "chain_of_thought",
            "name": "ChainOfThoughtRule",
            "level": 1
          },
          {
            "module": "clarity",
            "name": "ClarityRule",
            "level": 1
          },
          {
            "module": "few_shot_examples",
            "name": "FewShotExampleRule",
            "level": 1
          },
          {
            "module": "linguistic_quality_rule",
            "name": "LinguisticQualityRule",
            "level": 1
          },
          {
            "module": "role_based_prompting",
            "name": "RoleBasedPromptingRule",
            "level": 1
          },
          {
            "module": "specificity",
            "name": "SpecificityRule",
            "level": 1
          },
          {
            "module": "xml_structure_enhancement",
            "name": "XMLStructureRule",
            "level": 1
          }
        ]
      }
    },
    "rule_engine.rules.xml_structure_enhancement": {
      "path": "src/prompt_improver/rule_engine/rules/xml_structure_enhancement.py",
      "imports": {
        "absolute": [
          "re"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Tuple"
          }
        ],
        "relative_from": [
          {
            "module": "base",
            "name": "BasePromptRule",
            "level": 2
          },
          {
            "module": "base",
            "name": "RuleCheckResult",
            "level": 2
          },
          {
            "module": "base",
            "name": "TransformationResult",
            "level": 2
          }
        ]
      }
    },
    "rule_engine.rules.few_shot_examples": {
      "path": "src/prompt_improver/rule_engine/rules/few_shot_examples.py",
      "imports": {
        "absolute": [
          "random",
          "re"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Tuple"
          }
        ],
        "relative_from": [
          {
            "module": "base",
            "name": "BasePromptRule",
            "level": 2
          },
          {
            "module": "base",
            "name": "RuleCheckResult",
            "level": 2
          },
          {
            "module": "base",
            "name": "TransformationResult",
            "level": 2
          }
        ]
      }
    },
    "rule_engine.rules.linguistic_quality_rule": {
      "path": "src/prompt_improver/rule_engine/rules/linguistic_quality_rule.py",
      "imports": {
        "absolute": [
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          }
        ],
        "relative_from": [
          {
            "module": "ml.analysis.linguistic_analyzer",
            "name": "LinguisticAnalyzer",
            "level": 3
          },
          {
            "module": "ml.analysis.linguistic_analyzer",
            "name": "LinguisticConfig",
            "level": 3
          },
          {
            "module": "base",
            "name": "BasePromptRule",
            "level": 2
          },
          {
            "module": "base",
            "name": "RuleCheckResult",
            "level": 2
          },
          {
            "module": "base",
            "name": "TransformationResult",
            "level": 2
          }
        ]
      }
    },
    "monitoring.external_api_health": {
      "path": "src/prompt_improver/monitoring/external_api_health.py",
      "imports": {
        "absolute": [
          "asyncio",
          "json",
          "ssl",
          "socket",
          "time",
          "logging",
          "aiohttp",
          "dns.resolver",
          "dns.exception"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "dataclasses",
            "name": "asdict"
          },
          {
            "module": "collections",
            "name": "deque"
          },
          {
            "module": "urllib.parse",
            "name": "urlparse"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "cryptography",
            "name": "x509"
          },
          {
            "module": "cryptography.x509.oid",
            "name": "NameOID"
          }
        ],
        "relative_from": [
          {
            "module": "core.config",
            "name": "get_config",
            "level": 2
          },
          {
            "module": "performance.monitoring.health.circuit_breaker",
            "name": "CircuitBreaker",
            "level": 2
          },
          {
            "module": "performance.monitoring.health.circuit_breaker",
            "name": "CircuitBreakerConfig",
            "level": 2
          },
          {
            "module": "performance.monitoring.health.circuit_breaker",
            "name": "circuit_breaker_registry",
            "level": 2
          },
          {
            "module": "utils.redis_cache",
            "name": "redis_client",
            "level": 2
          }
        ]
      }
    },
    "monitoring.__init__": {
      "path": "src/prompt_improver/monitoring/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "external_api_health",
            "name": "ExternalAPIHealthMonitor",
            "level": 1
          },
          {
            "module": "external_api_health",
            "name": "APIEndpoint",
            "level": 1
          },
          {
            "module": "external_api_health",
            "name": "APIStatus",
            "level": 1
          },
          {
            "module": "external_api_health",
            "name": "SLACompliance",
            "level": 1
          },
          {
            "module": "external_api_health",
            "name": "APIHealthSnapshot",
            "level": 1
          },
          {
            "module": "external_api_health",
            "name": "ResponseMetrics",
            "level": 1
          },
          {
            "module": "external_api_health",
            "name": "DNSMetrics",
            "level": 1
          },
          {
            "module": "external_api_health",
            "name": "SSLMetrics",
            "level": 1
          }
        ]
      }
    },
    "monitoring.health_orchestrator": {
      "path": "src/prompt_improver/monitoring/health_orchestrator.py",
      "imports": {
        "absolute": [
          "asyncio",
          "json",
          "logging",
          "time",
          "statistics",
          "prometheus_client",
          "psutil"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "collections",
            "name": "defaultdict"
          },
          {
            "module": "collections",
            "name": "deque"
          },
          {
            "module": "prometheus_client",
            "name": "Counter"
          },
          {
            "module": "prometheus_client",
            "name": "Histogram"
          },
          {
            "module": "prometheus_client",
            "name": "Gauge"
          },
          {
            "module": "prometheus_client",
            "name": "Summary"
          },
          {
            "module": "prometheus_client",
            "name": "CollectorRegistry"
          },
          {
            "module": "prometheus_client",
            "name": "generate_latest"
          }
        ],
        "relative_from": [
          {
            "module": "performance.monitoring.health.service",
            "name": "EnhancedHealthService",
            "level": 2
          },
          {
            "module": "performance.monitoring.health.service",
            "name": "get_health_service",
            "level": 2
          },
          {
            "module": "performance.monitoring.health.circuit_breaker",
            "name": "CircuitBreaker",
            "level": 2
          },
          {
            "module": "performance.monitoring.health.circuit_breaker",
            "name": "CircuitBreakerConfig",
            "level": 2
          },
          {
            "module": "performance.monitoring.health.circuit_breaker",
            "name": "circuit_breaker_registry",
            "level": 2
          },
          {
            "module": "ml.health.integration_manager",
            "name": "get_ml_health_integration_manager",
            "level": 2
          },
          {
            "module": "external_api_health",
            "name": "ExternalAPIHealthMonitor",
            "level": 1
          },
          {
            "module": "cache.redis_health",
            "name": "RedisHealthMonitor",
            "level": 2
          },
          {
            "module": "cache.redis_health",
            "name": "get_redis_health_summary",
            "level": 2
          },
          {
            "module": "database.health.database_health_monitor",
            "name": "get_database_health_monitor",
            "level": 2
          },
          {
            "module": "core.config",
            "name": "get_config",
            "level": 2
          }
        ]
      }
    },
    "monitoring.opentelemetry.metrics": {
      "path": "src/prompt_improver/monitoring/opentelemetry/metrics.py",
      "imports": {
        "absolute": [
          "time",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "contextlib",
            "name": "contextmanager"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "opentelemetry",
            "name": "metrics"
          },
          {
            "module": "opentelemetry.metrics",
            "name": "Counter"
          },
          {
            "module": "opentelemetry.metrics",
            "name": "Histogram"
          },
          {
            "module": "opentelemetry.metrics",
            "name": "Gauge"
          },
          {
            "module": "opentelemetry.metrics",
            "name": "ObservableCounter"
          },
          {
            "module": "opentelemetry.metrics",
            "name": "ObservableGauge"
          },
          {
            "module": "opentelemetry.metrics",
            "name": "ObservableUpDownCounter"
          },
          {
            "module": "opentelemetry.metrics",
            "name": "UpDownCounter"
          }
        ],
        "relative_from": [
          {
            "module": "setup",
            "name": "get_meter",
            "level": 1
          }
        ]
      }
    },
    "monitoring.opentelemetry.tracing": {
      "path": "src/prompt_improver/monitoring/opentelemetry/tracing.py",
      "imports": {
        "absolute": [
          "asyncio",
          "functools",
          "inspect",
          "logging",
          "time"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "contextlib",
            "name": "asynccontextmanager"
          },
          {
            "module": "contextlib",
            "name": "contextmanager"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Awaitable"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "TypeVar"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "typing",
            "name": "ParamSpec"
          },
          {
            "module": "typing",
            "name": "Concatenate"
          },
          {
            "module": "typing",
            "name": "overload"
          },
          {
            "module": "opentelemetry",
            "name": "trace"
          },
          {
            "module": "opentelemetry.trace",
            "name": "Status"
          },
          {
            "module": "opentelemetry.trace",
            "name": "StatusCode"
          },
          {
            "module": "opentelemetry.trace",
            "name": "Span"
          },
          {
            "module": "opentelemetry.trace.propagation.tracecontext",
            "name": "TraceContextTextMapPropagator"
          },
          {
            "module": "opentelemetry.baggage.propagation",
            "name": "W3CBaggagePropagator"
          },
          {
            "module": "opentelemetry.propagators.composite",
            "name": "CompositePropagator"
          },
          {
            "module": "opentelemetry.context",
            "name": "attach"
          },
          {
            "module": "opentelemetry.context",
            "name": "detach"
          },
          {
            "module": "opentelemetry.context",
            "name": "get_current"
          }
        ],
        "relative_from": [
          {
            "module": "setup",
            "name": "get_tracer",
            "level": 1
          }
        ]
      }
    },
    "monitoring.opentelemetry.instrumentation": {
      "path": "src/prompt_improver/monitoring/opentelemetry/instrumentation.py",
      "imports": {
        "absolute": [
          "asyncio",
          "functools",
          "logging",
          "time"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "contextlib",
            "name": "asynccontextmanager"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "TypeVar"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "typing",
            "name": "Awaitable"
          },
          {
            "module": "opentelemetry",
            "name": "trace"
          },
          {
            "module": "opentelemetry.trace",
            "name": "SpanKind"
          },
          {
            "module": "opentelemetry.trace",
            "name": "Status"
          },
          {
            "module": "opentelemetry.trace",
            "name": "StatusCode"
          },
          {
            "module": "opentelemetry.instrumentation.asyncpg",
            "name": "AsyncPGInstrumentor"
          },
          {
            "module": "opentelemetry.instrumentation.httpx",
            "name": "HTTPXClientInstrumentor"
          },
          {
            "module": "opentelemetry.instrumentation.requests",
            "name": "RequestsInstrumentor"
          },
          {
            "module": "opentelemetry.instrumentation.fastapi",
            "name": "FastAPIInstrumentor"
          },
          {
            "module": "opentelemetry.instrumentation.redis",
            "name": "RedisInstrumentor"
          }
        ],
        "relative_from": [
          {
            "module": "setup",
            "name": "get_tracer",
            "level": 1
          },
          {
            "module": "metrics",
            "name": "get_http_metrics",
            "level": 1
          },
          {
            "module": "metrics",
            "name": "get_database_metrics",
            "level": 1
          },
          {
            "module": "metrics",
            "name": "get_ml_metrics",
            "level": 1
          },
          {
            "module": "tracing",
            "name": "SpanAttributes",
            "level": 1
          },
          {
            "module": "tracing",
            "name": "add_span_attributes",
            "level": 1
          }
        ]
      }
    },
    "monitoring.opentelemetry.__init__": {
      "path": "src/prompt_improver/monitoring/opentelemetry/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "setup",
            "name": "init_telemetry",
            "level": 1
          },
          {
            "module": "setup",
            "name": "get_tracer",
            "level": 1
          },
          {
            "module": "setup",
            "name": "get_meter",
            "level": 1
          },
          {
            "module": "setup",
            "name": "shutdown_telemetry",
            "level": 1
          },
          {
            "module": "setup",
            "name": "TelemetryConfig",
            "level": 1
          },
          {
            "module": "instrumentation",
            "name": "instrument_http",
            "level": 1
          },
          {
            "module": "instrumentation",
            "name": "instrument_database",
            "level": 1
          },
          {
            "module": "instrumentation",
            "name": "instrument_redis",
            "level": 1
          },
          {
            "module": "instrumentation",
            "name": "instrument_ml_pipeline",
            "level": 1
          },
          {
            "module": "instrumentation",
            "name": "instrument_external_apis",
            "level": 1
          },
          {
            "module": "instrumentation",
            "name": "trace_ml_operation",
            "level": 1
          },
          {
            "module": "instrumentation",
            "name": "trace_database_operation",
            "level": 1
          },
          {
            "module": "instrumentation",
            "name": "trace_cache_operation",
            "level": 1
          },
          {
            "module": "instrumentation",
            "name": "trace_business_operation",
            "level": 1
          },
          {
            "module": "instrumentation",
            "name": "instrument_fastapi_app",
            "level": 1
          },
          {
            "module": "metrics",
            "name": "HttpMetrics",
            "level": 1
          },
          {
            "module": "metrics",
            "name": "DatabaseMetrics",
            "level": 1
          },
          {
            "module": "metrics",
            "name": "MLMetrics",
            "level": 1
          },
          {
            "module": "metrics",
            "name": "BusinessMetrics",
            "level": 1
          },
          {
            "module": "metrics",
            "name": "record_counter",
            "level": 1
          },
          {
            "module": "metrics",
            "name": "record_histogram",
            "level": 1
          },
          {
            "module": "metrics",
            "name": "record_gauge",
            "level": 1
          },
          {
            "module": "tracing",
            "name": "trace_async",
            "level": 1
          },
          {
            "module": "tracing",
            "name": "trace_sync",
            "level": 1
          },
          {
            "module": "tracing",
            "name": "add_span_attributes",
            "level": 1
          },
          {
            "module": "tracing",
            "name": "record_exception",
            "level": 1
          },
          {
            "module": "tracing",
            "name": "create_span_link",
            "level": 1
          },
          {
            "module": "context",
            "name": "get_correlation_id",
            "level": 1
          },
          {
            "module": "context",
            "name": "set_correlation_id",
            "level": 1
          },
          {
            "module": "context",
            "name": "propagate_context",
            "level": 1
          },
          {
            "module": "context",
            "name": "inject_context",
            "level": 1
          },
          {
            "module": "context",
            "name": "extract_context",
            "level": 1
          },
          {
            "module": "context",
            "name": "get_request_id",
            "level": 1
          },
          {
            "module": "context",
            "name": "set_request_id",
            "level": 1
          },
          {
            "module": "context",
            "name": "get_user_id",
            "level": 1
          },
          {
            "module": "context",
            "name": "set_user_id",
            "level": 1
          },
          {
            "module": "context",
            "name": "context_scope",
            "level": 1
          },
          {
            "module": "context",
            "name": "with_context",
            "level": 1
          },
          {
            "module": "context",
            "name": "trace_context_middleware",
            "level": 1
          }
        ]
      }
    },
    "monitoring.opentelemetry.integration": {
      "path": "src/prompt_improver/monitoring/opentelemetry/integration.py",
      "imports": {
        "absolute": [
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "contextlib",
            "name": "contextmanager"
          },
          {
            "module": "opentelemetry",
            "name": "trace"
          },
          {
            "module": "opentelemetry",
            "name": "metrics"
          },
          {
            "module": "opentelemetry.trace",
            "name": "Status"
          },
          {
            "module": "opentelemetry.trace",
            "name": "StatusCode"
          },
          {
            "module": "prompt_improver.performance.monitoring.metrics_registry",
            "name": "get_metrics_registry"
          },
          {
            "module": "prompt_improver.performance.monitoring.metrics_registry",
            "name": "StandardMetrics"
          },
          {
            "module": "prompt_improver.performance.monitoring.health.telemetry",
            "name": "get_telemetry"
          },
          {
            "module": "prompt_improver.performance.monitoring.health.telemetry",
            "name": "health_check_span"
          }
        ],
        "relative_from": [
          {
            "module": "setup",
            "name": "get_tracer",
            "level": 1
          },
          {
            "module": "setup",
            "name": "get_meter",
            "level": 1
          },
          {
            "module": "metrics",
            "name": "get_http_metrics",
            "level": 1
          },
          {
            "module": "metrics",
            "name": "get_database_metrics",
            "level": 1
          },
          {
            "module": "metrics",
            "name": "get_business_metrics",
            "level": 1
          },
          {
            "module": "tracing",
            "name": "trace_async",
            "level": 1
          },
          {
            "module": "tracing",
            "name": "add_span_attributes",
            "level": 1
          },
          {
            "module": "instrumentation",
            "name": "instrument_fastapi_app",
            "level": 1
          },
          {
            "module": "context",
            "name": "trace_context_middleware",
            "level": 1
          },
          {
            "module": "setup",
            "name": "init_telemetry",
            "level": 1
          }
        ]
      }
    },
    "monitoring.opentelemetry.setup": {
      "path": "src/prompt_improver/monitoring/opentelemetry/setup.py",
      "imports": {
        "absolute": [
          "logging",
          "os"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "contextlib",
            "name": "asynccontextmanager"
          },
          {
            "module": "contextlib",
            "name": "contextmanager"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "opentelemetry",
            "name": "trace"
          },
          {
            "module": "opentelemetry",
            "name": "metrics"
          },
          {
            "module": "opentelemetry.sdk.trace",
            "name": "TracerProvider"
          },
          {
            "module": "opentelemetry.sdk.trace",
            "name": "sampling"
          },
          {
            "module": "opentelemetry.sdk.metrics",
            "name": "MeterProvider"
          },
          {
            "module": "opentelemetry.sdk.resources",
            "name": "Resource"
          },
          {
            "module": "opentelemetry.sdk.resources",
            "name": "SERVICE_NAME"
          },
          {
            "module": "opentelemetry.sdk.resources",
            "name": "SERVICE_VERSION"
          },
          {
            "module": "opentelemetry.exporter.otlp.proto.grpc.trace_exporter",
            "name": "OTLPSpanExporter"
          },
          {
            "module": "opentelemetry.exporter.otlp.proto.grpc.metric_exporter",
            "name": "OTLPMetricExporter"
          },
          {
            "module": "opentelemetry.exporter.otlp.proto.http.trace_exporter",
            "name": "OTLPSpanExporter"
          },
          {
            "module": "opentelemetry.exporter.otlp.proto.http.metric_exporter",
            "name": "OTLPMetricExporter"
          },
          {
            "module": "opentelemetry.sdk.trace.export",
            "name": "BatchSpanProcessor"
          },
          {
            "module": "opentelemetry.sdk.trace.export",
            "name": "ConsoleSpanExporter"
          },
          {
            "module": "opentelemetry.sdk.trace.export",
            "name": "SimpleSpanProcessor"
          },
          {
            "module": "opentelemetry.sdk.metrics.export",
            "name": "PeriodicExportingMetricReader"
          },
          {
            "module": "opentelemetry.sdk.metrics.export",
            "name": "ConsoleMetricExporter"
          },
          {
            "module": "opentelemetry.instrumentation.auto_instrumentation",
            "name": "sitecustomize"
          },
          {
            "module": "opentelemetry.semantic_conventions.resource",
            "name": "ResourceAttributes"
          }
        ],
        "relative_from": []
      }
    },
    "monitoring.opentelemetry.context": {
      "path": "src/prompt_improver/monitoring/opentelemetry/context.py",
      "imports": {
        "absolute": [
          "asyncio",
          "functools",
          "logging",
          "uuid"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "contextlib",
            "name": "contextmanager"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "TypeVar"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "typing",
            "name": "Awaitable"
          },
          {
            "module": "opentelemetry",
            "name": "trace"
          },
          {
            "module": "opentelemetry",
            "name": "baggage"
          },
          {
            "module": "opentelemetry",
            "name": "context"
          },
          {
            "module": "opentelemetry.context",
            "name": "Context"
          },
          {
            "module": "opentelemetry.trace.propagation.tracecontext",
            "name": "TraceContextTextMapPropagator"
          },
          {
            "module": "opentelemetry.baggage.propagation",
            "name": "W3CBaggagePropagator"
          },
          {
            "module": "opentelemetry.propagators.composite",
            "name": "CompositePropagator"
          },
          {
            "module": "opentelemetry.context",
            "name": "attach"
          },
          {
            "module": "opentelemetry.context",
            "name": "detach"
          },
          {
            "module": "opentelemetry.context",
            "name": "get_current"
          }
        ],
        "relative_from": []
      }
    },
    "monitoring.opentelemetry.example_config": {
      "path": "src/prompt_improver/monitoring/opentelemetry/example_config.py",
      "imports": {
        "absolute": [
          "os"
        ],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "setup",
            "name": "TelemetryConfig",
            "level": 1
          },
          {
            "module": "setup",
            "name": "ExporterType",
            "level": 1
          },
          {
            "module": "setup",
            "name": "SamplingStrategy",
            "level": 1
          }
        ]
      }
    },
    "monitoring.slo.monitor": {
      "path": "src/prompt_improver/monitoring/slo/monitor.py",
      "imports": {
        "absolute": [
          "asyncio",
          "time",
          "logging",
          "json",
          "coredis"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "collections",
            "name": "defaultdict"
          },
          {
            "module": "collections",
            "name": "deque"
          }
        ],
        "relative_from": [
          {
            "module": "framework",
            "name": "SLODefinition",
            "level": 1
          },
          {
            "module": "framework",
            "name": "SLOTarget",
            "level": 1
          },
          {
            "module": "framework",
            "name": "SLOTimeWindow",
            "level": 1
          },
          {
            "module": "framework",
            "name": "SLOType",
            "level": 1
          },
          {
            "module": "framework",
            "name": "ErrorBudget",
            "level": 1
          },
          {
            "module": "framework",
            "name": "BurnRate",
            "level": 1
          },
          {
            "module": "framework",
            "name": "SLOTemplates",
            "level": 1
          },
          {
            "module": "calculator",
            "name": "SLICalculator",
            "level": 1
          },
          {
            "module": "calculator",
            "name": "MultiWindowSLICalculator",
            "level": 1
          },
          {
            "module": "calculator",
            "name": "SLIResult",
            "level": 1
          }
        ]
      }
    },
    "monitoring.slo.framework": {
      "path": "src/prompt_improver/monitoring/slo/framework.py",
      "imports": {
        "absolute": [
          "time",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Union"
          }
        ],
        "relative_from": []
      }
    },
    "monitoring.slo.__init__": {
      "path": "src/prompt_improver/monitoring/slo/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "framework",
            "name": "SLODefinition",
            "level": 1
          },
          {
            "module": "framework",
            "name": "SLOTarget",
            "level": 1
          },
          {
            "module": "framework",
            "name": "SLOTimeWindow",
            "level": 1
          },
          {
            "module": "framework",
            "name": "SLOType",
            "level": 1
          },
          {
            "module": "framework",
            "name": "ErrorBudget",
            "level": 1
          },
          {
            "module": "framework",
            "name": "BurnRate",
            "level": 1
          },
          {
            "module": "calculator",
            "name": "SLICalculator",
            "level": 1
          },
          {
            "module": "calculator",
            "name": "MultiWindowSLICalculator",
            "level": 1
          },
          {
            "module": "calculator",
            "name": "PercentileCalculator",
            "level": 1
          },
          {
            "module": "calculator",
            "name": "AvailabilityCalculator",
            "level": 1
          },
          {
            "module": "monitor",
            "name": "SLOMonitor",
            "level": 1
          },
          {
            "module": "monitor",
            "name": "SLAMonitor",
            "level": 1
          },
          {
            "module": "monitor",
            "name": "ErrorBudgetMonitor",
            "level": 1
          },
          {
            "module": "monitor",
            "name": "BurnRateAlert",
            "level": 1
          },
          {
            "module": "reporting",
            "name": "SLOReporter",
            "level": 1
          },
          {
            "module": "reporting",
            "name": "SLAReporter",
            "level": 1
          },
          {
            "module": "reporting",
            "name": "DashboardGenerator",
            "level": 1
          },
          {
            "module": "reporting",
            "name": "ExecutiveReporter",
            "level": 1
          },
          {
            "module": "integration",
            "name": "OpenTelemetryIntegration",
            "level": 1
          },
          {
            "module": "integration",
            "name": "PrometheusRecordingRules",
            "level": 1
          },
          {
            "module": "integration",
            "name": "MetricsCollector",
            "level": 1
          }
        ]
      }
    },
    "monitoring.slo.example_usage": {
      "path": "src/prompt_improver/monitoring/slo/example_usage.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "random",
          "asyncio",
          "random",
          "random",
          "random"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          }
        ],
        "relative_from": [
          {
            "module": "framework",
            "name": "SLODefinition",
            "level": 1
          },
          {
            "module": "framework",
            "name": "SLOTarget",
            "level": 1
          },
          {
            "module": "framework",
            "name": "SLOTimeWindow",
            "level": 1
          },
          {
            "module": "framework",
            "name": "SLOType",
            "level": 1
          },
          {
            "module": "framework",
            "name": "SLOTemplates",
            "level": 1
          },
          {
            "module": "calculator",
            "name": "MultiWindowSLICalculator",
            "level": 1
          },
          {
            "module": "monitor",
            "name": "SLOMonitor",
            "level": 1
          },
          {
            "module": "monitor",
            "name": "ErrorBudgetMonitor",
            "level": 1
          },
          {
            "module": "reporting",
            "name": "SLOReporter",
            "level": 1
          },
          {
            "module": "reporting",
            "name": "DashboardGenerator",
            "level": 1
          },
          {
            "module": "reporting",
            "name": "ExecutiveReporter",
            "level": 1
          },
          {
            "module": "reporting",
            "name": "ReportPeriod",
            "level": 1
          },
          {
            "module": "integration",
            "name": "OpenTelemetryIntegration",
            "level": 1
          },
          {
            "module": "integration",
            "name": "MetricsCollector",
            "level": 1
          },
          {
            "module": "integration",
            "name": "PrometheusRecordingRules",
            "level": 1
          },
          {
            "module": "feature_flag_integration",
            "name": "FeatureFlagManager",
            "level": 1
          },
          {
            "module": "feature_flag_integration",
            "name": "ErrorBudgetPolicyEnforcer",
            "level": 1
          },
          {
            "module": "feature_flag_integration",
            "name": "PolicyAction",
            "level": 1
          }
        ]
      }
    },
    "monitoring.slo.integration": {
      "path": "src/prompt_improver/monitoring/slo/integration.py",
      "imports": {
        "absolute": [
          "time",
          "asyncio",
          "logging",
          "json",
          "coredis",
          "yaml"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "opentelemetry",
            "name": "metrics"
          },
          {
            "module": "opentelemetry.metrics",
            "name": "MeterProvider"
          },
          {
            "module": "opentelemetry.metrics",
            "name": "Meter"
          },
          {
            "module": "opentelemetry.sdk.metrics",
            "name": "MeterProvider"
          },
          {
            "module": "opentelemetry.sdk.metrics.export",
            "name": "MetricExporter"
          },
          {
            "module": "opentelemetry.sdk.metrics.export",
            "name": "MetricReader"
          },
          {
            "module": "opentelemetry.exporter.prometheus",
            "name": "PrometheusMetricReader"
          }
        ],
        "relative_from": [
          {
            "module": "framework",
            "name": "SLODefinition",
            "level": 1
          },
          {
            "module": "framework",
            "name": "SLOTarget",
            "level": 1
          },
          {
            "module": "framework",
            "name": "SLOTimeWindow",
            "level": 1
          },
          {
            "module": "framework",
            "name": "SLOType",
            "level": 1
          },
          {
            "module": "calculator",
            "name": "SLICalculator",
            "level": 1
          },
          {
            "module": "calculator",
            "name": "MultiWindowSLICalculator",
            "level": 1
          },
          {
            "module": "monitor",
            "name": "SLOMonitor",
            "level": 1
          }
        ]
      }
    },
    "monitoring.slo.feature_flag_integration": {
      "path": "src/prompt_improver/monitoring/slo/feature_flag_integration.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "json",
          "coredis"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "enum",
            "name": "Enum"
          }
        ],
        "relative_from": [
          {
            "module": "framework",
            "name": "ErrorBudget",
            "level": 1
          },
          {
            "module": "framework",
            "name": "SLODefinition",
            "level": 1
          },
          {
            "module": "monitor",
            "name": "ErrorBudgetMonitor",
            "level": 1
          }
        ]
      }
    },
    "monitoring.slo.calculator": {
      "path": "src/prompt_improver/monitoring/slo/calculator.py",
      "imports": {
        "absolute": [
          "time",
          "asyncio",
          "statistics",
          "logging",
          "math",
          "coredis"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "collections",
            "name": "deque"
          },
          {
            "module": "collections",
            "name": "defaultdict"
          },
          {
            "module": "enum",
            "name": "Enum"
          }
        ],
        "relative_from": [
          {
            "module": "framework",
            "name": "SLOTarget",
            "level": 1
          },
          {
            "module": "framework",
            "name": "SLOTimeWindow",
            "level": 1
          },
          {
            "module": "framework",
            "name": "SLOType",
            "level": 1
          },
          {
            "module": "framework",
            "name": "ErrorBudget",
            "level": 1
          }
        ]
      }
    },
    "monitoring.slo.reporting": {
      "path": "src/prompt_improver/monitoring/slo/reporting.py",
      "imports": {
        "absolute": [
          "json",
          "time",
          "logging",
          "statistics",
          "jinja2",
          "matplotlib.pyplot",
          "seaborn",
          "csv"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "dataclasses",
            "name": "asdict"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "pathlib",
            "name": "Path"
          }
        ],
        "relative_from": [
          {
            "module": "framework",
            "name": "SLODefinition",
            "level": 1
          },
          {
            "module": "framework",
            "name": "SLOTarget",
            "level": 1
          },
          {
            "module": "framework",
            "name": "SLOTimeWindow",
            "level": 1
          },
          {
            "module": "framework",
            "name": "SLOType",
            "level": 1
          },
          {
            "module": "calculator",
            "name": "SLIResult",
            "level": 1
          },
          {
            "module": "calculator",
            "name": "MultiWindowSLICalculator",
            "level": 1
          },
          {
            "module": "monitor",
            "name": "SLOMonitor",
            "level": 1
          },
          {
            "module": "monitor",
            "name": "ErrorBudgetMonitor",
            "level": 1
          },
          {
            "module": "monitor",
            "name": "Alert",
            "level": 1
          }
        ]
      }
    },
    "performance.sla_monitor": {
      "path": "src/prompt_improver/performance/sla_monitor.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time",
          "statistics",
          "coredis"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "collections",
            "name": "deque"
          },
          {
            "module": "enum",
            "name": "Enum"
          }
        ],
        "relative_from": []
      }
    },
    "performance.query_optimizer": {
      "path": "src/prompt_improver/performance/query_optimizer.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time",
          "hashlib",
          "weakref",
          "asyncpg",
          "re"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "collections",
            "name": "OrderedDict"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncEngine"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          },
          {
            "module": "sqlalchemy",
            "name": "event"
          },
          {
            "module": "sqlalchemy.pool",
            "name": "QueuePool"
          }
        ],
        "relative_from": []
      }
    },
    "performance.__init__": {
      "path": "src/prompt_improver/performance/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "optimization.async_optimizer",
            "name": "AsyncBatchProcessor",
            "level": 1
          },
          {
            "module": "optimization.async_optimizer",
            "name": "ConnectionPoolManager",
            "level": 1
          },
          {
            "module": "optimization.performance_optimizer",
            "name": "get_performance_optimizer",
            "level": 1
          },
          {
            "module": "optimization.response_optimizer",
            "name": "ResponseOptimizer",
            "level": 1
          },
          {
            "module": "optimization.response_optimizer",
            "name": "FastJSONSerializer",
            "level": 1
          },
          {
            "module": "monitoring.performance_monitor",
            "name": "get_performance_monitor",
            "level": 1
          },
          {
            "module": "monitoring.performance_benchmark",
            "name": "MCPPerformanceBenchmark",
            "level": 1
          },
          {
            "module": "validation.performance_validation",
            "name": "PerformanceValidator",
            "level": 1
          }
        ]
      }
    },
    "performance.optimization.async_optimizer": {
      "path": "src/prompt_improver/performance/optimization/async_optimizer.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time",
          "uuid",
          "statistics",
          "psutil",
          "json",
          "weakref",
          "aiohttp",
          "ssl",
          "coredis",
          "asyncpg"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "contextlib",
            "name": "asynccontextmanager"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "collections",
            "name": "defaultdict"
          },
          {
            "module": "collections",
            "name": "deque"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "opentelemetry",
            "name": "trace"
          },
          {
            "module": "opentelemetry",
            "name": "trace"
          },
          {
            "module": "opentelemetry",
            "name": "metrics"
          },
          {
            "module": "opentelemetry.trace",
            "name": "Status"
          },
          {
            "module": "opentelemetry.trace",
            "name": "StatusCode"
          }
        ],
        "relative_from": [
          {
            "module": "performance_optimizer",
            "name": "measure_mcp_operation",
            "level": 1
          },
          {
            "module": "ml.orchestration.core.unified_retry_manager",
            "name": "get_retry_manager",
            "level": 3
          },
          {
            "module": "ml.orchestration.core.unified_retry_manager",
            "name": "RetryConfig",
            "level": 3
          },
          {
            "module": "ml.orchestration.core.unified_retry_manager",
            "name": "RetryStrategy",
            "level": 3
          }
        ]
      }
    },
    "performance.optimization.__init__": {
      "path": "src/prompt_improver/performance/optimization/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "async_optimizer",
            "name": "AsyncBatchProcessor",
            "level": 1
          },
          {
            "module": "async_optimizer",
            "name": "ConnectionPoolManager",
            "level": 1
          },
          {
            "module": "performance_optimizer",
            "name": "get_performance_optimizer",
            "level": 1
          },
          {
            "module": "performance_optimizer",
            "name": "PerformanceOptimizer",
            "level": 1
          },
          {
            "module": "response_optimizer",
            "name": "ResponseOptimizer",
            "level": 1
          },
          {
            "module": "response_optimizer",
            "name": "FastJSONSerializer",
            "level": 1
          },
          {
            "module": "response_optimizer",
            "name": "CompressionResult",
            "level": 1
          },
          {
            "module": "ml.optimization.batch.batch_processor",
            "name": "BatchProcessor",
            "level": 3
          },
          {
            "module": "ml.optimization.batch.batch_processor",
            "name": "BatchProcessorConfig",
            "level": 3
          }
        ]
      }
    },
    "performance.optimization.response_optimizer": {
      "path": "src/prompt_improver/performance/optimization/response_optimizer.py",
      "imports": {
        "absolute": [
          "asyncio",
          "gzip",
          "json",
          "logging",
          "time",
          "zlib",
          "lz4.frame",
          "orjson",
          "brotli",
          "zstandard",
          "re",
          "re",
          "re"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "datetime",
            "name": "datetime"
          }
        ],
        "relative_from": [
          {
            "module": "performance_optimizer",
            "name": "measure_mcp_operation",
            "level": 1
          }
        ]
      }
    },
    "performance.optimization.memory_optimizer": {
      "path": "src/prompt_improver/performance/optimization/memory_optimizer.py",
      "imports": {
        "absolute": [
          "gc",
          "logging",
          "psutil",
          "time",
          "weakref",
          "threading"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "collections",
            "name": "defaultdict"
          },
          {
            "module": "collections",
            "name": "deque"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "WeakSet"
          },
          {
            "module": "typing",
            "name": "Any"
          }
        ],
        "relative_from": []
      }
    },
    "performance.optimization.performance_optimizer": {
      "path": "src/prompt_improver/performance/optimization/performance_optimizer.py",
      "imports": {
        "absolute": [
          "asyncio",
          "json",
          "logging",
          "statistics",
          "time",
          "aiofiles"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "contextlib",
            "name": "asynccontextmanager"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "AsyncGenerator"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "prometheus_client",
            "name": "Counter"
          },
          {
            "module": "prometheus_client",
            "name": "Histogram"
          },
          {
            "module": "prometheus_client",
            "name": "Gauge"
          }
        ],
        "relative_from": []
      }
    },
    "performance.baseline.performance_validation_suite": {
      "path": "src/prompt_improver/performance/baseline/performance_validation_suite.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time",
          "statistics",
          "json",
          "psutil",
          "tracemalloc"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          }
        ],
        "relative_from": [
          {
            "module": "baseline_collector",
            "name": "BaselineCollector",
            "level": 1
          },
          {
            "module": "statistical_analyzer",
            "name": "StatisticalAnalyzer",
            "level": 1
          },
          {
            "module": "regression_detector",
            "name": "RegressionDetector",
            "level": 1
          },
          {
            "module": "automation",
            "name": "BaselineAutomation",
            "level": 1
          },
          {
            "module": "models",
            "name": "BaselineMetrics",
            "level": 1
          },
          {
            "module": "enhanced_dashboard_integration",
            "name": "PerformanceDashboard",
            "level": 1
          },
          {
            "module": "load_testing_integration",
            "name": "LoadTestingIntegration",
            "level": 1
          }
        ]
      }
    },
    "performance.baseline.models": {
      "path": "src/prompt_improver/performance/baseline/models.py",
      "imports": {
        "absolute": [
          "asyncio",
          "json",
          "time",
          "statistics",
          "uuid",
          "psutil"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "dataclasses",
            "name": "asdict"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "pathlib",
            "name": "Path"
          }
        ],
        "relative_from": [
          {
            "module": "monitoring.metrics_registry",
            "name": "get_metrics_registry",
            "level": 2
          }
        ]
      }
    },
    "performance.baseline.automation": {
      "path": "src/prompt_improver/performance/baseline/automation.py",
      "imports": {
        "error": "unexpected character after line continuation character (<unknown>, line 13)"
      }
    },
    "performance.baseline.baseline_collector": {
      "path": "src/prompt_improver/performance/baseline/baseline_collector.py",
      "imports": {
        "absolute": [
          "asyncio",
          "json",
          "logging",
          "time",
          "tracemalloc",
          "uuid",
          "psutil",
          "coredis",
          "coredis"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "contextlib",
            "name": "asynccontextmanager"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "pathlib",
            "name": "Path"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Union"
          }
        ],
        "relative_from": [
          {
            "module": "models",
            "name": "BaselineMetrics",
            "level": 1
          },
          {
            "module": "models",
            "name": "MetricValue",
            "level": 1
          },
          {
            "module": "models",
            "name": "MetricDefinition",
            "level": 1
          },
          {
            "module": "models",
            "name": "MetricType",
            "level": 1
          },
          {
            "module": "models",
            "name": "STANDARD_METRICS",
            "level": 1
          },
          {
            "module": "models",
            "name": "get_metric_definition",
            "level": 1
          },
          {
            "module": "database",
            "name": "get_session",
            "level": 3
          },
          {
            "module": "monitoring.metrics_registry",
            "name": "get_metrics_registry",
            "level": 2
          }
        ]
      }
    },
    "performance.baseline.__init__": {
      "path": "src/prompt_improver/performance/baseline/__init__.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          }
        ],
        "relative_from": [
          {
            "module": "models",
            "name": "BaselineMetrics",
            "level": 1
          },
          {
            "module": "models",
            "name": "MetricValue",
            "level": 1
          },
          {
            "module": "models",
            "name": "MetricDefinition",
            "level": 1
          },
          {
            "module": "models",
            "name": "PerformanceTrend",
            "level": 1
          },
          {
            "module": "models",
            "name": "RegressionAlert",
            "level": 1
          },
          {
            "module": "models",
            "name": "ProfileData",
            "level": 1
          },
          {
            "module": "models",
            "name": "BaselineComparison",
            "level": 1
          },
          {
            "module": "models",
            "name": "MetricType",
            "level": 1
          },
          {
            "module": "models",
            "name": "TrendDirection",
            "level": 1
          },
          {
            "module": "models",
            "name": "AlertSeverity",
            "level": 1
          },
          {
            "module": "models",
            "name": "STANDARD_METRICS",
            "level": 1
          },
          {
            "module": "models",
            "name": "get_metric_definition",
            "level": 1
          },
          {
            "module": "baseline_collector",
            "name": "BaselineCollector",
            "level": 1
          },
          {
            "module": "baseline_collector",
            "name": "get_baseline_collector",
            "level": 1
          },
          {
            "module": "baseline_collector",
            "name": "record_operation",
            "level": 1
          },
          {
            "module": "baseline_collector",
            "name": "track_operation",
            "level": 1
          },
          {
            "module": "statistical_analyzer",
            "name": "StatisticalAnalyzer",
            "level": 1
          },
          {
            "module": "statistical_analyzer",
            "name": "analyze_metric_trend",
            "level": 1
          },
          {
            "module": "statistical_analyzer",
            "name": "detect_performance_anomalies",
            "level": 1
          },
          {
            "module": "statistical_analyzer",
            "name": "calculate_baseline_score",
            "level": 1
          },
          {
            "module": "regression_detector",
            "name": "RegressionDetector",
            "level": 1
          },
          {
            "module": "regression_detector",
            "name": "get_regression_detector",
            "level": 1
          },
          {
            "module": "regression_detector",
            "name": "check_baseline_for_regressions",
            "level": 1
          },
          {
            "module": "regression_detector",
            "name": "setup_webhook_alerts",
            "level": 1
          },
          {
            "module": "profiler",
            "name": "ContinuousProfiler",
            "level": 1
          },
          {
            "module": "profiler",
            "name": "get_profiler",
            "level": 1
          },
          {
            "module": "profiler",
            "name": "profile",
            "level": 1
          },
          {
            "module": "profiler",
            "name": "profile_block",
            "level": 1
          },
          {
            "module": "profiler",
            "name": "profile_async_block",
            "level": 1
          },
          {
            "module": "profiler",
            "name": "start_continuous_profiling",
            "level": 1
          },
          {
            "module": "profiler",
            "name": "stop_continuous_profiling",
            "level": 1
          },
          {
            "module": "profiler",
            "name": "get_performance_summary",
            "level": 1
          },
          {
            "module": "automation",
            "name": "BaselineAutomation",
            "level": 1
          },
          {
            "module": "automation",
            "name": "get_baseline_automation",
            "level": 1
          },
          {
            "module": "automation",
            "name": "start_automated_baseline_system",
            "level": 1
          },
          {
            "module": "automation",
            "name": "stop_automated_baseline_system",
            "level": 1
          },
          {
            "module": "automation",
            "name": "get_automation_dashboard",
            "level": 1
          },
          {
            "module": "reporting",
            "name": "BaselineReporter",
            "level": 1
          },
          {
            "module": "reporting",
            "name": "get_baseline_reporter",
            "level": 1
          },
          {
            "module": "reporting",
            "name": "generate_daily_performance_report",
            "level": 1
          },
          {
            "module": "reporting",
            "name": "generate_weekly_performance_report",
            "level": 1
          },
          {
            "module": "reporting",
            "name": "generate_capacity_planning_report",
            "level": 1
          },
          {
            "module": "enhanced_dashboard_integration",
            "name": "PerformanceDashboard",
            "level": 1
          },
          {
            "module": "enhanced_dashboard_integration",
            "name": "get_performance_dashboard",
            "level": 1
          },
          {
            "module": "enhanced_dashboard_integration",
            "name": "start_performance_dashboard",
            "level": 1
          },
          {
            "module": "enhanced_dashboard_integration",
            "name": "get_dashboard_data",
            "level": 1
          },
          {
            "module": "load_testing_integration",
            "name": "LoadTestingIntegration",
            "level": 1
          },
          {
            "module": "load_testing_integration",
            "name": "get_load_testing_integration",
            "level": 1
          },
          {
            "module": "load_testing_integration",
            "name": "run_integrated_load_test",
            "level": 1
          },
          {
            "module": "load_testing_integration",
            "name": "find_system_capacity",
            "level": 1
          },
          {
            "module": "load_testing_integration",
            "name": "LoadPattern",
            "level": 1
          },
          {
            "module": "load_testing_integration",
            "name": "LoadTestConfig",
            "level": 1
          },
          {
            "module": "performance_validation_suite",
            "name": "PerformanceValidationSuite",
            "level": 1
          },
          {
            "module": "performance_validation_suite",
            "name": "get_validation_suite",
            "level": 1
          },
          {
            "module": "performance_validation_suite",
            "name": "validate_baseline_system_performance",
            "level": 1
          },
          {
            "module": "performance_validation_suite",
            "name": "quick_performance_check",
            "level": 1
          },
          {
            "module": "performance_validation_suite",
            "name": "PerformanceValidationResult",
            "level": 1
          },
          {
            "module": "performance_validation_suite",
            "name": "SystemEfficiencyReport",
            "level": 1
          },
          {
            "module": "production_optimization_guide",
            "name": "ProductionOptimizationGuide",
            "level": 1
          },
          {
            "module": "production_optimization_guide",
            "name": "get_optimization_guide",
            "level": 1
          },
          {
            "module": "production_optimization_guide",
            "name": "DeploymentEnvironment",
            "level": 1
          },
          {
            "module": "production_optimization_guide",
            "name": "OptimizationLevel",
            "level": 1
          },
          {
            "module": "production_optimization_guide",
            "name": "get_production_config",
            "level": 1
          },
          {
            "module": "production_optimization_guide",
            "name": "get_development_config",
            "level": 1
          },
          {
            "module": "production_optimization_guide",
            "name": "validate_for_production",
            "level": 1
          },
          {
            "module": "production_optimization_guide",
            "name": "generate_production_checklist",
            "level": 1
          },
          {
            "module": "monitoring.performance_monitor",
            "name": "get_performance_monitor",
            "level": 2
          },
          {
            "module": "monitoring.metrics_registry",
            "name": "get_metrics_registry",
            "level": 2
          },
          {
            "module": "monitoring.health.service",
            "name": "HealthCheckService",
            "level": 2
          }
        ]
      }
    },
    "performance.baseline.load_testing_integration": {
      "path": "src/prompt_improver/performance/baseline/load_testing_integration.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time",
          "uuid",
          "statistics",
          "locust",
          "aiohttp",
          "random",
          "random"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "locust",
            "name": "HttpUser"
          },
          {
            "module": "locust",
            "name": "task"
          },
          {
            "module": "locust",
            "name": "between"
          }
        ],
        "relative_from": [
          {
            "module": "baseline_collector",
            "name": "BaselineCollector",
            "level": 1
          },
          {
            "module": "models",
            "name": "BaselineMetrics",
            "level": 1
          },
          {
            "module": "models",
            "name": "MetricValue",
            "level": 1
          }
        ]
      }
    },
    "performance.baseline.enhanced_dashboard_integration": {
      "path": "src/prompt_improver/performance/baseline/enhanced_dashboard_integration.py",
      "imports": {
        "absolute": [
          "asyncio",
          "json",
          "logging",
          "uuid",
          "streamlit",
          "plotly.graph_objects",
          "plotly.express",
          "websockets"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "asdict"
          },
          {
            "module": "plotly.subplots",
            "name": "make_subplots"
          }
        ],
        "relative_from": [
          {
            "module": "baseline_collector",
            "name": "BaselineCollector",
            "level": 1
          },
          {
            "module": "statistical_analyzer",
            "name": "StatisticalAnalyzer",
            "level": 1
          },
          {
            "module": "regression_detector",
            "name": "RegressionDetector",
            "level": 1
          },
          {
            "module": "models",
            "name": "BaselineMetrics",
            "level": 1
          },
          {
            "module": "models",
            "name": "RegressionAlert",
            "level": 1
          },
          {
            "module": "models",
            "name": "PerformanceTrend",
            "level": 1
          }
        ]
      }
    },
    "performance.baseline.profiler": {
      "path": "src/prompt_improver/performance/baseline/profiler.py",
      "imports": {
        "error": "unexpected character after line continuation character (<unknown>, line 155)"
      }
    },
    "performance.baseline.statistical_analyzer": {
      "path": "src/prompt_improver/performance/baseline/statistical_analyzer.py",
      "imports": {
        "error": "unexpected character after line continuation character (<unknown>, line 184)"
      }
    },
    "performance.baseline.regression_detector": {
      "path": "src/prompt_improver/performance/baseline/regression_detector.py",
      "imports": {
        "error": "unexpected character after line continuation character (<unknown>, line 88)"
      }
    },
    "performance.baseline.production_optimization_guide": {
      "path": "src/prompt_improver/performance/baseline/production_optimization_guide.py",
      "imports": {
        "absolute": [
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "enum",
            "name": "Enum"
          }
        ],
        "relative_from": []
      }
    },
    "performance.baseline.reporting": {
      "path": "src/prompt_improver/performance/baseline/reporting.py",
      "imports": {
        "error": "unexpected character after line continuation character (<unknown>, line 27)"
      }
    },
    "performance.testing.__init__": {
      "path": "src/prompt_improver/performance/testing/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "ab_testing_service",
            "name": "ModernABTestingService",
            "level": 1
          },
          {
            "module": "ab_testing_service",
            "name": "ABTestingService",
            "level": 1
          },
          {
            "module": "ab_testing_service",
            "name": "ModernABConfig",
            "level": 1
          },
          {
            "module": "ab_testing_service",
            "name": "StatisticalResult",
            "level": 1
          },
          {
            "module": "ab_testing_service",
            "name": "TestStatus",
            "level": 1
          },
          {
            "module": "ab_testing_service",
            "name": "StatisticalMethod",
            "level": 1
          },
          {
            "module": "ab_testing_service",
            "name": "create_ab_testing_service",
            "level": 1
          }
        ]
      }
    },
    "performance.testing.canary_testing": {
      "path": "src/prompt_improver/performance/testing/canary_testing.py",
      "imports": {
        "absolute": [
          "asyncio",
          "json",
          "os",
          "time",
          "uuid",
          "statistics",
          "yaml",
          "istio_client",
          "logging",
          "random",
          "time",
          "psutil"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "collections",
            "name": "defaultdict"
          },
          {
            "module": "collections",
            "name": "deque"
          },
          {
            "module": "rich.console",
            "name": "Console"
          },
          {
            "module": "prompt_improver.database",
            "name": "get_sessionmanager"
          },
          {
            "module": "prompt_improver.utils.redis_cache",
            "name": "redis_client"
          },
          {
            "module": "opentelemetry",
            "name": "trace"
          },
          {
            "module": "opentelemetry",
            "name": "metrics"
          },
          {
            "module": "opentelemetry.trace",
            "name": "Status"
          },
          {
            "module": "opentelemetry.trace",
            "name": "StatusCode"
          }
        ],
        "relative_from": []
      }
    },
    "performance.testing.ab_testing_service": {
      "path": "src/prompt_improver/performance/testing/ab_testing_service.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "uuid",
          "numpy"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "scipy",
            "name": "stats"
          },
          {
            "module": "sklearn.utils",
            "name": "resample"
          },
          {
            "module": "sqlalchemy",
            "name": "select"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          }
        ],
        "relative_from": [
          {
            "module": "database.models",
            "name": "ABExperiment",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "ABExperimentCreate",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "RulePerformance",
            "level": 3
          },
          {
            "module": "utils.datetime_utils",
            "name": "aware_utc_now",
            "level": 3
          },
          {
            "module": "utils.error_handlers",
            "name": "handle_database_errors",
            "level": 3
          }
        ]
      }
    },
    "performance.monitoring.performance_benchmark": {
      "path": "src/prompt_improver/performance/monitoring/performance_benchmark.py",
      "imports": {
        "absolute": [
          "asyncio",
          "json",
          "logging",
          "time",
          "aiofiles"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "prompt_improver.database",
            "name": "get_session"
          },
          {
            "module": "prompt_improver.core.services.analytics_factory",
            "name": "get_analytics_interface"
          },
          {
            "module": "prompt_improver.utils.session_store",
            "name": "get_session_store"
          },
          {
            "module": "prompt_improver.core.services.prompt_improvement",
            "name": "PromptImprovementService"
          }
        ],
        "relative_from": [
          {
            "module": "optimization.performance_optimizer",
            "name": "get_performance_optimizer",
            "level": 2
          },
          {
            "module": "optimization.performance_optimizer",
            "name": "PerformanceBaseline",
            "level": 2
          }
        ]
      }
    },
    "performance.monitoring.monitoring": {
      "path": "src/prompt_improver/performance/monitoring/monitoring.py",
      "imports": {
        "absolute": [
          "asyncio",
          "time",
          "uuid",
          "json",
          "logging",
          "statistics",
          "prometheus_client",
          "random",
          "psutil",
          "psutil",
          "psutil"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "collections",
            "name": "defaultdict"
          },
          {
            "module": "collections",
            "name": "deque"
          },
          {
            "module": "rich",
            "name": "box"
          },
          {
            "module": "rich.console",
            "name": "Console"
          },
          {
            "module": "rich.layout",
            "name": "Layout"
          },
          {
            "module": "rich.live",
            "name": "Live"
          },
          {
            "module": "rich.panel",
            "name": "Panel"
          },
          {
            "module": "rich.table",
            "name": "Table"
          },
          {
            "module": "rich.text",
            "name": "Text"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          },
          {
            "module": "opentelemetry",
            "name": "trace"
          },
          {
            "module": "opentelemetry",
            "name": "metrics"
          },
          {
            "module": "opentelemetry.exporter.otlp.proto.grpc.trace_exporter",
            "name": "OTLPSpanExporter"
          },
          {
            "module": "opentelemetry.exporter.otlp.proto.grpc.metric_exporter",
            "name": "OTLPMetricExporter"
          },
          {
            "module": "opentelemetry.sdk.trace",
            "name": "TracerProvider"
          },
          {
            "module": "opentelemetry.sdk.trace.export",
            "name": "BatchSpanProcessor"
          },
          {
            "module": "opentelemetry.sdk.metrics",
            "name": "MeterProvider"
          },
          {
            "module": "opentelemetry.sdk.metrics.export",
            "name": "PeriodicExportingMetricReader"
          },
          {
            "module": "opentelemetry.instrumentation.auto_instrumentation",
            "name": "sitecustomize"
          },
          {
            "module": "opentelemetry.propagate",
            "name": "set_global_textmap"
          },
          {
            "module": "opentelemetry.propagators.b3",
            "name": "B3MultiFormat"
          },
          {
            "module": "prometheus_client",
            "name": "Counter"
          },
          {
            "module": "prometheus_client",
            "name": "Histogram"
          },
          {
            "module": "prometheus_client",
            "name": "Gauge"
          },
          {
            "module": "prometheus_client",
            "name": "Summary"
          }
        ],
        "relative_from": [
          {
            "module": "database",
            "name": "get_sessionmanager",
            "level": 3
          },
          {
            "module": "database.models",
            "name": "RulePerformance",
            "level": 3
          },
          {
            "module": "analytics.analytics",
            "name": "AnalyticsService",
            "level": 2
          },
          {
            "module": "utils.error_handlers",
            "name": "handle_common_errors",
            "level": 3
          },
          {
            "module": "utils.error_handlers",
            "name": "handle_database_errors",
            "level": 3
          },
          {
            "module": "metrics_registry",
            "name": "get_metrics_registry",
            "level": 1
          },
          {
            "module": "mcp_server.mcp_server",
            "name": "improve_prompt",
            "level": 2
          },
          {
            "module": "ml_integration",
            "name": "get_ml_service",
            "level": 1
          }
        ]
      }
    },
    "performance.monitoring.performance_monitor": {
      "path": "src/prompt_improver/performance/monitoring/performance_monitor.py",
      "imports": {
        "absolute": [
          "asyncio",
          "json",
          "logging",
          "time",
          "uuid",
          "statistics",
          "math",
          "prometheus_client",
          "numpy",
          "random"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "collections",
            "name": "deque"
          },
          {
            "module": "collections",
            "name": "defaultdict"
          },
          {
            "module": "prometheus_client",
            "name": "Counter"
          },
          {
            "module": "prometheus_client",
            "name": "Histogram"
          },
          {
            "module": "prometheus_client",
            "name": "Gauge"
          },
          {
            "module": "prometheus_client",
            "name": "Summary"
          },
          {
            "module": "sklearn.ensemble",
            "name": "IsolationForest"
          }
        ],
        "relative_from": [
          {
            "module": "metrics_registry",
            "name": "get_metrics_registry",
            "level": 1
          },
          {
            "module": "optimization.performance_optimizer",
            "name": "get_performance_optimizer",
            "level": 2
          }
        ]
      }
    },
    "performance.monitoring.__init__": {
      "path": "src/prompt_improver/performance/monitoring/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "performance_monitor",
            "name": "get_performance_monitor",
            "level": 1
          },
          {
            "module": "performance_monitor",
            "name": "PerformanceMonitor",
            "level": 1
          },
          {
            "module": "performance_benchmark",
            "name": "MCPPerformanceBenchmark",
            "level": 1
          }
        ]
      }
    },
    "performance.monitoring.metrics_registry": {
      "path": "src/prompt_improver/performance/monitoring/metrics_registry.py",
      "imports": {
        "absolute": [
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "threading",
            "name": "Lock"
          },
          {
            "module": "prometheus_client",
            "name": "counter"
          },
          {
            "module": "prometheus_client",
            "name": "gauge"
          },
          {
            "module": "prometheus_client",
            "name": "histogram"
          },
          {
            "module": "prometheus_client",
            "name": "summary"
          },
          {
            "module": "prometheus_client",
            "name": "collector_registry"
          },
          {
            "module": "prometheus_client",
            "name": "registry"
          }
        ],
        "relative_from": []
      }
    },
    "performance.monitoring.health.enhanced_checkers": {
      "path": "src/prompt_improver/performance/monitoring/health/enhanced_checkers.py",
      "imports": {
        "absolute": [
          "asyncio",
          "time",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          }
        ],
        "relative_from": [
          {
            "module": "base",
            "name": "HealthResult",
            "level": 1
          },
          {
            "module": "base",
            "name": "HealthStatus",
            "level": 1
          },
          {
            "module": "enhanced_base",
            "name": "EnhancedHealthChecker",
            "level": 1
          },
          {
            "module": "circuit_breaker",
            "name": "CircuitBreakerConfig",
            "level": 1
          },
          {
            "module": "sla_monitor",
            "name": "SLAConfiguration",
            "level": 1
          },
          {
            "module": "sla_monitor",
            "name": "SLATarget",
            "level": 1
          },
          {
            "module": "telemetry",
            "name": "instrument_health_check",
            "level": 1
          },
          {
            "module": "ml.services.ml_integration",
            "name": "get_ml_service",
            "level": 4
          },
          {
            "module": "analytics",
            "name": "AnalyticsService",
            "level": 4
          }
        ]
      }
    },
    "performance.monitoring.health.metrics": {
      "path": "src/prompt_improver/performance/monitoring/health/metrics.py",
      "imports": {
        "absolute": [
          "time"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "collections.abc",
            "name": "Callable"
          },
          {
            "module": "functools",
            "name": "wraps"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "prometheus_client",
            "name": "Counter"
          },
          {
            "module": "prometheus_client",
            "name": "Gauge"
          },
          {
            "module": "prometheus_client",
            "name": "Histogram"
          },
          {
            "module": "prometheus_client",
            "name": "Summary"
          },
          {
            "module": "prometheus_client",
            "name": "REGISTRY"
          },
          {
            "module": "prometheus_client",
            "name": "generate_latest"
          }
        ],
        "relative_from": []
      }
    },
    "performance.monitoring.health.service": {
      "path": "src/prompt_improver/performance/monitoring/health/service.py",
      "imports": {
        "absolute": [
          "asyncio",
          "time",
          "json",
          "logging",
          "prometheus_client",
          "yaml"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "collections",
            "name": "defaultdict"
          },
          {
            "module": "collections",
            "name": "deque"
          },
          {
            "module": "prometheus_client",
            "name": "Counter"
          },
          {
            "module": "prometheus_client",
            "name": "Histogram"
          },
          {
            "module": "prometheus_client",
            "name": "Gauge"
          },
          {
            "module": "prometheus_client",
            "name": "Summary"
          },
          {
            "module": "circuit_breaker",
            "name": "CircuitBreaker"
          }
        ],
        "relative_from": [
          {
            "module": "base",
            "name": "AggregatedHealthResult",
            "level": 1
          },
          {
            "module": "base",
            "name": "HealthChecker",
            "level": 1
          },
          {
            "module": "base",
            "name": "HealthResult",
            "level": 1
          },
          {
            "module": "base",
            "name": "HealthStatus",
            "level": 1
          },
          {
            "module": "metrics_registry",
            "name": "get_metrics_registry",
            "level": 2
          },
          {
            "module": "metrics_registry",
            "name": "StandardMetrics",
            "level": 2
          },
          {
            "module": "checkers",
            "name": "REDIS_MONITOR_AVAILABLE",
            "level": 1
          },
          {
            "module": "checkers",
            "name": "AnalyticsServiceHealthChecker",
            "level": 1
          },
          {
            "module": "checkers",
            "name": "DatabaseHealthChecker",
            "level": 1
          },
          {
            "module": "checkers",
            "name": "MCPServerHealthChecker",
            "level": 1
          },
          {
            "module": "checkers",
            "name": "MLServiceHealthChecker",
            "level": 1
          },
          {
            "module": "checkers",
            "name": "SystemResourcesHealthChecker",
            "level": 1
          },
          {
            "module": "cache.redis_health",
            "name": "RedisHealthMonitor",
            "level": 4
          },
          {
            "module": "metrics",
            "name": "instrument_health_check",
            "level": 1
          },
          {
            "module": "ml_specific_checkers",
            "name": "MLModelHealthChecker",
            "level": 1
          },
          {
            "module": "ml_specific_checkers",
            "name": "MLDataQualityChecker",
            "level": 1
          },
          {
            "module": "ml_specific_checkers",
            "name": "MLTrainingHealthChecker",
            "level": 1
          },
          {
            "module": "ml_specific_checkers",
            "name": "MLPerformanceHealthChecker",
            "level": 1
          },
          {
            "module": "checkers",
            "name": "queue_health_checker",
            "level": 1
          },
          {
            "module": "ml_orchestration_checkers",
            "name": "MLOrchestratorHealthChecker",
            "level": 1
          },
          {
            "module": "ml_orchestration_checkers",
            "name": "MLComponentRegistryHealthChecker",
            "level": 1
          },
          {
            "module": "ml_orchestration_checkers",
            "name": "MLResourceManagerHealthChecker",
            "level": 1
          },
          {
            "module": "ml_orchestration_checkers",
            "name": "MLWorkflowEngineHealthChecker",
            "level": 1
          },
          {
            "module": "ml_orchestration_checkers",
            "name": "MLEventBusHealthChecker",
            "level": 1
          },
          {
            "module": "checkers",
            "name": "queue_health_checker",
            "level": 1
          },
          {
            "module": "utils.redis_cache",
            "name": "redis_config",
            "level": 3
          }
        ]
      }
    },
    "performance.monitoring.health.sla_monitor": {
      "path": "src/prompt_improver/performance/monitoring/health/sla_monitor.py",
      "imports": {
        "absolute": [
          "time",
          "asyncio",
          "statistics",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "collections",
            "name": "deque"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          }
        ],
        "relative_from": [
          {
            "module": "core.config",
            "name": "get_config",
            "level": 3
          }
        ]
      }
    },
    "performance.monitoring.health.structured_logging": {
      "path": "src/prompt_improver/performance/monitoring/health/structured_logging.py",
      "imports": {
        "absolute": [
          "json",
          "time",
          "traceback",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "functools",
            "name": "wraps"
          },
          {
            "module": "contextlib",
            "name": "contextmanager"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "asdict"
          },
          {
            "module": "middleware.correlation_context",
            "name": "get_correlation_id"
          }
        ],
        "relative_from": []
      }
    },
    "performance.monitoring.health.background_manager": {
      "path": "src/prompt_improver/performance/monitoring/health/background_manager.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time",
          "uuid",
          "heapq",
          "json",
          "prometheus_client"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "collections.abc",
            "name": "Callable"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "field"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timedelta"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Set"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "prometheus_client",
            "name": "Counter"
          },
          {
            "module": "prometheus_client",
            "name": "Histogram"
          },
          {
            "module": "prometheus_client",
            "name": "Gauge"
          },
          {
            "module": "prometheus_client",
            "name": "Summary"
          },
          {
            "module": "circuit_breaker",
            "name": "CircuitBreaker"
          }
        ],
        "relative_from": [
          {
            "module": "core.protocols.retry_protocols",
            "name": "RetryConfigProtocol",
            "level": 4
          },
          {
            "module": "core.protocols.retry_protocols",
            "name": "RetryStrategy",
            "level": 4
          },
          {
            "module": "core.protocols.retry_protocols",
            "name": "RetryableErrorType",
            "level": 4
          },
          {
            "module": "core.retry_implementations",
            "name": "BasicRetryConfig",
            "level": 4
          },
          {
            "module": "core.retry_config",
            "name": "RetryConfig",
            "level": 4
          },
          {
            "module": "metrics_registry",
            "name": "get_metrics_registry",
            "level": 2
          },
          {
            "module": "metrics_registry",
            "name": "StandardMetrics",
            "level": 2
          },
          {
            "module": "ml.orchestration.core.unified_retry_manager",
            "name": "get_retry_manager",
            "level": 4
          }
        ]
      }
    },
    "performance.monitoring.health.checkers": {
      "path": "src/prompt_improver/performance/monitoring/health/checkers.py",
      "imports": {
        "absolute": [
          "asyncio",
          "time",
          "psutil",
          "time"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Union"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          },
          {
            "module": "prompt_improver.utils.event_loop_manager",
            "name": "get_event_loop_manager"
          }
        ],
        "relative_from": [
          {
            "module": "base",
            "name": "HealthChecker",
            "level": 1
          },
          {
            "module": "base",
            "name": "HealthResult",
            "level": 1
          },
          {
            "module": "base",
            "name": "HealthStatus",
            "level": 1
          },
          {
            "module": "redis_monitor",
            "name": "redis_health_monitor",
            "level": 1
          },
          {
            "module": "background_manager",
            "name": "get_background_task_manager",
            "level": 1
          },
          {
            "module": "ml.optimization.batch.batch_processor",
            "name": "BatchProcessor",
            "level": 4
          },
          {
            "module": "database",
            "name": "get_session",
            "level": 3
          },
          {
            "module": "database",
            "name": "scalar",
            "level": 3
          },
          {
            "module": "cache.redis_health",
            "name": "get_redis_health_summary",
            "level": 4
          },
          {
            "module": "utils.redis_cache",
            "name": "redis_client",
            "level": 4
          },
          {
            "module": "mcp_server.mcp_server",
            "name": "improve_prompt",
            "level": 3
          },
          {
            "module": "analytics",
            "name": "AnalyticsService",
            "level": 2
          },
          {
            "module": "ml_integration",
            "name": "get_ml_service",
            "level": 2
          }
        ]
      }
    },
    "performance.monitoring.health.__init__": {
      "path": "src/prompt_improver/performance/monitoring/health/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "base",
            "name": "AggregatedHealthResult",
            "level": 1
          },
          {
            "module": "base",
            "name": "HealthChecker",
            "level": 1
          },
          {
            "module": "base",
            "name": "HealthResult",
            "level": 1
          },
          {
            "module": "base",
            "name": "HealthStatus",
            "level": 1
          },
          {
            "module": "checkers",
            "name": "AnalyticsServiceHealthChecker",
            "level": 1
          },
          {
            "module": "checkers",
            "name": "DatabaseHealthChecker",
            "level": 1
          },
          {
            "module": "checkers",
            "name": "MCPServerHealthChecker",
            "level": 1
          },
          {
            "module": "checkers",
            "name": "MLServiceHealthChecker",
            "level": 1
          },
          {
            "module": "checkers",
            "name": "QueueHealthChecker",
            "level": 1
          },
          {
            "module": "checkers",
            "name": "RedisHealthChecker",
            "level": 1
          },
          {
            "module": "checkers",
            "name": "SystemResourcesHealthChecker",
            "level": 1
          },
          {
            "module": "metrics",
            "name": "PROMETHEUS_AVAILABLE",
            "level": 1
          },
          {
            "module": "metrics",
            "name": "get_health_metrics_summary",
            "level": 1
          },
          {
            "module": "metrics",
            "name": "instrument_health_check",
            "level": 1
          },
          {
            "module": "metrics",
            "name": "reset_health_metrics",
            "level": 1
          },
          {
            "module": "service",
            "name": "HealthService",
            "level": 1
          },
          {
            "module": "service",
            "name": "get_health_service",
            "level": 1
          },
          {
            "module": "service",
            "name": "reset_health_service",
            "level": 1
          },
          {
            "module": "ml_specific_checkers",
            "name": "MLModelHealthChecker",
            "level": 1
          },
          {
            "module": "ml_specific_checkers",
            "name": "MLDataQualityChecker",
            "level": 1
          },
          {
            "module": "ml_specific_checkers",
            "name": "MLTrainingHealthChecker",
            "level": 1
          },
          {
            "module": "ml_specific_checkers",
            "name": "MLPerformanceHealthChecker",
            "level": 1
          }
        ]
      }
    },
    "performance.monitoring.health.telemetry": {
      "path": "src/prompt_improver/performance/monitoring/health/telemetry.py",
      "imports": {
        "absolute": [
          "time",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "contextlib",
            "name": "contextmanager"
          },
          {
            "module": "functools",
            "name": "wraps"
          },
          {
            "module": "opentelemetry",
            "name": "trace"
          },
          {
            "module": "opentelemetry",
            "name": "metrics"
          },
          {
            "module": "opentelemetry.trace",
            "name": "Status"
          },
          {
            "module": "opentelemetry.trace",
            "name": "StatusCode"
          },
          {
            "module": "opentelemetry.sdk.trace",
            "name": "TracerProvider"
          },
          {
            "module": "opentelemetry.sdk.metrics",
            "name": "MeterProvider"
          },
          {
            "module": "opentelemetry.sdk.resources",
            "name": "Resource"
          },
          {
            "module": "opentelemetry.exporter.otlp.proto.grpc.trace_exporter",
            "name": "OTLPSpanExporter"
          },
          {
            "module": "opentelemetry.exporter.otlp.proto.grpc.metric_exporter",
            "name": "OTLPMetricExporter"
          },
          {
            "module": "opentelemetry.sdk.trace.export",
            "name": "BatchSpanProcessor"
          },
          {
            "module": "opentelemetry.sdk.metrics.export",
            "name": "PeriodicExportingMetricReader"
          },
          {
            "module": "middleware.correlation_context",
            "name": "get_correlation_id"
          }
        ],
        "relative_from": []
      }
    },
    "performance.monitoring.health.circuit_breaker": {
      "path": "src/prompt_improver/performance/monitoring/health/circuit_breaker.py",
      "imports": {
        "absolute": [
          "asyncio",
          "time",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Callable"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          }
        ],
        "relative_from": [
          {
            "module": "core.config",
            "name": "get_config",
            "level": 4
          }
        ]
      }
    },
    "performance.monitoring.health.ml_orchestration_checkers": {
      "path": "src/prompt_improver/performance/monitoring/health/ml_orchestration_checkers.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "List"
          }
        ],
        "relative_from": [
          {
            "module": "base",
            "name": "HealthChecker",
            "level": 1
          },
          {
            "module": "base",
            "name": "HealthResult",
            "level": 1
          },
          {
            "module": "base",
            "name": "HealthStatus",
            "level": 1
          },
          {
            "module": "metrics",
            "name": "instrument_health_check",
            "level": 1
          }
        ]
      }
    },
    "performance.monitoring.health.enhanced_base": {
      "path": "src/prompt_improver/performance/monitoring/health/enhanced_base.py",
      "imports": {
        "absolute": [
          "time",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "abc",
            "name": "ABC"
          },
          {
            "module": "abc",
            "name": "abstractmethod"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "prompt_improver.performance.monitoring.health.base",
            "name": "HealthResult"
          },
          {
            "module": "prompt_improver.performance.monitoring.health.base",
            "name": "HealthStatus"
          },
          {
            "module": "prompt_improver.performance.monitoring.health.base",
            "name": "HealthResult"
          },
          {
            "module": "prompt_improver.performance.monitoring.health.base",
            "name": "HealthStatus"
          }
        ],
        "relative_from": [
          {
            "module": "base",
            "name": "HealthChecker",
            "level": 1
          },
          {
            "module": "base",
            "name": "HealthResult",
            "level": 1
          },
          {
            "module": "base",
            "name": "HealthStatus",
            "level": 1
          },
          {
            "module": "circuit_breaker",
            "name": "circuit_breaker_registry",
            "level": 1
          },
          {
            "module": "circuit_breaker",
            "name": "CircuitBreakerConfig",
            "level": 1
          },
          {
            "module": "circuit_breaker",
            "name": "CircuitBreakerOpen",
            "level": 1
          },
          {
            "module": "structured_logging",
            "name": "StructuredLogger",
            "level": 1
          },
          {
            "module": "structured_logging",
            "name": "log_health_check",
            "level": 1
          },
          {
            "module": "structured_logging",
            "name": "get_metrics_logger",
            "level": 1
          },
          {
            "module": "sla_monitor",
            "name": "get_or_create_sla_monitor",
            "level": 1
          },
          {
            "module": "sla_monitor",
            "name": "SLAConfiguration",
            "level": 1
          },
          {
            "module": "telemetry",
            "name": "instrument_health_check",
            "level": 1
          },
          {
            "module": "telemetry",
            "name": "TelemetryContext",
            "level": 1
          }
        ]
      }
    },
    "performance.monitoring.health.ml_specific_checkers": {
      "path": "src/prompt_improver/performance/monitoring/health/ml_specific_checkers.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "datetime",
            "name": "timezone"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          }
        ],
        "relative_from": [
          {
            "module": "base",
            "name": "HealthChecker",
            "level": 1
          },
          {
            "module": "base",
            "name": "HealthResult",
            "level": 1
          },
          {
            "module": "base",
            "name": "HealthStatus",
            "level": 1
          },
          {
            "module": "metrics",
            "name": "instrument_health_check",
            "level": 1
          },
          {
            "module": "ml.models.production_registry",
            "name": "ProductionModelRegistry",
            "level": 4
          },
          {
            "module": "ml.core.ml_integration",
            "name": "MLModelService",
            "level": 4
          },
          {
            "module": "ml.core.ml_integration",
            "name": "MLModelService",
            "level": 4
          },
          {
            "module": "ml.core.training_data_loader",
            "name": "TrainingDataLoader",
            "level": 4
          },
          {
            "module": "ml.core.training_data_loader",
            "name": "get_training_data_stats",
            "level": 4
          },
          {
            "module": "ml.preprocessing.synthetic_data_generator",
            "name": "ProductionSyntheticDataGenerator",
            "level": 4
          },
          {
            "module": "ml.optimization.batch.batch_processor",
            "name": "BatchProcessor",
            "level": 4
          },
          {
            "module": "performance_monitor",
            "name": "PerformanceMonitor",
            "level": 3
          },
          {
            "module": "core.services.analytics_factory",
            "name": "get_analytics_interface",
            "level": 4
          },
          {
            "module": "ml.optimization.algorithms.rule_optimizer",
            "name": "RuleOptimizer",
            "level": 4
          },
          {
            "module": "ml.learning.algorithms.context_learner",
            "name": "ContextLearner",
            "level": 4
          },
          {
            "module": "ml.evaluation.causal_inference_analyzer",
            "name": "CausalInferenceAnalyzer",
            "level": 4
          },
          {
            "module": "ml.optimization.algorithms.clustering_optimizer",
            "name": "ClusteringOptimizer",
            "level": 4
          },
          {
            "module": "ml.learning.algorithms.insight_engine",
            "name": "InsightGenerationEngine",
            "level": 4
          },
          {
            "module": "ml.evaluation.advanced_statistical_validator",
            "name": "AdvancedStatisticalValidator",
            "level": 4
          },
          {
            "module": "ml.learning.algorithms.failure_analyzer",
            "name": "FailureModeAnalyzer",
            "level": 4
          },
          {
            "module": "ml.evaluation.pattern_significance_analyzer",
            "name": "PatternSignificanceAnalyzer",
            "level": 4
          }
        ]
      }
    },
    "performance.monitoring.health.base": {
      "path": "src/prompt_improver/performance/monitoring/health/base.py",
      "imports": {
        "absolute": [
          "time"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "abc",
            "name": "ABC"
          },
          {
            "module": "abc",
            "name": "abstractmethod"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "enum",
            "name": "Enum"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "Optional"
          }
        ],
        "relative_from": []
      }
    },
    "performance.validation.__init__": {
      "path": "src/prompt_improver/performance/validation/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "performance_validation",
            "name": "PerformanceValidator",
            "level": 1
          },
          {
            "module": "performance_validation",
            "name": "PerformanceValidationResult",
            "level": 1
          }
        ]
      }
    },
    "performance.validation.performance_validation": {
      "path": "src/prompt_improver/performance/validation/performance_validation.py",
      "imports": {
        "absolute": [
          "asyncio",
          "json",
          "logging",
          "time",
          "statistics",
          "aiofiles"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "typing",
            "name": "Tuple"
          },
          {
            "module": "prompt_improver.database",
            "name": "get_session"
          },
          {
            "module": "prompt_improver.mcp_server.mcp_server",
            "name": "improve_prompt"
          },
          {
            "module": "prompt_improver.mcp_server.mcp_server",
            "name": "improve_prompt"
          },
          {
            "module": "prompt_improver.mcp_server.mcp_server",
            "name": "improve_prompt"
          }
        ],
        "relative_from": [
          {
            "module": "monitoring.performance_benchmark",
            "name": "MCPPerformanceBenchmark",
            "level": 2
          },
          {
            "module": "optimization.performance_optimizer",
            "name": "get_performance_optimizer",
            "level": 2
          },
          {
            "module": "monitoring.performance_monitor",
            "name": "get_performance_monitor",
            "level": 2
          },
          {
            "module": "utils.multi_level_cache",
            "name": "get_specialized_caches",
            "level": 3
          },
          {
            "module": "optimization.response_optimizer",
            "name": "get_response_optimizer",
            "level": 2
          },
          {
            "module": "optimization.async_optimizer",
            "name": "get_async_optimizer",
            "level": 2
          }
        ]
      }
    },
    "performance.analytics.__init__": {
      "path": "src/prompt_improver/performance/analytics/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "ml.analytics.session_summary_reporter",
            "name": "SessionSummaryReporter",
            "level": 3
          },
          {
            "module": "database.analytics_query_interface",
            "name": "AnalyticsQueryInterface",
            "level": 3
          },
          {
            "module": "core.services.analytics_factory",
            "name": "get_analytics_interface",
            "level": 3
          },
          {
            "module": "core.services.analytics_factory",
            "name": "get_analytics_router",
            "level": 3
          },
          {
            "module": "core.services.analytics_factory",
            "name": "get_session_reporter",
            "level": 3
          }
        ]
      }
    },
    "mcp_server.ml_integration": {
      "path": "src/prompt_improver/mcp_server/ml_integration.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          },
          {
            "module": "prompt_improver.ml.learning.patterns.advanced_pattern_discovery",
            "name": "AdvancedPatternDiscovery"
          },
          {
            "module": "prompt_improver.ml.optimization.algorithms.rule_optimizer",
            "name": "RuleOptimizer"
          },
          {
            "module": "prompt_improver.ml.analytics.performance_improvement_calculator",
            "name": "PerformanceImprovementCalculator"
          },
          {
            "module": "prompt_improver.utils.multi_level_cache",
            "name": "MultiLevelCache"
          }
        ],
        "relative_from": [
          {
            "module": "ml_data_collector",
            "name": "MCPMLDataCollector",
            "level": 1
          },
          {
            "module": "ml_data_collector",
            "name": "MLDataPackage",
            "level": 1
          }
        ]
      }
    },
    "mcp_server.__init__": {
      "path": "src/prompt_improver/mcp_server/__init__.py",
      "imports": {
        "absolute": [],
        "relative": [],
        "from_imports": [],
        "relative_from": [
          {
            "module": "mcp_server",
            "name": "improve_prompt",
            "level": 1
          },
          {
            "module": "mcp_server",
            "name": "mcp",
            "level": 1
          }
        ]
      }
    },
    "mcp_server.ml_data_collector": {
      "path": "src/prompt_improver/mcp_server/ml_data_collector.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "time",
          "json"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Dict"
          },
          {
            "module": "typing",
            "name": "List"
          },
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "dataclasses",
            "name": "dataclass"
          },
          {
            "module": "dataclasses",
            "name": "asdict"
          },
          {
            "module": "datetime",
            "name": "datetime"
          },
          {
            "module": "sqlalchemy.ext.asyncio",
            "name": "AsyncSession"
          },
          {
            "module": "sqlalchemy",
            "name": "text"
          },
          {
            "module": "prompt_improver.utils.datetime_utils",
            "name": "aware_utc_now"
          }
        ],
        "relative_from": []
      }
    },
    "mcp_server.mcp_server": {
      "path": "src/prompt_improver/mcp_server/mcp_server.py",
      "imports": {
        "absolute": [
          "asyncio",
          "logging",
          "signal",
          "sys",
          "time",
          "asyncio"
        ],
        "relative": [],
        "from_imports": [
          {
            "module": "typing",
            "name": "Any"
          },
          {
            "module": "typing",
            "name": "Optional"
          },
          {
            "module": "mcp.server.fastmcp",
            "name": "FastMCP"
          },
          {
            "module": "pydantic",
            "name": "BaseModel"
          },
          {
            "module": "pydantic",
            "name": "Field"
          },
          {
            "module": "prompt_improver.database",
            "name": "get_session"
          },
          {
            "module": "prompt_improver.database.connection",
            "name": "_get_global_sessionmanager"
          },
          {
            "module": "prompt_improver.database.connection",
            "name": "_get_global_sessionmanager"
          },
          {
            "module": "prompt_improver.core.config",
            "name": "get_config"
          },
          {
            "module": "prompt_improver.ml.optimization.batch.batch_processor",
            "name": "BatchProcessor"
          },
          {
            "module": "prompt_improver.ml.optimization.batch.batch_processor",
            "name": "BatchProcessorConfig"
          },
          {
            "module": "prompt_improver.ml.optimization.batch.batch_processor",
            "name": "periodic_batch_processor_coroutine"
          },
          {
            "module": "prompt_improver.core.services.analytics_factory",
            "name": "get_analytics_interface"
          },
          {
            "module": "prompt_improver.performance.monitoring.health.background_manager",
            "name": "get_background_task_manager"
          },
          {
            "module": "prompt_improver.core.services.prompt_improvement",
            "name": "PromptImprovementService"
          },
          {
            "module": "prompt_improver.utils.event_loop_benchmark",
            "name": "run_startup_benchmark"
          },
          {
            "module": "prompt_improver.utils.event_loop_manager",
            "name": "get_event_loop_manager"
          },
          {
            "module": "prompt_improver.utils.event_loop_manager",
            "name": "setup_uvloop"
          },
          {
            "module": "prompt_improver.utils.redis_cache",
            "name": "start_cache_subscriber"
          },
          {
            "module": "prompt_improver.utils.redis_cache",
            "name": "stop_cache_subscriber"
          },
          {
            "module": "prompt_improver.utils.session_event_loop",
            "name": "get_session_wrapper"
          },
          {
            "module": "prompt_improver.utils.session_store",
            "name": "SessionStore"
          },
          {
            "module": "prompt_improver.performance.optimization.performance_optimizer",
            "name": "get_performance_optimizer"
          },
          {
            "module": "prompt_improver.performance.optimization.performance_optimizer",
            "name": "measure_mcp_operation"
          },
          {
            "module": "prompt_improver.performance.optimization.performance_optimizer",
            "name": "measure_database_operation"
          },
          {
            "module": "prompt_improver.performance.monitoring.performance_monitor",
            "name": "get_performance_monitor"
          },
          {
            "module": "prompt_improver.performance.monitoring.performance_monitor",
            "name": "record_mcp_operation"
          },
          {
            "module": "prompt_improver.utils.multi_level_cache",
            "name": "get_cache"
          },
          {
            "module": "prompt_improver.utils.multi_level_cache",
            "name": "cached_get"
          },
          {
            "module": "prompt_improver.performance.optimization.response_optimizer",
            "name": "optimize_mcp_response"
          },
          {
            "module": "prompt_improver.performance.optimization.async_optimizer",
            "name": "get_async_optimizer"
          },
          {
            "module": "prompt_improver.security.mcp_middleware",
            "name": "require_rule_access"
          },
          {
            "module": "prompt_improver.security.mcp_middleware",
            "name": "get_mcp_auth_middleware"
          },
          {
            "module": "prompt_improver.security.owasp_input_validator",
            "name": "OWASP2025InputValidator"
          },
          {
            "module": "prompt_improver.security.structured_prompts",
            "name": "create_rule_application_prompt"
          },
          {
            "module": "prompt_improver.security.rate_limit_middleware",
            "name": "require_rate_limiting"
          },
          {
            "module": "prompt_improver.security.rate_limit_middleware",
            "name": "get_mcp_rate_limit_middleware"
          },
          {
            "module": "prompt_improver.security.output_validator",
            "name": "OutputValidator"
          },
          {
            "module": "prompt_improver.feedback.enhanced_feedback_collector",
            "name": "EnhancedFeedbackCollector"
          },
          {
            "module": "prompt_improver.feedback.enhanced_feedback_collector",
            "name": "AnonymizationLevel"
          },
          {
            "module": "prompt_improver.performance.query_optimizer",
            "name": "QueryOptimizer"
          },
          {
            "module": "prompt_improver.performance.query_optimizer",
            "name": "QueryType"
          },
          {
            "module": "prompt_improver.performance.sla_monitor",
            "name": "SLAMonitor"
          },
          {
            "module": "prompt_improver.utils.event_loop_benchmark",
            "name": "EventLoopBenchmark"
          },
          {
            "module": "prompt_improver.utils.performance_validation",
            "name": "run_performance_validation"
          },
          {
            "module": "prompt_improver.utils.performance_benchmark",
            "name": "run_mcp_performance_benchmark"
          },
          {
            "module": "prompt_improver.utils.response_optimizer",
            "name": "get_response_optimizer"
          }
        ],
        "relative_from": [
          {
            "module": "database.mcp_connection_pool",
            "name": "get_mcp_connection_pool",
            "level": 2
          },
          {
            "module": "performance.monitoring.health",
            "name": "get_health_service",
            "level": 2
          },
          {
            "module": "database.mcp_connection_pool",
            "name": "get_mcp_connection_pool",
            "level": 2
          }
        ]
      }
    }
  },
  "cycles": [
    [
      "ml.automl.orchestrator",
      "ml.automl.callbacks",
      "ml.automl.orchestrator"
    ],
    [
      "ml.orchestration.core.component_registry",
      "ml.orchestration.config.component_definitions",
      "ml.orchestration.core.component_registry"
    ],
    [
      "cli.core.signal_handler",
      "cli.core.emergency_operations",
      "cli.core.signal_handler"
    ]
  ],
  "summary": {
    "total_modules": 360,
    "modules_with_deps": 275,
    "total_cycles": 3
  }
}