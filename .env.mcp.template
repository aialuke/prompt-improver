# MCP Server Environment Configuration Template
# Copy this file to .env.mcp and fill in your secure values
# DO NOT commit this file with real values to version control

# ==============================================
# PostgreSQL MCP Server Configuration
# ==============================================

# Database Connection (align with existing project database)
DATABASE_URL=postgresql://mcp_db_agent:SECURE_PASSWORD_HERE@localhost:5432/apes_production?sslmode=require
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_USERNAME=mcp_db_agent
POSTGRES_PASSWORD=SECURE_PASSWORD_HERE
POSTGRES_DATABASE=apes_production

# SSL Configuration for PostgreSQL
POSTGRES_SSL_CERT=/path/to/client-cert.pem
POSTGRES_SSL_KEY=/path/to/client-key.pem
POSTGRES_SSL_ROOT_CERT=/path/to/ca-cert.pem

# Test Database Configuration
TEST_DATABASE_URL=postgresql://mcp_db_agent:SECURE_PASSWORD_HERE@localhost:5432/apes_test?sslmode=require
TEST_DATABASE_NAME=apes_test

# ==============================================
# Observability MCP Server Configuration  
# ==============================================

# OpenTelemetry Configuration (align with existing monitoring)
OTEL_SERVICE_NAME=apes-ml-pipeline
OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317
OTEL_RESOURCE_ATTRIBUTES=service.version=1.0.0,environment=production

# Metrics Endpoints (align with existing ports)
METRICS_ENDPOINT=http://localhost:8000/metrics
PROMETHEUS_ENDPOINT=http://localhost:8001

# Distributed Tracing
JAEGER_ENDPOINT=http://localhost:14268/api/traces

# OAuth2 Configuration for Monitoring
MONITORING_CLIENT_ID=mcp_observability_client
MONITORING_CLIENT_SECRET=SECURE_OAUTH_SECRET_HERE
MONITORING_TOKEN_ENDPOINT=https://auth.monitoring.local/oauth/token

# API Authentication
MONITORING_API_KEY=SECURE_API_KEY_HERE
OTEL_HEADERS=authorization=Bearer SECURE_API_KEY_HERE

# Rate Limiting
MONITORING_RATE_LIMIT=1000/minute
MONITORING_BURST_LIMIT=100

# ==============================================
# GitHub MCP Server Configuration
# ==============================================

# GitHub App Authentication (Recommended - most secure)
GITHUB_APP_ID=YOUR_APP_ID_HERE
GITHUB_PRIVATE_KEY_PATH=/secure/path/to/github-app-private-key.pem
GITHUB_INSTALLATION_ID=YOUR_INSTALLATION_ID_HERE

# Alternative: Personal Access Token (less secure)
# GITHUB_TOKEN=ghp_YOUR_PERSONAL_ACCESS_TOKEN_HERE

# Repository Configuration
GITHUB_OWNER=your_username_or_org
GITHUB_REPO=prompt-improver
GITHUB_API_BASE_URL=https://api.github.com

# Webhook Security
GITHUB_WEBHOOK_SECRET=SECURE_WEBHOOK_SECRET_HERE
GITHUB_WEBHOOK_ENDPOINT=https://secure.local/webhooks/github

# API Configuration
GITHUB_API_VERSION=2022-11-28
GITHUB_USER_AGENT=MCP-Agent/1.0

# ==============================================
# Security Configuration
# ==============================================

# Encryption Keys (generate secure random keys)
MCP_ENCRYPTION_KEY=GENERATE_32_BYTE_KEY_HERE
MCP_SIGNING_KEY=GENERATE_SIGNING_KEY_HERE

# Rate Limiting
MCP_RATE_LIMIT_REQUESTS_PER_MINUTE=1000
MCP_RATE_LIMIT_BURST=100

# TLS Configuration
TLS_MIN_VERSION=1.3
TLS_CERT_PATH=/path/to/tls/cert.pem
TLS_KEY_PATH=/path/to/tls/key.pem

# Audit Logging
AUDIT_LOG_LEVEL=INFO
AUDIT_LOG_FILE=/var/log/mcp/audit.log
AUDIT_RETENTION_DAYS=90

# ==============================================
# Development vs Production Configuration
# ==============================================

# Environment
ENVIRONMENT=development  # or production
DEBUG_MODE=false

# Development overrides (only for development)
# POSTGRES_SSL_MODE=prefer  # Use 'require' in production
# GITHUB_WEBHOOK_VERIFY=false  # Always true in production
# RATE_LIMITING_ENABLED=false  # Always true in production

# ==============================================
# Integration with Existing Project
# ==============================================

# Align with existing project configuration
# These should match your current .env values

# Database (should match existing database configuration)
POSTGRES_HOST_AUTH_METHOD=md5

# Monitoring (should match existing monitoring setup)  
METRICS_PORT=8000
PROMETHEUS_PORT=8001

# ==============================================
# Setup Instructions
# ==============================================

# 1. Copy this template:
#    cp .env.mcp.template .env.mcp

# 2. Generate secure passwords:
#    POSTGRES_PASSWORD: openssl rand -base64 32
#    MONITORING_CLIENT_SECRET: openssl rand -base64 32
#    GITHUB_WEBHOOK_SECRET: openssl rand -base64 32
#    MCP_ENCRYPTION_KEY: openssl rand -base64 32

# 3. GitHub App Setup (recommended):
#    - Create GitHub App at https://github.com/settings/apps/new
#    - Download private key and set GITHUB_PRIVATE_KEY_PATH
#    - Install app on repository and get GITHUB_INSTALLATION_ID

# 4. Database User Setup:
#    CREATE USER mcp_db_agent WITH PASSWORD 'your_secure_password';
#    GRANT USAGE ON SCHEMA public TO mcp_db_agent;
#    GRANT SELECT ON ALL TABLES IN SCHEMA public TO mcp_db_agent;

# 5. SSL Certificate Setup:
#    - Generate or obtain SSL certificates for database connections
#    - Set proper file permissions (600) on private keys

# 6. Load environment:
#    source .env.mcp
#    # Or use direnv: echo "dotenv .env.mcp" >> .envrc

# 7. Verify configuration:
#    claude mcp list
#    claude mcp status postgresql-database
#    claude mcp status observability-monitoring  
#    claude mcp status github-integration

# ==============================================
# Security Checklist
# ==============================================

# ✅ All passwords are randomly generated and secure (32+ characters)
# ✅ GitHub uses App authentication (not personal access tokens)
# ✅ SSL/TLS is enabled for all connections (sslmode=require)
# ✅ Private keys have proper file permissions (600)
# ✅ Webhook secrets are configured and validated
# ✅ Rate limiting is enabled
# ✅ Audit logging is configured
# ✅ Environment variables are not committed to version control
# ✅ Production uses encrypted secret storage (e.g., SOPS, Vault)

# ==============================================
# Troubleshooting
# ==============================================

# Test database connection:
# psql "$DATABASE_URL" -c "SELECT version();"

# Test GitHub API access:
# curl -H "Authorization: Bearer $GITHUB_TOKEN" https://api.github.com/user

# Test monitoring endpoints:
# curl http://localhost:8000/metrics
# curl http://localhost:8001/metrics

# Verify MCP servers:
# claude mcp status
# claude mcp logs postgresql-database
# claude mcp logs observability-monitoring
# claude mcp logs github-integration