[tool:pytest]
# Integration Test Configuration for Prompt Improver
# This configuration is specifically for integration tests

# Test discovery
testpaths = tests/integration
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Markers for test categorization
markers =
    integration: mark test as integration test
    database: mark test as requiring database connection
    redis: mark test as requiring Redis connection
    jwt: mark test as requiring JWT authentication
    mcp: mark test as requiring MCP server
    slow: mark test as slow-running (>5 seconds)
    performance: mark test as performance test
    real_database: mark test as requiring real database
    event_driven: mark test as testing event-driven behavior

# Async support
asyncio_mode = auto

# Output configuration
addopts = 
    -v
    --tb=short
    --strict-markers
    --strict-config
    --disable-warnings
    --color=yes
    --durations=10

# Logging configuration for integration tests
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# File logging
log_file = logs/integration_tests.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Environment file support
env_files =
    .env.test.local
    .env.test
    .env

# Test timeout (in seconds)
timeout = 300

# Minimum Python version
minversion = 3.9

# Required plugins
required_plugins =
    pytest-asyncio
    pytest-env

# Filterwarnings - suppress common warnings in tests
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:asyncio
    ignore::RuntimeWarning:asyncio

# Test execution settings
# Don't run tests in parallel by default for integration tests
# as they may have shared database/redis state
# Use: pytest -n auto --dist=loadfile for parallel execution if needed