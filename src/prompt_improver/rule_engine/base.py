"""Base classes for the Rule Engine.

This module defines the abstract base class `BasePromptRule` that all
prompt improvement rules must inherit from. It enforces the structure
required by the RuleEngine, as specified in the project's source of truth.
"""

from abc import ABC, abstractmethod
from typing import Any, NamedTuple


class RuleCheckResult(NamedTuple):
    """Data structure for the result of a rule's check method."""

    applies: bool
    confidence: float
    metadata: dict[str, Any] = {}


class TransformationResult(NamedTuple):
    """Data structure for the result of a rule's apply method."""

    success: bool
    improved_prompt: str
    confidence: float = 0.8
    transformations: list = []


class LLMInstruction(NamedTuple):
    """Data structure for the LLM instruction generated by a rule."""

    instruction: str


class BasePromptRule(ABC):
    """Abstract base class for all prompt improvement rules.

    Each rule must define its metadata and implement the `check`, `apply`,
    and `to_llm_instruction` methods.
    """

    metadata: dict[str, Any] = {
        "name": "Base Rule",
        "description": "This is a base rule and should not be used directly.",
        "priority": "low",
        "version": "0.0.0",
        "category": "core",
    }

    @abstractmethod
    def check(self, prompt: str, context: dict[str, Any] | None = None) -> RuleCheckResult:
        """Analyze the prompt and determine if the rule should be applied.

        Args:
            prompt: The user's original prompt.
            context: Additional context about the prompt and user.

        Returns:
            RuleCheckResult with applicability, confidence, and metadata.
        """

    @abstractmethod
    def apply(
        self, prompt: str, context: dict[str, Any] | None = None
    ) -> TransformationResult:
        """Apply the rule's transformation to the prompt.

        Args:
            prompt: The user's original prompt.
            context: Additional context, which may include data from the
                     `check` method.

        Returns:
            A TransformationResult containing the improved prompt and details
            about the changes made.
        """

    @abstractmethod
    def to_llm_instruction(self) -> str:
        """Generate a string instruction for an LLM to apply this rule's logic.

        Returns:
            A clear, concise instruction for an LLM.
        """
