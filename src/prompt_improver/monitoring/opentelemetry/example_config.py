"""OpenTelemetry Configuration Examples
===================================

Provides example configurations for different deployment environments
and common use cases.
"""
import os
from prompt_improver.monitoring.opentelemetry.setup import ExporterType, SamplingStrategy, TelemetryConfig

def get_development_config() -> TelemetryConfig:
    """Configuration for local development."""
    return TelemetryConfig(service_name='prompt-improver-dev', service_version='1.0.0-dev', environment='development', otlp_endpoint_grpc='http://localhost:4317', otlp_endpoint_http='http://localhost:4318', otlp_insecure=True, trace_exporter=ExporterType.CONSOLE, metric_exporter=ExporterType.CONSOLE, sampling_strategy=SamplingStrategy.ALWAYS_ON, sampling_rate=1.0, export_timeout_millis=5000, schedule_delay_millis=1000, metric_export_interval_millis=10000, enable_tracing=True, enable_metrics=True, enable_logging=True, enable_auto_instrumentation=True, resource_attributes={'development.mode': True, 'developer.name': os.getenv('USER', 'unknown')})

def get_staging_config() -> TelemetryConfig:
    """Configuration for staging environment."""
    return TelemetryConfig(service_name='prompt-improver-staging', service_version=os.getenv('APP_VERSION', '1.0.0'), environment='staging', otlp_endpoint_grpc=os.getenv('OTEL_EXPORTER_OTLP_ENDPOINT', 'http://otel-collector:4317'), otlp_endpoint_http=os.getenv('OTEL_EXPORTER_OTLP_HTTP_ENDPOINT', 'http://otel-collector:4318'), otlp_insecure=False, trace_exporter=ExporterType.OTLP_GRPC, metric_exporter=ExporterType.OTLP_GRPC, sampling_strategy=SamplingStrategy.PARENT_BASED, sampling_rate=0.5, export_timeout_millis=30000, schedule_delay_millis=5000, metric_export_interval_millis=30000, enable_tracing=True, enable_metrics=True, enable_logging=True, enable_auto_instrumentation=True, resource_attributes={'deployment.environment': 'staging', 'k8s.cluster.name': os.getenv('K8S_CLUSTER_NAME', 'staging-cluster'), 'k8s.namespace.name': os.getenv('K8S_NAMESPACE', 'prompt-improver-staging')})

def get_production_config() -> TelemetryConfig:
    """Configuration for production environment."""
    return TelemetryConfig(service_name='prompt-improver', service_version=os.getenv('APP_VERSION', '1.0.0'), environment='production', otlp_endpoint_grpc=os.getenv('OTEL_EXPORTER_OTLP_ENDPOINT', 'https://api.honeycomb.io:443'), otlp_endpoint_http=os.getenv('OTEL_EXPORTER_OTLP_HTTP_ENDPOINT', 'https://api.honeycomb.io'), otlp_headers={'x-honeycomb-team': os.getenv('HONEYCOMB_API_KEY', ''), 'x-honeycomb-dataset': 'prompt-improver-prod'}, otlp_insecure=False, trace_exporter=ExporterType.OTLP_GRPC, metric_exporter=ExporterType.OTLP_GRPC, sampling_strategy=SamplingStrategy.PARENT_BASED, sampling_rate=0.1, rate_limit_per_second=100, max_export_batch_size=512, export_timeout_millis=30000, schedule_delay_millis=5000, max_queue_size=2048, metric_export_interval_millis=60000, metric_export_timeout_millis=30000, enable_tracing=True, enable_metrics=True, enable_logging=True, enable_auto_instrumentation=True, resource_attributes={'deployment.environment': 'production', 'service.namespace': 'prompt-improver', 'k8s.cluster.name': os.getenv('K8S_CLUSTER_NAME', 'prod-cluster'), 'k8s.namespace.name': os.getenv('K8S_NAMESPACE', 'prompt-improver'), 'k8s.pod.name': os.getenv('K8S_POD_NAME', ''), 'k8s.node.name': os.getenv('K8S_NODE_NAME', ''), 'cloud.provider': os.getenv('CLOUD_PROVIDER', 'aws'), 'cloud.region': os.getenv('AWS_REGION', 'us-west-2')})

def get_testing_config() -> TelemetryConfig:
    """Configuration for automated testing."""
    return TelemetryConfig(service_name='prompt-improver-test', service_version='test', environment='test', trace_exporter=ExporterType.NONE, metric_exporter=ExporterType.NONE, sampling_strategy=SamplingStrategy.ALWAYS_OFF, sampling_rate=0.0, export_timeout_millis=1000, schedule_delay_millis=100, metric_export_interval_millis=1000, enable_tracing=False, enable_metrics=False, enable_logging=False, enable_auto_instrumentation=False, resource_attributes={'test.mode': True, 'test.framework': 'pytest'})

def get_observability_config() -> TelemetryConfig:
    """Configuration optimized for maximum observability (development/debugging)."""
    return TelemetryConfig(service_name='prompt-improver-debug', service_version='debug', environment='debug', otlp_endpoint_grpc='http://localhost:4317', otlp_endpoint_http='http://localhost:4318', otlp_insecure=True, trace_exporter=ExporterType.OTLP_GRPC, metric_exporter=ExporterType.OTLP_GRPC, sampling_strategy=SamplingStrategy.ALWAYS_ON, sampling_rate=1.0, max_export_batch_size=128, export_timeout_millis=5000, schedule_delay_millis=500, max_queue_size=1024, metric_export_interval_millis=5000, enable_tracing=True, enable_metrics=True, enable_logging=True, enable_auto_instrumentation=True, resource_attributes={'debug.mode': True, 'observability.level': 'maximum', 'sampling.debug': True})

def get_minimal_config() -> TelemetryConfig:
    """Minimal configuration with basic tracing only."""
    return TelemetryConfig(service_name='prompt-improver-minimal', service_version='1.0.0', environment='minimal', otlp_endpoint_grpc='http://localhost:4317', otlp_insecure=True, trace_exporter=ExporterType.OTLP_GRPC, metric_exporter=ExporterType.NONE, sampling_strategy=SamplingStrategy.PROBABILISTIC, sampling_rate=0.01, export_timeout_millis=30000, schedule_delay_millis=5000, enable_tracing=True, enable_metrics=False, enable_logging=False, enable_auto_instrumentation=True, resource_attributes={})

def get_config_for_environment(env: str=None) -> TelemetryConfig:
    """Get configuration based on environment variable or parameter."""
    env = env or os.getenv('ENVIRONMENT', 'development').lower()
    config_map = {'development': get_development_config, 'dev': get_development_config, 'staging': get_staging_config, 'stage': get_staging_config, 'production': get_production_config, 'prod': get_production_config, 'test': get_testing_config, 'testing': get_testing_config, 'debug': get_observability_config, 'observability': get_observability_config, 'minimal': get_minimal_config}
    config_func = config_map.get(env, get_development_config)
    return config_func()

def create_usage_examples():
    """Create comprehensive usage examples."""
    return '\n    OpenTelemetry Configuration Examples:\n    \n    # 1. Environment-based configuration\n    from prompt_improver.monitoring.opentelemetry import init_telemetry\n    from prompt_improver.monitoring.opentelemetry.example_config import get_config_for_environment\n    \n    config = get_config_for_environment()  # Uses ENVIRONMENT env var\n    init_telemetry(config=config)\n    \n    # 2. Explicit environment configuration\n    config = get_config_for_environment("production")\n    init_telemetry(config=config)\n    \n    # 3. Custom configuration\n    from prompt_improver.monitoring.opentelemetry.setup import TelemetryConfig, ExporterType\n    \n    custom_config = TelemetryConfig(\n        service_name="my-service",\n        environment="custom",\n        otlp_endpoint_grpc="https://my-collector.com:4317",\n        trace_exporter=ExporterType.OTLP_GRPC,\n        sampling_rate=0.25\n    )\n    init_telemetry(config=custom_config)\n    \n    # 4. FastAPI integration\n    from fastapi import FastAPI\n    from prompt_improver.monitoring.opentelemetry.integration import setup_fastapi_telemetry\n    \n    app = FastAPI()\n    setup_fastapi_telemetry(app, "my-fastapi-service")\n    \n    # 5. Manual instrumentation\n    from prompt_improver.monitoring.opentelemetry import (\n        trace_async, trace_ml_operation, get_correlation_id\n    )\n    \n    @trace_ml_operation("text_analysis", model_name="bert", capture_io=True)\n    async def analyze_text(text: str) -> dict:\n        # Your ML logic\n        correlation_id = get_correlation_id()  # For logging\n        return {"sentiment": "positive", "correlation_id": correlation_id}\n    \n    @trace_async("business_logic", component="prompt_processor")\n    async def process_prompt(prompt: str) -> str:\n        # Your business logic\n        analyzed = await analyze_text(prompt)\n        return f"Processed: {prompt}"\n    \n    # 6. Health check instrumentation\n    from prompt_improver.monitoring.opentelemetry.integration import health_check_instrumentation\n    \n    @health_check_instrumentation()\n    async def check_database():\n        # Your health check logic\n        return {"status": "healthy", "response_time": 5.2}\n    \n    # 7. Context propagation\n    from prompt_improver.monitoring.opentelemetry import (\n        with_context, propagate_context, set_user_id\n    )\n    \n    @with_context(user_id="user123", session_id="session456")\n    async def user_operation():\n        # This operation will have user context\n        pass\n    \n    # 8. Manual context management\n    from prompt_improver.monitoring.opentelemetry import context_scope\n    \n    async def handle_request(user_id: str):\n        with context_scope(user_id=user_id, request_id="req123"):\n            # All operations in this scope have context\n            await process_prompt("Hello world")\n    \n    # 9. Metrics recording\n    from prompt_improver.monitoring.opentelemetry import record_counter, record_histogram\n    \n    record_counter("user_requests_total", labels={"user_type": "premium"})\n    record_histogram("request_duration_ms", 123.45, labels={"endpoint": "/api/improve"})\n    \n    # 10. Integration with existing metrics systems\n    from prompt_improver.monitoring.opentelemetry.integration import record_business_metric\n    \n    record_business_metric(\n        "prompt_improvements_total",\n        1.0,\n        labels={"improvement_type": "clarity", "user_tier": "premium"},\n        metric_type="counter"\n    )\n    '
