version: '3.9'

services:
  # PostgreSQL 16 Database
  postgres:
    image: postgres:16-alpine
    container_name: prompt_improver_postgres_test
    restart: unless-stopped
    environment:
      POSTGRES_DB: prompt_improver_test
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5433:5432"  # Different port to avoid conflicts
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    networks:
      - test_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d prompt_improver_test"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis 7 Cache
  redis:
    image: redis:7-alpine
    container_name: prompt_improver_redis_test
    restart: unless-stopped
    command: >
      redis-server
      --requirepass test_redis_password
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfilename "appendonly.aof"
      --save 900 1
      --save 300 10
      --save 60 10000
    ports:
      - "6380:6379"  # Different port to avoid conflicts
    volumes:
      - redis_test_data:/data
    networks:
      - test_network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "test_redis_password", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: prompt_improver_minio_test
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: test_minio_user
      MINIO_ROOT_PASSWORD: test_minio_password
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
      MINIO_SERVER_URL: http://localhost:9000
    ports:
      - "9000:9000"   # API port
      - "9001:9001"   # Console port
    volumes:
      - minio_test_data:/data
    networks:
      - test_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # MinIO Client for bucket initialization
  minio-client:
    image: minio/mc:latest
    container_name: prompt_improver_minio_client_test
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - test_network
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set minio http://minio:9000 test_minio_user test_minio_password;
      /usr/bin/mc mb minio/test-models --ignore-existing;
      /usr/bin/mc mb minio/test-artifacts --ignore-existing;
      /usr/bin/mc mb minio/test-embeddings --ignore-existing;
      /usr/bin/mc mb minio/test-cache --ignore-existing;
      /usr/bin/mc policy set public minio/test-models;
      /usr/bin/mc policy set public minio/test-artifacts;
      exit 0;
      "

  # Application service (example)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: test
    container_name: prompt_improver_app_test
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql://test_user:test_password@postgres:5432/prompt_improver_test
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: prompt_improver_test
      DB_USER: test_user
      DB_PASSWORD: test_password
      
      # Redis
      REDIS_URL: redis://:test_redis_password@redis:6379/0
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: test_redis_password
      
      # MinIO
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: test_minio_user
      MINIO_SECRET_KEY: test_minio_password
      MINIO_USE_SSL: "false"
      MINIO_BUCKET_MODELS: test-models
      MINIO_BUCKET_ARTIFACTS: test-artifacts
      MINIO_BUCKET_EMBEDDINGS: test-embeddings
      MINIO_BUCKET_CACHE: test-cache
      
      # Application settings
      ENV: test
      LOG_LEVEL: DEBUG
      PYTHONUNBUFFERED: 1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - test_network
    volumes:
      - ./src:/app/src:ro
      - ./tests:/app/tests:ro
      - ./pytest.ini:/app/pytest.ini:ro
    command: pytest -v --tb=short
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  test_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_test_data:
    driver: local
  redis_test_data:
    driver: local
  minio_test_data:
    driver: local