#!/usr/bin/env python3
"""Security setup script to generate secure configuration and validate existing setup."""

import os
import sys
import secrets
import string
from pathlib import Path

# Add the src directory to the path so we can import our modules
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

# Import with error handling to provide standalone functionality
try:
    from prompt_improver.security.config_validator import SecurityConfigValidator
    SECURITY_MODULE_AVAILABLE = True
except ImportError as e:
    print(f"Warning: Security module not available ({e})")
    print("Running in standalone mode with basic validation")
    SECURITY_MODULE_AVAILABLE = False


def generate_secure_password(length: int = 32) -> str:
    """Generate a cryptographically secure password."""
    alphabet = string.ascii_letters + string.digits + "!@#$%^&*"
    return ''.join(secrets.choice(alphabet) for _ in range(length))


def backup_existing_env(env_file: Path) -> Path:
    """Create a backup of existing .env file."""
    if env_file.exists():
        backup_file = env_file.with_suffix('.env.backup')
        backup_file.write_text(env_file.read_text())
        print(f"‚úÖ Backed up existing .env to {backup_file}")
        return backup_file
    return None


def create_secure_env_file(env_file: Path, force: bool = False) -> None:
    """Create a secure .env file with strong passwords."""
    
    if env_file.exists() and not force:
        response = input(f"{env_file} already exists. Replace it? (y/N): ").lower()
        if response != 'y':
            print("Aborted.")
            return
    
    # Backup existing file
    backup_existing_env(env_file)
    
    # Generate secure password
    secure_password = generate_secure_password(32)
    
    env_content = f"""# Secure Database Configuration
# Generated by security_setup.py
# NEVER commit this file to version control - it's in .gitignore

# ===================================
# Database Configuration (Secure)
# ===================================

# PostgreSQL Database Settings
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_DATABASE=apes_production
POSTGRES_USERNAME=apes_user
POSTGRES_PASSWORD={secure_password}

# Database URL (alternative to individual settings)
DATABASE_URL=postgresql+psycopg://apes_user:{secure_password}@localhost:5432/apes_production

# Test Database
TEST_DB_NAME=apes_test
TEST_DATABASE_URL=postgresql+psycopg://apes_user:{secure_password}@localhost:5432/apes_test

# ===================================
# MCP Configuration (Secure)
# ===================================

# MCP Postgres Server Configuration
MCP_POSTGRES_ENABLED=true
MCP_POSTGRES_CONNECTION_STRING=postgresql+psycopg://apes_user:{secure_password}@localhost:5432/apes_production

# ===================================
# Development Settings
# ===================================

# Enable SQL logging for development
DB_ECHO_SQL=false
DB_ECHO_POOL=false

# Development Mode
DEVELOPMENT_MODE=true
LOG_LEVEL=INFO

# ===================================
# Performance Settings
# ===================================

# Database connection pool settings
DB_POOL_MIN_SIZE=2
DB_POOL_MAX_SIZE=10
DB_POOL_TIMEOUT=10
DB_STATEMENT_TIMEOUT=30

# Performance monitoring
ENABLE_PERFORMANCE_MONITORING=true
SLOW_QUERY_THRESHOLD=1000

# ===================================
# Security Settings
# ===================================

# Environment designation (affects security strictness)
ENVIRONMENT=development

# JWT Secret Key (generate new one for production)
JWT_SECRET_KEY={generate_secure_password(64)}
"""
    
    env_file.write_text(env_content)
    env_file.chmod(0o600)  # Restrict permissions to owner only
    
    print(f"‚úÖ Created secure .env file at {env_file}")
    print(f"üîê Generated secure password: {secure_password[:8]}... (truncated for security)")
    print("‚ö†Ô∏è  File permissions set to 600 (owner read/write only)")


def validate_current_configuration() -> None:
    """Validate the current configuration for security issues."""
    
    print("\n" + "="*60)
    print("SECURITY CONFIGURATION AUDIT REPORT")
    print("="*60)
    
    if SECURITY_MODULE_AVAILABLE:
        validator = SecurityConfigValidator()
        audit_result = validator.audit_configuration()
        
        if audit_result["is_secure"]:
            print("‚úÖ Configuration is SECURE")
        else:
            print("‚ùå Configuration has SECURITY ISSUES")
            
            print("\nüö® Issues Found:")
            for issue in audit_result["issues"]:
                print(f"  - {issue}")
            
            print("\nüí° Recommendations:")
            for rec in audit_result["recommendations"]:
                print(f"  - {rec}")
    else:
        # Standalone basic validation
        print("üîç Running basic security validation...")
        issues = []
        
        # Check for required environment variables
        required_vars = ["POSTGRES_PASSWORD", "POSTGRES_USERNAME", "POSTGRES_HOST", "POSTGRES_PORT", "POSTGRES_DATABASE"]
        for var in required_vars:
            if not os.getenv(var):
                issues.append(f"Required environment variable {var} is not set")
        
        # Check password strength
        password = os.getenv("POSTGRES_PASSWORD")
        if password:
            if len(password) < 12:
                issues.append("Database password should be at least 12 characters long")
            if password in ["password", "admin", "apes_secure_password_2024", "YOUR_SECURE_PASSWORD_HERE"]:
                issues.append("Database password is using a known weak/default password")
        
        # Check DATABASE_URL for embedded credentials
        database_url = os.getenv("DATABASE_URL", "")
        if "apes_secure_password" in database_url:
            issues.append("DATABASE_URL contains default development password")
        
        if not issues:
            print("‚úÖ Basic configuration appears SECURE")
        else:
            print("‚ùå Configuration has SECURITY ISSUES")
            print("\nüö® Issues Found:")
            for issue in issues:
                print(f"  - {issue}")
            print("\nüí° Recommendations:")
            print("  - Set all required environment variables with secure values")
            print("  - Use strong, unique passwords (at least 12 characters)")
            print("  - Never use default development passwords in any environment")
    
    print("="*60)


def check_gitignore() -> None:
    """Ensure .env is in .gitignore."""
    gitignore_file = Path(".gitignore")
    
    if not gitignore_file.exists():
        print("‚ö†Ô∏è  No .gitignore file found")
        return
    
    gitignore_content = gitignore_file.read_text()
    
    if ".env" not in gitignore_content:
        print("‚ö†Ô∏è  .env not found in .gitignore - adding it")
        with gitignore_file.open("a") as f:
            f.write("\n# Environment variables (contains secrets)\n.env\n.env.*\n!.env.example\n")
        print("‚úÖ Added .env to .gitignore")
    else:
        print("‚úÖ .env is properly ignored in .gitignore")


def main():
    """Main security setup function."""
    import argparse
    
    parser = argparse.ArgumentParser(description="Security setup for APES database configuration")
    parser.add_argument("--create-env", action="store_true", help="Create new secure .env file")
    parser.add_argument("--force", action="store_true", help="Force overwrite existing .env file")
    parser.add_argument("--validate", action="store_true", help="Validate current configuration")
    parser.add_argument("--all", action="store_true", help="Run all security setup tasks")
    
    args = parser.parse_args()
    
    # Change to the project root directory
    project_root = Path(__file__).parent.parent
    os.chdir(project_root)
    
    print("üîê APES Security Setup Tool")
    print(f"üìÅ Working directory: {project_root}")
    
    if args.all or args.validate:
        validate_current_configuration()
    
    if args.all or args.create_env:
        env_file = Path(".env")
        create_secure_env_file(env_file, force=args.force)
    
    if args.all:
        check_gitignore()
    
    if not any([args.create_env, args.validate, args.all]):
        print("\nNo action specified. Use --help for options.")
        print("Quick start: python scripts/security_setup.py --all")


if __name__ == "__main__":
    main()