---
description: 
globs: 
alwaysApply: true
---
# MINIMAL COMPLEXITY PRINCIPLE - SEARCH PROTOCOL

**Before creating any new code, YOU MUST think deeply about simplicity and search for existing solutions:**

## INTENTIONAL SIMPLICITY PROTOCOL

**ALWAYS start by thinking hard about the simplest possible approach:**
- Use extended thinking: "think hard about the simplest possible approach"
- For complex problems: "think harder" or "ultrathink" 
- Always ask: "What is the absolute simplest way to achieve this outcome?"

**Apply core simplicity principles:**
- **YAGNI (You Aren't Gonna Need It)**: Implement ONLY what is immediately necessary
- **KISS (Keep It Simple, Stupid)**: Choose the most straightforward approach available  
- **DRY (Don't Repeat Yourself)**: Use existing libraries rather than reimplementing functionality

## MANDATORY SEARCH PROTOCOL

Execute these searches in order (stop when you find relevant existing code):

```bash
# 1. Direct name search
rg "exact_function_name|exact_component_name" --type-add 'web:*.{ts,tsx,js,jsx}' -t web

# 2. Pattern/keyword search (use multiple related terms)
rg "validate.*email|email.*validation|check.*email" --type-add 'web:*.{ts,tsx,js,jsx}' -t web

# 3. Import/export search
rg "import.*{similar}|export.*{similar}|from.*utils|from.*helpers|from.*lib"

# 4. Class/interface search
rg "class.*Similar|interface.*Related|type.*Match"

# 5. If unclear after above searches, use Task tool:
# "Search codebase for existing email validation implementations"
```

## DECISION MATRIX

**EXTEND existing code when:**
- Adding ≤3 new parameters to existing function
- Adding ≤50 lines to existing module
- Change maintains single responsibility principle
- Existing tests can be extended (not rewritten)
- Same abstraction level preserved
- **Simplicity check**: Would a newcomer understand the enhanced version immediately?

**CREATE new code when:**
- Would increase complexity by >30% (cyclomatic/cognitive)
- Different domain/responsibility (e.g., email vs phone validation)
- Would break existing API contracts
- Different error handling strategy needed
- Performance requirements fundamentally different
- **Simplicity check**: Extension would violate KISS principle

**REFACTOR FIRST when:**
- Existing code is unclear/poorly documented
- Would need to add multiple conditional branches
- Current implementation violates SOLID principles
- Tests are missing or inadequate
- **Simplicity check**: Current implementation is not the simplest solution possible

## VERIFICATION CHECKLIST

Before proceeding with ANY new implementation:

**Search Verification:**
□ Searched using ALL 5 search patterns above
□ Checked at least 3 semantically related terms
□ Reviewed imports in target directory and parent
□ Examined similar files in same module/feature
□ Used Task tool if search scope unclear
□ Can articulate specific reason existing code won't work
□ Have concrete examples of why extension isn't viable

**Simplicity Validation:**
□ Used extended thinking to find simplest approach
□ Applied YAGNI: Implementing only immediate requirements
□ Applied KISS: Chosen most straightforward solution available
□ Applied DRY: Verified no existing solution can be reused
□ Validated: Would newcomer understand this in 15 minutes?
□ Confirmed: This is the simplest solution that could possibly work

## PRACTICAL EXAMPLES

✅ GOOD - Extending existing:
```typescript
// Found: validateInput(value: string, type: string)
// Need: validation with custom error messages
// Solution: Extend with optional parameter
validateInput(value: string, type: string, customErrors?: ErrorMap)
```

✅ GOOD - Creating new (justified):
```typescript
// Found: validateUserForm() - handles complete form validation
// Need: Single field async validation for real-time feedback
// Solution: New validateFieldAsync() - different timing/lifecycle
```

❌ BAD - Unnecessary duplication:
```typescript
// Found: formatCurrency(amount: number, currency: string)
// Created: formatMoney(sum: number, curr: string) // Just renamed params!
```

## COMPLEXITY METRICS

Consider code "more complex" when adding:
- Nested conditionals (depth >2)
- New external dependencies
- Mixed abstraction levels
- Circular dependencies
- Breaking changes to existing API
- Significant performance overhead
- New error states/handling paths

## ENFORCEMENT

Before marking any todo as complete:
1. List all existing code you found
2. Explain why each couldn't be extended
3. Show the search commands you used
4. Store the decision in MCP memory with reasoning

If you cannot complete the verification checklist, STOP and ask for clarification rather than creating potentially duplicate code.