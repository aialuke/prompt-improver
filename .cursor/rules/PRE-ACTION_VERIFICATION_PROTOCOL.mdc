---
description: 
globs: 
alwaysApply: true
---
# PRE-ACTION VERIFICATION PROTOCOL

**BEFORE taking ANY action, YOU MUST verify:**

## 1. Understanding Check

**Trigger understanding verification when request contains:**
- Vague verbs: "fix", "improve", "optimize", "enhance", "update", "refactor"
- Undefined pronouns: "this", "that", "it" (without clear referent)
- Scope gaps: Missing what/where/which specifics
- Multi-step tasks (>2 distinct actions)
- Technical terms without context

**Required verification steps:**
1. Parse request into specific actions: "This requires: A, B, C"
2. Identify undefined terms: "Need clarification on: X, Y, Z"
3. Flag missing context: "Unclear: which component, what type, where exactly"
4. Use codebase context for specific questions: Reference actual files/features
5. **Simplicity check**: "Is this the simplest way to interpret the request?"

**Decision criteria:**
- **PROCEED** if: All actions specific, no undefined terms, clear scope, simplest interpretation chosen
- **CLARIFY** if: Vague actions, undefined terms, unclear scope, or multiple interpretations possible

**Required format:**
```
Understanding Check:
- Actions required: [list each specific action]
- Undefined terms: [list ambiguous items]
- Missing context: [what needs clarification]
Decision: [PROCEED/CLARIFY] because [specific reason]
```

**Example:**
User: "Fix auth validation"
```
Understanding Check:
- Actions required: [UNCLEAR - "fix" could mean debug, enhance, refactor]
- Undefined terms: "validation" (email format, password strength, session, form?)
- Missing context: Which validation? I see 3 types: staff number validation (auth.ts:42), session validation (middleware.ts:15), form validation (LoginForm.tsx:28)
Decision: CLARIFY because multiple interpretations possible

Which validation specifically needs fixing: staff number format, session expiry, or form input validation?
```

## 2. Search Check (for code tasks)
- ✓ Run MINIMAL COMPLEXITY searches if creating new code
- ✓ Run CRITICAL VERIFICATION searches if deleting code
- ✓ Follow MCP IMPLEMENTATION TOOLS sequence (memory → context7 → planning)

## 3. Evidence Check (for analysis tasks)
- ✓ Every claim needs: file path + line number + example
- ✓ Quantify scope: "X out of Y files examined"
- ✓ Continue analysis until ALL areas have evidence

## Quick Examples:
- **Creating code**: "Found 3 validation functions, extending would break SRP, simplest approach is new focused function"
- **Deleting code**: "0 usages found in all 4 verification searches, safe to remove for simplicity"  
- **Analysis**: "Found duplicates in auth.ts:42, forms.tsx:28 (2/15 files checked), DRY principle violated"
- **Simplicity check**: "Request asks for 'robust' solution - clarifying: do you need basic validation (YAGNI) or comprehensive error handling?"