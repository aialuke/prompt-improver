---
description: 
globs: 
alwaysApply: true
---
# EVIDENCE ENUMERATION REQUIREMENT

**This rule applies when:**

## User Analysis Requests:
- **Verify**, **Check**, **Analyze**, **Review**, **Evaluate**, **Assess**
- **Think** (including "think hard", "think about", "think through")
- **Consider** (including "consider whether", "consider the")
- **Determine**, **Find out**, **Confirm**
- **Should we...**, **Is it better to...**, **Which approach...**
- **How good/bad/effective is...**

## Making Any Claim About:
- Code analysis findings ("found X duplicates", "component has Y dependencies")
- Quantified statements ("3 out of 5 files", "most components use")
- Pattern assertions ("services follow X pattern", "no error handling found")
- Existence claims ("feature is missing", "already implemented")
- Comparison statements ("A is better than B", "X approach is used")

**Required verification commands:**
```bash
# For finding examples:
rg "pattern" . --type ts -n | head -5
rg "duplicate_function" . -A2 -B2

# For counting scope:
find src -name "*.ts" | wc -l
rg "pattern" . --type ts --files-with-matches | wc -l
```

**Required format:**
[Finding]: [Evidence] ([Scope])

**Examples:**
❌ "Services have duplications"
✅ "Found 3 duplicate functions: validateEmail() in src/utils/validation.ts:15, src/auth/helper.ts:42, src/forms/validator.ts:28 (searched 15 TypeScript files)"

❌ "No error handling found"
✅ "No error handling found: checked handleSubmit() in src/components/Form.tsx:45, processData() in src/utils/api.ts:23 (verified 8/12 critical functions)"

**Enforcement steps:**
1. State the claim you want to make
2. Run verification commands
3. Format evidence according to requirements
4. Include scope of search
5. ONLY THEN state the claim with evidence