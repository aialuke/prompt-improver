# Multi-stage production Dockerfile for APES MCP Server (Phase 0)
# Optimized for unified architecture with performance and security

FROM python:3.11-slim-bookworm AS builder

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libpq-dev \
    git \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements and install dependencies
COPY requirements.txt pyproject.toml ./
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Copy source code and install the package
COPY src/ src/
COPY README.md ./
RUN pip install --no-cache-dir -e .

# Production stage
FROM python:3.11-slim-bookworm

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq5 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user for security
RUN adduser --disabled-password --gecos '' --uid 1000 mcpuser

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Set working directory
WORKDIR /app

# Copy application code with proper ownership
COPY --chown=mcpuser:mcpuser src/ src/
COPY --chown=mcpuser:mcpuser pyproject.toml README.md ./

# Set environment variables for unified architecture
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONPATH=/app/src

# Phase 0 MCP Server Configuration
ENV MCP_LOG_LEVEL=INFO
ENV FASTMCP_LOG_LEVEL=INFO
ENV MCP_FEEDBACK_ENABLED=true
ENV MCP_DB_POOL_SIZE=20
ENV MCP_DB_MAX_OVERFLOW=10
ENV MCP_REQUEST_TIMEOUT_MS=200
ENV MCP_CACHE_TTL_SECONDS=7200
ENV MCP_PERFORMANCE_MONITORING_ENABLED=true

# Health check endpoint for container orchestration
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD python -c "\
import asyncio, sys; \
sys.path.insert(0, '/app/src'); \
from prompt_improver.database.mcp_connection_pool import get_mcp_connection_pool; \
async def check(): \
    try: \
        pool = get_mcp_connection_pool(); \
        result = await pool.health_check(); \
        sys.exit(0 if result.get('status') == 'healthy' else 1); \
    except Exception as e: \
        print(f'Health check failed: {e}'); \
        sys.exit(1); \
asyncio.run(check())" || exit 1

# Switch to non-root user
USER mcpuser

# Expose port (not used for stdio transport but good practice)
EXPOSE 8000

# Create logs directory with proper permissions
RUN mkdir -p /app/logs

# Run MCP server with stdio transport
CMD ["python", "-m", "prompt_improver.mcp_server.mcp_server"]
