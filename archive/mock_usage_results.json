{
  "tests/conftest.py": [
    {
      "line": 9,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, MagicMock, patch"
    },
    {
      "line": 42,
      "kind": "mock_fixture",
      "snippet": "def mock_db_session():"
    },
    {
      "line": 47,
      "kind": "AsyncMock",
      "snippet": "session = AsyncMock()"
    },
    {
      "line": 47,
      "kind": "Mock",
      "snippet": "session = AsyncMock()"
    },
    {
      "line": 48,
      "kind": "AsyncMock",
      "snippet": "session.execute = AsyncMock()"
    },
    {
      "line": 48,
      "kind": "Mock",
      "snippet": "session.execute = AsyncMock()"
    },
    {
      "line": 49,
      "kind": "AsyncMock",
      "snippet": "session.commit = AsyncMock()"
    },
    {
      "line": 49,
      "kind": "Mock",
      "snippet": "session.commit = AsyncMock()"
    },
    {
      "line": 50,
      "kind": "AsyncMock",
      "snippet": "session.rollback = AsyncMock()"
    },
    {
      "line": 50,
      "kind": "Mock",
      "snippet": "session.rollback = AsyncMock()"
    },
    {
      "line": 51,
      "kind": "AsyncMock",
      "snippet": "session.add = AsyncMock()"
    },
    {
      "line": 51,
      "kind": "Mock",
      "snippet": "session.add = AsyncMock()"
    },
    {
      "line": 54,
      "kind": "AsyncMock",
      "snippet": "session.scalar_one_or_none = AsyncMock()"
    },
    {
      "line": 54,
      "kind": "Mock",
      "snippet": "session.scalar_one_or_none = AsyncMock()"
    },
    {
      "line": 55,
      "kind": "AsyncMock",
      "snippet": "session.fetchall = AsyncMock()"
    },
    {
      "line": 55,
      "kind": "Mock",
      "snippet": "session.fetchall = AsyncMock()"
    },
    {
      "line": 56,
      "kind": "AsyncMock",
      "snippet": "session.refresh = AsyncMock()"
    },
    {
      "line": 56,
      "kind": "Mock",
      "snippet": "session.refresh = AsyncMock()"
    },
    {
      "line": 377,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.services.ml_integration.mlflow\"):"
    },
    {
      "line": 393,
      "kind": "mock_fixture",
      "snippet": "def mock_llm_transformer():"
    },
    {
      "line": 399,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, MagicMock"
    },
    {
      "line": 401,
      "kind": "MagicMock",
      "snippet": "service = MagicMock()"
    },
    {
      "line": 401,
      "kind": "Mock",
      "snippet": "service = MagicMock()"
    },
    {
      "line": 457,
      "kind": "AsyncMock",
      "snippet": "service.enhance_clarity = AsyncMock(side_effect=mock_enhance_clarity)"
    },
    {
      "line": 457,
      "kind": "Mock",
      "snippet": "service.enhance_clarity = AsyncMock(side_effect=mock_enhance_clarity)"
    },
    {
      "line": 458,
      "kind": "AsyncMock",
      "snippet": "service.enhance_specificity = AsyncMock(side_effect=mock_enhance_specificity)"
    },
    {
      "line": 458,
      "kind": "Mock",
      "snippet": "service.enhance_specificity = AsyncMock(side_effect=mock_enhance_specificity)"
    },
    {
      "line": 491,
      "kind": "mock_fixture",
      "snippet": "def mock_rule_metadata_corrected():"
    },
    {
      "line": 526,
      "kind": "mock_fixture",
      "snippet": "def mock_ml_service():"
    },
    {
      "line": 528,
      "kind": "MagicMock",
      "snippet": "service = MagicMock()"
    },
    {
      "line": 528,
      "kind": "Mock",
      "snippet": "service = MagicMock()"
    },
    {
      "line": 529,
      "kind": "AsyncMock",
      "snippet": "service.optimize_rules = AsyncMock("
    },
    {
      "line": 529,
      "kind": "Mock",
      "snippet": "service.optimize_rules = AsyncMock("
    },
    {
      "line": 540,
      "kind": "AsyncMock",
      "snippet": "service.predict_rule_effectiveness = AsyncMock("
    },
    {
      "line": 540,
      "kind": "Mock",
      "snippet": "service.predict_rule_effectiveness = AsyncMock("
    },
    {
      "line": 549,
      "kind": "AsyncMock",
      "snippet": "service.optimize_ensemble_rules = AsyncMock("
    },
    {
      "line": 549,
      "kind": "Mock",
      "snippet": "service.optimize_ensemble_rules = AsyncMock("
    },
    {
      "line": 557,
      "kind": "AsyncMock",
      "snippet": "service.discover_patterns = AsyncMock("
    },
    {
      "line": 557,
      "kind": "Mock",
      "snippet": "service.discover_patterns = AsyncMock("
    },
    {
      "line": 586,
      "kind": "mock_fixture",
      "snippet": "def mock_prompt_service():"
    },
    {
      "line": 588,
      "kind": "MagicMock",
      "snippet": "service = MagicMock()"
    },
    {
      "line": 588,
      "kind": "Mock",
      "snippet": "service = MagicMock()"
    },
    {
      "line": 589,
      "kind": "AsyncMock",
      "snippet": "service.improve_prompt = AsyncMock("
    },
    {
      "line": 589,
      "kind": "Mock",
      "snippet": "service.improve_prompt = AsyncMock("
    },
    {
      "line": 598,
      "kind": "AsyncMock",
      "snippet": "service.trigger_optimization = AsyncMock("
    },
    {
      "line": 598,
      "kind": "Mock",
      "snippet": "service.trigger_optimization = AsyncMock("
    },
    {
      "line": 605,
      "kind": "AsyncMock",
      "snippet": "service.run_ml_optimization = AsyncMock("
    },
    {
      "line": 605,
      "kind": "Mock",
      "snippet": "service.run_ml_optimization = AsyncMock("
    },
    {
      "line": 612,
      "kind": "AsyncMock",
      "snippet": "service.discover_patterns = AsyncMock("
    },
    {
      "line": 612,
      "kind": "Mock",
      "snippet": "service.discover_patterns = AsyncMock("
    },
    {
      "line": 619,
      "kind": "mock_fixture",
      "snippet": "def mock_analytics_service():"
    },
    {
      "line": 621,
      "kind": "MagicMock",
      "snippet": "service = MagicMock()"
    },
    {
      "line": 621,
      "kind": "Mock",
      "snippet": "service = MagicMock()"
    },
    {
      "line": 622,
      "kind": "AsyncMock",
      "snippet": "service.get_performance_summary = AsyncMock("
    },
    {
      "line": 622,
      "kind": "Mock",
      "snippet": "service.get_performance_summary = AsyncMock("
    },
    {
      "line": 629,
      "kind": "AsyncMock",
      "snippet": "service.get_rule_effectiveness = AsyncMock("
    },
    {
      "line": 629,
      "kind": "Mock",
      "snippet": "service.get_rule_effectiveness = AsyncMock("
    },
    {
      "line": 632,
      "kind": "AsyncMock",
      "snippet": "service.get_ml_performance_summary = AsyncMock("
    },
    {
      "line": 632,
      "kind": "Mock",
      "snippet": "service.get_ml_performance_summary = AsyncMock("
    },
    {
      "line": 644,
      "kind": "mock_fixture",
      "snippet": "def mock_mlflow():"
    },
    {
      "line": 647,
      "kind": "patch",
      "snippet": "patch(\"mlflow.start_run\") as mock_start,"
    },
    {
      "line": 648,
      "kind": "patch",
      "snippet": "patch(\"mlflow.log_params\") as mock_log_params,"
    },
    {
      "line": 649,
      "kind": "patch",
      "snippet": "patch(\"mlflow.log_metrics\") as mock_log_metrics,"
    },
    {
      "line": 650,
      "kind": "patch",
      "snippet": "patch(\"mlflow.sklearn.log_model\") as mock_log_model,"
    },
    {
      "line": 651,
      "kind": "patch",
      "snippet": "patch(\"mlflow.active_run\") as mock_active_run,"
    },
    {
      "line": 653,
      "kind": "MagicMock",
      "snippet": "mock_run = MagicMock()"
    },
    {
      "line": 653,
      "kind": "Mock",
      "snippet": "mock_run = MagicMock()"
    },
    {
      "line": 667,
      "kind": "mock_fixture",
      "snippet": "def mock_optuna():"
    },
    {
      "line": 669,
      "kind": "patch",
      "snippet": "with patch(\"optuna.create_study\") as mock_create_study:"
    },
    {
      "line": 670,
      "kind": "MagicMock",
      "snippet": "mock_study = MagicMock()"
    },
    {
      "line": 670,
      "kind": "Mock",
      "snippet": "mock_study = MagicMock()"
    }
  ],
  "tests/integration/automl/test_automl_end_to_end.py": [
    {
      "line": 17,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, MagicMock, patch"
    },
    {
      "line": 56,
      "kind": "mock_fixture",
      "snippet": "def mock_ab_testing_service(self):"
    },
    {
      "line": 58,
      "kind": "MagicMock",
      "snippet": "service = MagicMock(spec=ABTestingService)"
    },
    {
      "line": 58,
      "kind": "Mock",
      "snippet": "service = MagicMock(spec=ABTestingService)"
    },
    {
      "line": 59,
      "kind": "AsyncMock",
      "snippet": "service.get_real_time_metrics = AsyncMock("
    },
    {
      "line": 59,
      "kind": "Mock",
      "snippet": "service.get_real_time_metrics = AsyncMock("
    },
    {
      "line": 67,
      "kind": "AsyncMock",
      "snippet": "service.record_experiment_result = AsyncMock()"
    },
    {
      "line": 67,
      "kind": "Mock",
      "snippet": "service.record_experiment_result = AsyncMock()"
    },
    {
      "line": 68,
      "kind": "AsyncMock",
      "snippet": "service.should_stop_experiment = AsyncMock(return_value=False)"
    },
    {
      "line": 68,
      "kind": "Mock",
      "snippet": "service.should_stop_experiment = AsyncMock(return_value=False)"
    },
    {
      "line": 72,
      "kind": "mock_fixture",
      "snippet": "def mock_websocket_manager(self):"
    },
    {
      "line": 74,
      "kind": "MagicMock",
      "snippet": "manager = MagicMock(spec=WebSocketManager)"
    },
    {
      "line": 74,
      "kind": "Mock",
      "snippet": "manager = MagicMock(spec=WebSocketManager)"
    },
    {
      "line": 75,
      "kind": "AsyncMock",
      "snippet": "manager.broadcast = AsyncMock()"
    },
    {
      "line": 75,
      "kind": "Mock",
      "snippet": "manager.broadcast = AsyncMock()"
    },
    {
      "line": 219,
      "kind": "MagicMock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 219,
      "kind": "Mock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 220,
      "kind": "MagicMock",
      "snippet": "ab_service = MagicMock(spec=ABTestingService)"
    },
    {
      "line": 220,
      "kind": "Mock",
      "snippet": "ab_service = MagicMock(spec=ABTestingService)"
    },
    {
      "line": 300,
      "kind": "mock_fixture",
      "snippet": "def mock_prompt_service(self):"
    },
    {
      "line": 302,
      "kind": "MagicMock",
      "snippet": "service = MagicMock(spec=PromptImprovementService)"
    },
    {
      "line": 302,
      "kind": "Mock",
      "snippet": "service = MagicMock(spec=PromptImprovementService)"
    },
    {
      "line": 303,
      "kind": "AsyncMock",
      "snippet": "service.initialize_automl = AsyncMock()"
    },
    {
      "line": 303,
      "kind": "Mock",
      "snippet": "service.initialize_automl = AsyncMock()"
    },
    {
      "line": 304,
      "kind": "AsyncMock",
      "snippet": "service.start_automl_optimization = AsyncMock("
    },
    {
      "line": 304,
      "kind": "Mock",
      "snippet": "service.start_automl_optimization = AsyncMock("
    },
    {
      "line": 307,
      "kind": "AsyncMock",
      "snippet": "service.get_automl_status = AsyncMock("
    },
    {
      "line": 307,
      "kind": "Mock",
      "snippet": "service.get_automl_status = AsyncMock("
    },
    {
      "line": 314,
      "kind": "AsyncMock",
      "snippet": "service.stop_automl_optimization = AsyncMock(return_value={\"status\": \"stopped\"})"
    },
    {
      "line": 314,
      "kind": "Mock",
      "snippet": "service.stop_automl_optimization = AsyncMock(return_value={\"status\": \"stopped\"})"
    },
    {
      "line": 321,
      "kind": "MagicMock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 321,
      "kind": "Mock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 356,
      "kind": "MagicMock",
      "snippet": "invalid_db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 356,
      "kind": "Mock",
      "snippet": "invalid_db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 361,
      "kind": "MagicMock",
      "snippet": "ab_service = MagicMock(spec=ABTestingService)"
    },
    {
      "line": 361,
      "kind": "Mock",
      "snippet": "ab_service = MagicMock(spec=ABTestingService)"
    },
    {
      "line": 389,
      "kind": "MagicMock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 389,
      "kind": "Mock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 390,
      "kind": "MagicMock",
      "snippet": "ab_service = MagicMock(spec=ABTestingService)"
    },
    {
      "line": 390,
      "kind": "Mock",
      "snippet": "ab_service = MagicMock(spec=ABTestingService)"
    },
    {
      "line": 393,
      "kind": "MagicMock",
      "snippet": "failing_websocket = MagicMock(spec=WebSocketManager)"
    },
    {
      "line": 393,
      "kind": "Mock",
      "snippet": "failing_websocket = MagicMock(spec=WebSocketManager)"
    },
    {
      "line": 394,
      "kind": "AsyncMock",
      "snippet": "failing_websocket.broadcast = AsyncMock("
    },
    {
      "line": 394,
      "kind": "Mock",
      "snippet": "failing_websocket.broadcast = AsyncMock("
    },
    {
      "line": 421,
      "kind": "MagicMock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 421,
      "kind": "Mock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 422,
      "kind": "MagicMock",
      "snippet": "websocket_manager = MagicMock(spec=WebSocketManager)"
    },
    {
      "line": 422,
      "kind": "Mock",
      "snippet": "websocket_manager = MagicMock(spec=WebSocketManager)"
    },
    {
      "line": 425,
      "kind": "MagicMock",
      "snippet": "failing_ab_service = MagicMock(spec=ABTestingService)"
    },
    {
      "line": 425,
      "kind": "Mock",
      "snippet": "failing_ab_service = MagicMock(spec=ABTestingService)"
    },
    {
      "line": 426,
      "kind": "AsyncMock",
      "snippet": "failing_ab_service.get_real_time_metrics = AsyncMock("
    },
    {
      "line": 426,
      "kind": "Mock",
      "snippet": "failing_ab_service.get_real_time_metrics = AsyncMock("
    },
    {
      "line": 450,
      "kind": "MagicMock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 450,
      "kind": "Mock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 451,
      "kind": "MagicMock",
      "snippet": "ab_service = MagicMock(spec=ABTestingService)"
    },
    {
      "line": 451,
      "kind": "Mock",
      "snippet": "ab_service = MagicMock(spec=ABTestingService)"
    },
    {
      "line": 488,
      "kind": "MagicMock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 488,
      "kind": "Mock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 489,
      "kind": "MagicMock",
      "snippet": "ab_service = MagicMock(spec=ABTestingService)"
    },
    {
      "line": 489,
      "kind": "Mock",
      "snippet": "ab_service = MagicMock(spec=ABTestingService)"
    },
    {
      "line": 539,
      "kind": "MagicMock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 539,
      "kind": "Mock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 540,
      "kind": "MagicMock",
      "snippet": "ab_service = MagicMock(spec=ABTestingService)"
    },
    {
      "line": 540,
      "kind": "Mock",
      "snippet": "ab_service = MagicMock(spec=ABTestingService)"
    },
    {
      "line": 572,
      "kind": "MagicMock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 572,
      "kind": "Mock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 573,
      "kind": "MagicMock",
      "snippet": "ab_service = MagicMock(spec=ABTestingService)"
    },
    {
      "line": 573,
      "kind": "Mock",
      "snippet": "ab_service = MagicMock(spec=ABTestingService)"
    },
    {
      "line": 620,
      "kind": "MagicMock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 620,
      "kind": "Mock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 621,
      "kind": "MagicMock",
      "snippet": "ab_service = MagicMock(spec=ABTestingService)"
    },
    {
      "line": 621,
      "kind": "Mock",
      "snippet": "ab_service = MagicMock(spec=ABTestingService)"
    },
    {
      "line": 654,
      "kind": "MagicMock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 654,
      "kind": "Mock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 655,
      "kind": "MagicMock",
      "snippet": "ab_service = MagicMock(spec=ABTestingService)"
    },
    {
      "line": 655,
      "kind": "Mock",
      "snippet": "ab_service = MagicMock(spec=ABTestingService)"
    },
    {
      "line": 656,
      "kind": "MagicMock",
      "snippet": "websocket_manager = MagicMock(spec=WebSocketManager)"
    },
    {
      "line": 656,
      "kind": "Mock",
      "snippet": "websocket_manager = MagicMock(spec=WebSocketManager)"
    },
    {
      "line": 683,
      "kind": "MagicMock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 683,
      "kind": "Mock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 684,
      "kind": "MagicMock",
      "snippet": "ab_service = MagicMock(spec=ABTestingService)"
    },
    {
      "line": 684,
      "kind": "Mock",
      "snippet": "ab_service = MagicMock(spec=ABTestingService)"
    }
  ],
  "tests/integration/cli/test_cli_command_paths.py": [
    {
      "line": 8,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import patch, MagicMock, AsyncMock"
    },
    {
      "line": 72,
      "kind": "patch",
      "snippet": "with patch('prompt_improver.cli.get_sessionmanager') as mock_session:"
    },
    {
      "line": 73,
      "kind": "MagicMock",
      "snippet": "mock_session.return_value = MagicMock()"
    },
    {
      "line": 73,
      "kind": "Mock",
      "snippet": "mock_session.return_value = MagicMock()"
    },
    {
      "line": 102,
      "kind": "patch",
      "snippet": "with patch('prompt_improver.cli.get_sessionmanager') as mock_session:"
    },
    {
      "line": 103,
      "kind": "MagicMock",
      "snippet": "mock_session.return_value = MagicMock()"
    },
    {
      "line": 103,
      "kind": "Mock",
      "snippet": "mock_session.return_value = MagicMock()"
    },
    {
      "line": 116,
      "kind": "patch",
      "snippet": "with patch('prompt_improver.cli.get_sessionmanager') as mock_session:"
    },
    {
      "line": 117,
      "kind": "MagicMock",
      "snippet": "mock_session.return_value = MagicMock()"
    },
    {
      "line": 117,
      "kind": "Mock",
      "snippet": "mock_session.return_value = MagicMock()"
    },
    {
      "line": 134,
      "kind": "patch",
      "snippet": "with patch('prompt_improver.cli.subprocess.Popen') as mock_popen:"
    },
    {
      "line": 135,
      "kind": "MagicMock",
      "snippet": "mock_process = MagicMock()"
    },
    {
      "line": 135,
      "kind": "Mock",
      "snippet": "mock_process = MagicMock()"
    },
    {
      "line": 172,
      "kind": "patch",
      "snippet": "with patch('prompt_improver.cli.os.kill') as mock_kill:"
    },
    {
      "line": 188,
      "kind": "patch",
      "snippet": "with patch('prompt_improver.cli.get_sessionmanager') as mock_session:"
    },
    {
      "line": 189,
      "kind": "MagicMock",
      "snippet": "mock_session.return_value = MagicMock()"
    },
    {
      "line": 189,
      "kind": "Mock",
      "snippet": "mock_session.return_value = MagicMock()"
    },
    {
      "line": 199,
      "kind": "patch",
      "snippet": "with patch('prompt_improver.cli.get_sessionmanager') as mock_session:"
    },
    {
      "line": 209,
      "kind": "patch",
      "snippet": "with patch('pathlib.Path.exists') as mock_exists:"
    },
    {
      "line": 224,
      "kind": "patch",
      "snippet": "with patch('prompt_improver.cli.get_sessionmanager') as mock_session:"
    },
    {
      "line": 225,
      "kind": "MagicMock",
      "snippet": "mock_session.return_value = MagicMock()"
    },
    {
      "line": 225,
      "kind": "Mock",
      "snippet": "mock_session.return_value = MagicMock()"
    },
    {
      "line": 236,
      "kind": "patch",
      "snippet": "with patch('prompt_improver.cli.subprocess.run') as mock_run:"
    },
    {
      "line": 251,
      "kind": "patch",
      "snippet": "with patch('prompt_improver.cli.get_sessionmanager') as mock_session:"
    },
    {
      "line": 252,
      "kind": "MagicMock",
      "snippet": "mock_session.return_value = MagicMock()"
    },
    {
      "line": 252,
      "kind": "Mock",
      "snippet": "mock_session.return_value = MagicMock()"
    }
  ],
  "tests/integration/cli/test_enhanced_commands.py": [
    {
      "line": 9,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, MagicMock, patch"
    },
    {
      "line": 26,
      "kind": "MagicMock",
      "snippet": "\"mlflow.start_run\": MagicMock(),"
    },
    {
      "line": 26,
      "kind": "Mock",
      "snippet": "\"mlflow.start_run\": MagicMock(),"
    },
    {
      "line": 27,
      "kind": "MagicMock",
      "snippet": "\"mlflow.log_params\": MagicMock(),"
    },
    {
      "line": 27,
      "kind": "Mock",
      "snippet": "\"mlflow.log_params\": MagicMock(),"
    },
    {
      "line": 28,
      "kind": "MagicMock",
      "snippet": "\"mlflow.log_metrics\": MagicMock(),"
    },
    {
      "line": 28,
      "kind": "Mock",
      "snippet": "\"mlflow.log_metrics\": MagicMock(),"
    },
    {
      "line": 29,
      "kind": "MagicMock",
      "snippet": "\"mlflow.sklearn.log_model\": MagicMock(),"
    },
    {
      "line": 29,
      "kind": "Mock",
      "snippet": "\"mlflow.sklearn.log_model\": MagicMock(),"
    },
    {
      "line": 30,
      "kind": "MagicMock",
      "snippet": "\"mlflow.end_run\": MagicMock(),"
    },
    {
      "line": 30,
      "kind": "Mock",
      "snippet": "\"mlflow.end_run\": MagicMock(),"
    },
    {
      "line": 67,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.cli.asyncio.run\", side_effect=mock_asyncio_run),"
    },
    {
      "line": 68,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.services.ml_integration.mlflow\") as mock_mlflow,"
    },
    {
      "line": 69,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.cli.console\") as mock_console,"
    },
    {
      "line": 73,
      "kind": "MagicMock",
      "snippet": "mock_mlflow.start_run.return_value.__enter__ = MagicMock()"
    },
    {
      "line": 73,
      "kind": "Mock",
      "snippet": "mock_mlflow.start_run.return_value.__enter__ = MagicMock()"
    },
    {
      "line": 74,
      "kind": "MagicMock",
      "snippet": "mock_mlflow.start_run.return_value.__exit__ = MagicMock()"
    },
    {
      "line": 74,
      "kind": "Mock",
      "snippet": "mock_mlflow.start_run.return_value.__exit__ = MagicMock()"
    },
    {
      "line": 97,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.cli.asyncio.run\", side_effect=mock_asyncio_run),"
    },
    {
      "line": 98,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.services.ml_integration.mlflow\") as mock_mlflow,"
    },
    {
      "line": 101,
      "kind": "MagicMock",
      "snippet": "mock_mlflow.start_run.return_value.__enter__ = MagicMock()"
    },
    {
      "line": 101,
      "kind": "Mock",
      "snippet": "mock_mlflow.start_run.return_value.__enter__ = MagicMock()"
    },
    {
      "line": 102,
      "kind": "MagicMock",
      "snippet": "mock_mlflow.start_run.return_value.__exit__ = MagicMock()"
    },
    {
      "line": 102,
      "kind": "Mock",
      "snippet": "mock_mlflow.start_run.return_value.__exit__ = MagicMock()"
    },
    {
      "line": 124,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.cli.asyncio.run\", side_effect=mock_asyncio_run),"
    },
    {
      "line": 125,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.services.ml_integration.mlflow\") as mock_mlflow,"
    },
    {
      "line": 128,
      "kind": "MagicMock",
      "snippet": "mock_mlflow.start_run.return_value.__enter__ = MagicMock()"
    },
    {
      "line": 128,
      "kind": "Mock",
      "snippet": "mock_mlflow.start_run.return_value.__enter__ = MagicMock()"
    },
    {
      "line": 129,
      "kind": "MagicMock",
      "snippet": "mock_mlflow.start_run.return_value.__exit__ = MagicMock()"
    },
    {
      "line": 129,
      "kind": "Mock",
      "snippet": "mock_mlflow.start_run.return_value.__exit__ = MagicMock()"
    },
    {
      "line": 144,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.cli.asyncio.run\", side_effect=mock_asyncio_run),"
    },
    {
      "line": 145,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.cli.console\") as mock_console,"
    },
    {
      "line": 168,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.cli.asyncio.run\", side_effect=mock_asyncio_run),"
    },
    {
      "line": 169,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.services.ml_integration.mlflow\") as mock_mlflow,"
    },
    {
      "line": 172,
      "kind": "MagicMock",
      "snippet": "mock_mlflow.start_run.return_value.__enter__ = MagicMock()"
    },
    {
      "line": 172,
      "kind": "Mock",
      "snippet": "mock_mlflow.start_run.return_value.__enter__ = MagicMock()"
    },
    {
      "line": 173,
      "kind": "MagicMock",
      "snippet": "mock_mlflow.start_run.return_value.__exit__ = MagicMock()"
    },
    {
      "line": 173,
      "kind": "Mock",
      "snippet": "mock_mlflow.start_run.return_value.__exit__ = MagicMock()"
    },
    {
      "line": 199,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.cli.asyncio.run\", side_effect=mock_asyncio_run),"
    },
    {
      "line": 200,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.services.ml_integration.mlflow\") as mock_mlflow,"
    },
    {
      "line": 203,
      "kind": "MagicMock",
      "snippet": "mock_mlflow.start_run.return_value.__enter__ = MagicMock()"
    },
    {
      "line": 203,
      "kind": "Mock",
      "snippet": "mock_mlflow.start_run.return_value.__enter__ = MagicMock()"
    },
    {
      "line": 204,
      "kind": "MagicMock",
      "snippet": "mock_mlflow.start_run.return_value.__exit__ = MagicMock()"
    },
    {
      "line": 204,
      "kind": "Mock",
      "snippet": "mock_mlflow.start_run.return_value.__exit__ = MagicMock()"
    },
    {
      "line": 230,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.cli.asyncio.run\", side_effect=mock_asyncio_run):"
    },
    {
      "line": 252,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.cli.asyncio.run\", side_effect=mock_asyncio_run):"
    },
    {
      "line": 288,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.cli.asyncio.run\", side_effect=mock_asyncio_run),"
    },
    {
      "line": 289,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.services.ml_integration.mlflow\") as mock_mlflow,"
    },
    {
      "line": 315,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.cli.asyncio.run\", side_effect=mock_asyncio_run),"
    },
    {
      "line": 316,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.services.ml_integration.mlflow\") as mock_mlflow,"
    },
    {
      "line": 331,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.cli.asyncio.run\", side_effect=mock_asyncio_run),"
    },
    {
      "line": 332,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.services.ml_integration.mlflow\") as mock_mlflow,"
    },
    {
      "line": 373,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 384,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.cli.asyncio.run\") as mock_run,"
    },
    {
      "line": 385,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.cli.console.print\") as mock_print,"
    },
    {
      "line": 411,
      "kind": "patch",
      "snippet": "patch("
    },
    {
      "line": 414,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.cli.sessionmanager\") as mock_sessionmanager,"
    },
    {
      "line": 415,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.services.ml_integration.mlflow\") as mock_mlflow,"
    },
    {
      "line": 416,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.cli.console\") as mock_console,"
    },
    {
      "line": 419,
      "kind": "AsyncMock",
      "snippet": "mock_session = AsyncMock()"
    },
    {
      "line": 419,
      "kind": "Mock",
      "snippet": "mock_session = AsyncMock()"
    },
    {
      "line": 420,
      "kind": "AsyncMock",
      "snippet": "mock_sessionmanager.session.return_value.__aenter__ = AsyncMock("
    },
    {
      "line": 420,
      "kind": "Mock",
      "snippet": "mock_sessionmanager.session.return_value.__aenter__ = AsyncMock("
    },
    {
      "line": 423,
      "kind": "AsyncMock",
      "snippet": "mock_sessionmanager.session.return_value.__aexit__ = AsyncMock("
    },
    {
      "line": 423,
      "kind": "Mock",
      "snippet": "mock_sessionmanager.session.return_value.__aexit__ = AsyncMock("
    },
    {
      "line": 456,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.cli.asyncio.run\") as mock_run,"
    },
    {
      "line": 457,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.cli.Table\") as mock_table,"
    },
    {
      "line": 458,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.cli.console.print\"),"
    },
    {
      "line": 460,
      "kind": "MagicMock",
      "snippet": "mock_table_instance = MagicMock()"
    },
    {
      "line": 460,
      "kind": "Mock",
      "snippet": "mock_table_instance = MagicMock()"
    },
    {
      "line": 472,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.cli.asyncio.run\") as mock_run,"
    },
    {
      "line": 473,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.cli.Progress\") as mock_progress,"
    },
    {
      "line": 475,
      "kind": "MagicMock",
      "snippet": "mock_progress_instance = MagicMock()"
    },
    {
      "line": 475,
      "kind": "Mock",
      "snippet": "mock_progress_instance = MagicMock()"
    },
    {
      "line": 492,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 509,
      "kind": "patch",
      "snippet": "patch("
    },
    {
      "line": 512,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.cli.sessionmanager\") as mock_sessionmanager,"
    },
    {
      "line": 515,
      "kind": "AsyncMock",
      "snippet": "mock_session = AsyncMock()"
    },
    {
      "line": 515,
      "kind": "Mock",
      "snippet": "mock_session = AsyncMock()"
    },
    {
      "line": 516,
      "kind": "AsyncMock",
      "snippet": "mock_sessionmanager.session.return_value.__aenter__ = AsyncMock("
    },
    {
      "line": 516,
      "kind": "Mock",
      "snippet": "mock_sessionmanager.session.return_value.__aenter__ = AsyncMock("
    },
    {
      "line": 519,
      "kind": "AsyncMock",
      "snippet": "mock_sessionmanager.session.return_value.__aexit__ = AsyncMock("
    },
    {
      "line": 519,
      "kind": "Mock",
      "snippet": "mock_sessionmanager.session.return_value.__aexit__ = AsyncMock("
    },
    {
      "line": 538,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 560,
      "kind": "patch",
      "snippet": "patch("
    },
    {
      "line": 563,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.cli.sessionmanager\") as mock_sessionmanager,"
    },
    {
      "line": 564,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.services.ml_integration.mlflow\") as mock_mlflow,"
    },
    {
      "line": 567,
      "kind": "AsyncMock",
      "snippet": "mock_session = AsyncMock()"
    },
    {
      "line": 567,
      "kind": "Mock",
      "snippet": "mock_session = AsyncMock()"
    },
    {
      "line": 568,
      "kind": "AsyncMock",
      "snippet": "mock_sessionmanager.session.return_value.__aenter__ = AsyncMock("
    },
    {
      "line": 568,
      "kind": "Mock",
      "snippet": "mock_sessionmanager.session.return_value.__aenter__ = AsyncMock("
    },
    {
      "line": 571,
      "kind": "AsyncMock",
      "snippet": "mock_sessionmanager.session.return_value.__aexit__ = AsyncMock("
    },
    {
      "line": 571,
      "kind": "Mock",
      "snippet": "mock_sessionmanager.session.return_value.__aexit__ = AsyncMock("
    },
    {
      "line": 599,
      "kind": "patch",
      "snippet": "patch("
    },
    {
      "line": 602,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.cli.sessionmanager\") as mock_sessionmanager,"
    },
    {
      "line": 603,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.services.ml_integration.mlflow\") as mock_mlflow,"
    },
    {
      "line": 606,
      "kind": "AsyncMock",
      "snippet": "mock_session = AsyncMock()"
    },
    {
      "line": 606,
      "kind": "Mock",
      "snippet": "mock_session = AsyncMock()"
    },
    {
      "line": 607,
      "kind": "AsyncMock",
      "snippet": "mock_sessionmanager.session.return_value.__aenter__ = AsyncMock("
    },
    {
      "line": 607,
      "kind": "Mock",
      "snippet": "mock_sessionmanager.session.return_value.__aenter__ = AsyncMock("
    },
    {
      "line": 610,
      "kind": "AsyncMock",
      "snippet": "mock_sessionmanager.session.return_value.__aexit__ = AsyncMock("
    },
    {
      "line": 610,
      "kind": "Mock",
      "snippet": "mock_sessionmanager.session.return_value.__aexit__ = AsyncMock("
    },
    {
      "line": 628,
      "kind": "patch",
      "snippet": "patch("
    },
    {
      "line": 631,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.cli.sessionmanager\") as mock_sessionmanager,"
    },
    {
      "line": 634,
      "kind": "AsyncMock",
      "snippet": "mock_session = AsyncMock()"
    },
    {
      "line": 634,
      "kind": "Mock",
      "snippet": "mock_session = AsyncMock()"
    },
    {
      "line": 635,
      "kind": "AsyncMock",
      "snippet": "mock_sessionmanager.session.return_value.__aenter__ = AsyncMock("
    },
    {
      "line": 635,
      "kind": "Mock",
      "snippet": "mock_sessionmanager.session.return_value.__aenter__ = AsyncMock("
    },
    {
      "line": 638,
      "kind": "AsyncMock",
      "snippet": "mock_sessionmanager.session.return_value.__aexit__ = AsyncMock("
    },
    {
      "line": 638,
      "kind": "Mock",
      "snippet": "mock_sessionmanager.session.return_value.__aexit__ = AsyncMock("
    },
    {
      "line": 675,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 785,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 789,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.cli.discover_patterns\") as mock_cmd:"
    },
    {
      "line": 831,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 835,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.cli.ml_status\") as mock_cmd:"
    },
    {
      "line": 852,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 856,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.cli.optimize_rules\") as mock_cmd:"
    },
    {
      "line": 913,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 964,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 989,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.cli.asyncio.run\", side_effect=mock_asyncio_run):"
    },
    {
      "line": 1053,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.cli.asyncio.run\") as mock_run:"
    },
    {
      "line": 1101,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.cli.asyncio.run\") as mock_run:"
    },
    {
      "line": 1128,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.cli.asyncio.run\") as mock_run:"
    }
  ],
  "tests/integration/security/test_end_to_end_security.py": [
    {
      "line": 25,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, MagicMock, patch"
    },
    {
      "line": 575,
      "kind": "mock_class",
      "snippet": "class MockModel:"
    },
    {
      "line": 613,
      "kind": "mock_class",
      "snippet": "class MockModel:"
    },
    {
      "line": 807,
      "kind": "mock_class",
      "snippet": "class MockModel:"
    }
  ],
  "tests/integration/security/test_security_integration.py": [
    {
      "line": 22,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, MagicMock, patch"
    },
    {
      "line": 336,
      "kind": "sample_data_dict",
      "snippet": "valid_request = {\"method\": \"test\", \"data\": \"test\"}"
    },
    {
      "line": 371,
      "kind": "mock_class",
      "snippet": "class MockPrivacyBudgetTracker:"
    },
    {
      "line": 729,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 733,
      "kind": "AsyncMock",
      "snippet": "mock_session = AsyncMock()"
    },
    {
      "line": 733,
      "kind": "Mock",
      "snippet": "mock_session = AsyncMock()"
    },
    {
      "line": 734,
      "kind": "MagicMock",
      "snippet": "mock_audit_result = MagicMock()"
    },
    {
      "line": 734,
      "kind": "Mock",
      "snippet": "mock_audit_result = MagicMock()"
    },
    {
      "line": 743,
      "kind": "MagicMock",
      "snippet": "mock_types_result = MagicMock()"
    },
    {
      "line": 743,
      "kind": "Mock",
      "snippet": "mock_types_result = MagicMock()"
    }
  ],
  "tests/integration/services/test_ab_testing.py": [
    {
      "line": 7,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, MagicMock, patch"
    }
  ],
  "tests/integration/services/test_hdbscan_clustering.py": [
    {
      "line": 7,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, MagicMock, patch"
    },
    {
      "line": 67,
      "kind": "AsyncMock",
      "snippet": "mock_db_session.execute = AsyncMock()"
    },
    {
      "line": 67,
      "kind": "Mock",
      "snippet": "mock_db_session.execute = AsyncMock()"
    },
    {
      "line": 68,
      "kind": "AsyncMock",
      "snippet": "mock_db_session.scalars = AsyncMock()"
    },
    {
      "line": 68,
      "kind": "Mock",
      "snippet": "mock_db_session.scalars = AsyncMock()"
    },
    {
      "line": 118,
      "kind": "AsyncMock",
      "snippet": "mock_db_session = AsyncMock()"
    },
    {
      "line": 118,
      "kind": "Mock",
      "snippet": "mock_db_session = AsyncMock()"
    },
    {
      "line": 119,
      "kind": "AsyncMock",
      "snippet": "mock_db_session.execute = AsyncMock()"
    },
    {
      "line": 119,
      "kind": "Mock",
      "snippet": "mock_db_session.execute = AsyncMock()"
    },
    {
      "line": 180,
      "kind": "AsyncMock",
      "snippet": "mock_db_session.execute = AsyncMock()"
    },
    {
      "line": 180,
      "kind": "Mock",
      "snippet": "mock_db_session.execute = AsyncMock()"
    },
    {
      "line": 234,
      "kind": "AsyncMock",
      "snippet": "mock_db_session.execute = AsyncMock()"
    },
    {
      "line": 234,
      "kind": "Mock",
      "snippet": "mock_db_session.execute = AsyncMock()"
    },
    {
      "line": 287,
      "kind": "AsyncMock",
      "snippet": "mock_db_session.execute = AsyncMock()"
    },
    {
      "line": 287,
      "kind": "Mock",
      "snippet": "mock_db_session.execute = AsyncMock()"
    },
    {
      "line": 378,
      "kind": "AsyncMock",
      "snippet": "mock_db_session.execute = AsyncMock()"
    },
    {
      "line": 378,
      "kind": "Mock",
      "snippet": "mock_db_session.execute = AsyncMock()"
    },
    {
      "line": 408,
      "kind": "patch",
      "snippet": "patch("
    }
  ],
  "tests/integration/services/test_health_system.py": [
    {
      "line": 6,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, MagicMock, patch"
    },
    {
      "line": 26,
      "kind": "mock_class",
      "snippet": "class MockHealthChecker(HealthChecker):"
    },
    {
      "line": 59,
      "kind": "mock_fixture",
      "snippet": "def mock_health_checkers():"
    },
    {
      "line": 280,
      "kind": "patch",
      "snippet": "@patch(\"prompt_improver.services.health.checkers.get_session\")"
    },
    {
      "line": 280,
      "kind": "patch_decorator",
      "snippet": "@patch(\"prompt_improver.services.health.checkers.get_session\")"
    },
    {
      "line": 284,
      "kind": "AsyncMock",
      "snippet": "mock_session = AsyncMock()"
    },
    {
      "line": 284,
      "kind": "Mock",
      "snippet": "mock_session = AsyncMock()"
    },
    {
      "line": 285,
      "kind": "MagicMock",
      "snippet": "mock_result = MagicMock()"
    },
    {
      "line": 285,
      "kind": "Mock",
      "snippet": "mock_result = MagicMock()"
    },
    {
      "line": 301,
      "kind": "patch",
      "snippet": "@patch(\"prompt_improver.services.health.checkers.get_session\")"
    },
    {
      "line": 301,
      "kind": "patch_decorator",
      "snippet": "@patch(\"prompt_improver.services.health.checkers.get_session\")"
    },
    {
      "line": 315,
      "kind": "patch",
      "snippet": "@patch(\"prompt_improver.mcp_server.mcp_server.improve_prompt\")"
    },
    {
      "line": 315,
      "kind": "patch_decorator",
      "snippet": "@patch(\"prompt_improver.mcp_server.mcp_server.improve_prompt\")"
    },
    {
      "line": 319,
      "kind": "sample_data_dict",
      "snippet": "mock_improve_prompt.return_value = {\"improved\": \"test\"}"
    },
    {
      "line": 328,
      "kind": "patch",
      "snippet": "@patch(\"prompt_improver.mcp_server.mcp_server.improve_prompt\")"
    },
    {
      "line": 328,
      "kind": "patch_decorator",
      "snippet": "@patch(\"prompt_improver.mcp_server.mcp_server.improve_prompt\")"
    },
    {
      "line": 341,
      "kind": "patch",
      "snippet": "@patch(\"psutil.virtual_memory\")"
    },
    {
      "line": 341,
      "kind": "patch_decorator",
      "snippet": "@patch(\"psutil.virtual_memory\")"
    },
    {
      "line": 342,
      "kind": "patch",
      "snippet": "@patch(\"psutil.disk_usage\")"
    },
    {
      "line": 342,
      "kind": "patch_decorator",
      "snippet": "@patch(\"psutil.disk_usage\")"
    },
    {
      "line": 343,
      "kind": "patch",
      "snippet": "@patch(\"psutil.cpu_percent\")"
    },
    {
      "line": 343,
      "kind": "patch_decorator",
      "snippet": "@patch(\"psutil.cpu_percent\")"
    },
    {
      "line": 361,
      "kind": "patch",
      "snippet": "@patch(\"psutil.virtual_memory\")"
    },
    {
      "line": 361,
      "kind": "patch_decorator",
      "snippet": "@patch(\"psutil.virtual_memory\")"
    },
    {
      "line": 362,
      "kind": "patch",
      "snippet": "@patch(\"psutil.disk_usage\")"
    },
    {
      "line": 362,
      "kind": "patch_decorator",
      "snippet": "@patch(\"psutil.disk_usage\")"
    },
    {
      "line": 363,
      "kind": "patch",
      "snippet": "@patch(\"psutil.cpu_percent\")"
    },
    {
      "line": 363,
      "kind": "patch_decorator",
      "snippet": "@patch(\"psutil.cpu_percent\")"
    },
    {
      "line": 386,
      "kind": "patch",
      "snippet": "@patch(\"prompt_improver.services.health.checkers.get_session\")"
    },
    {
      "line": 386,
      "kind": "patch_decorator",
      "snippet": "@patch(\"prompt_improver.services.health.checkers.get_session\")"
    },
    {
      "line": 387,
      "kind": "patch",
      "snippet": "@patch(\"prompt_improver.mcp_server.mcp_server.improve_prompt\")"
    },
    {
      "line": 387,
      "kind": "patch_decorator",
      "snippet": "@patch(\"prompt_improver.mcp_server.mcp_server.improve_prompt\")"
    },
    {
      "line": 388,
      "kind": "patch",
      "snippet": "@patch(\"prompt_improver.services.analytics.AnalyticsService\")"
    },
    {
      "line": 388,
      "kind": "patch_decorator",
      "snippet": "@patch(\"prompt_improver.services.analytics.AnalyticsService\")"
    },
    {
      "line": 389,
      "kind": "patch",
      "snippet": "@patch(\"prompt_improver.services.ml_integration.get_ml_service\")"
    },
    {
      "line": 389,
      "kind": "patch_decorator",
      "snippet": "@patch(\"prompt_improver.services.ml_integration.get_ml_service\")"
    },
    {
      "line": 390,
      "kind": "patch",
      "snippet": "@patch(\"psutil.virtual_memory\")"
    },
    {
      "line": 390,
      "kind": "patch_decorator",
      "snippet": "@patch(\"psutil.virtual_memory\")"
    },
    {
      "line": 391,
      "kind": "patch",
      "snippet": "@patch(\"psutil.disk_usage\")"
    },
    {
      "line": 391,
      "kind": "patch_decorator",
      "snippet": "@patch(\"psutil.disk_usage\")"
    },
    {
      "line": 392,
      "kind": "patch",
      "snippet": "@patch(\"psutil.cpu_percent\")"
    },
    {
      "line": 392,
      "kind": "patch_decorator",
      "snippet": "@patch(\"psutil.cpu_percent\")"
    },
    {
      "line": 405,
      "kind": "AsyncMock",
      "snippet": "mock_session = AsyncMock()"
    },
    {
      "line": 405,
      "kind": "Mock",
      "snippet": "mock_session = AsyncMock()"
    },
    {
      "line": 406,
      "kind": "MagicMock",
      "snippet": "mock_result = MagicMock()"
    },
    {
      "line": 406,
      "kind": "Mock",
      "snippet": "mock_result = MagicMock()"
    },
    {
      "line": 424,
      "kind": "AsyncMock",
      "snippet": "mock_analytics = AsyncMock()"
    },
    {
      "line": 424,
      "kind": "Mock",
      "snippet": "mock_analytics = AsyncMock()"
    },
    {
      "line": 428,
      "kind": "MagicMock",
      "snippet": "mock_get_ml_service.return_value = MagicMock()"
    },
    {
      "line": 428,
      "kind": "Mock",
      "snippet": "mock_get_ml_service.return_value = MagicMock()"
    }
  ],
  "tests/integration/services/test_ml_integration.py": [
    {
      "line": 10,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, MagicMock, patch"
    },
    {
      "line": 38,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.services.ml_integration.mlflow\"):"
    },
    {
      "line": 51,
      "kind": "patch",
      "snippet": "patch(\"mlflow.start_run\"),"
    },
    {
      "line": 52,
      "kind": "patch",
      "snippet": "patch(\"mlflow.log_params\"),"
    },
    {
      "line": 53,
      "kind": "patch",
      "snippet": "patch(\"mlflow.log_metrics\"),"
    },
    {
      "line": 54,
      "kind": "patch",
      "snippet": "patch(\"mlflow.sklearn.log_model\"),"
    },
    {
      "line": 55,
      "kind": "patch",
      "snippet": "patch(\"mlflow.active_run\") as mock_run,"
    },
    {
      "line": 110,
      "kind": "MagicMock",
      "snippet": "mock_model = MagicMock()"
    },
    {
      "line": 110,
      "kind": "Mock",
      "snippet": "mock_model = MagicMock()"
    },
    {
      "line": 176,
      "kind": "patch",
      "snippet": "patch(\"mlflow.start_run\"),"
    },
    {
      "line": 177,
      "kind": "patch",
      "snippet": "patch(\"mlflow.log_params\"),"
    },
    {
      "line": 178,
      "kind": "patch",
      "snippet": "patch(\"mlflow.log_metrics\"),"
    },
    {
      "line": 179,
      "kind": "patch",
      "snippet": "patch(\"mlflow.sklearn.log_model\"),"
    },
    {
      "line": 180,
      "kind": "patch",
      "snippet": "patch(\"mlflow.active_run\") as mock_run,"
    },
    {
      "line": 259,
      "kind": "MagicMock",
      "snippet": "mock_result = MagicMock()"
    },
    {
      "line": 259,
      "kind": "Mock",
      "snippet": "mock_result = MagicMock()"
    },
    {
      "line": 320,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import patch"
    },
    {
      "line": 328,
      "kind": "patch",
      "snippet": "with patch('prompt_improver.services.ml_integration.redis_client') as mock_redis:"
    },
    {
      "line": 329,
      "kind": "AsyncMock",
      "snippet": "mock_redis.publish = AsyncMock()"
    },
    {
      "line": 329,
      "kind": "Mock",
      "snippet": "mock_redis.publish = AsyncMock()"
    },
    {
      "line": 362,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.services.ml_integration.mlflow\"):"
    },
    {
      "line": 372,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.services.ml_integration.mlflow\"):"
    },
    {
      "line": 387,
      "kind": "MagicMock",
      "snippet": "mock_model = MagicMock()"
    },
    {
      "line": 387,
      "kind": "Mock",
      "snippet": "mock_model = MagicMock()"
    },
    {
      "line": 408,
      "kind": "patch",
      "snippet": "patch(\"optuna.create_study\") as mock_study_create,"
    },
    {
      "line": 409,
      "kind": "patch",
      "snippet": "patch(\"mlflow.start_run\"),"
    },
    {
      "line": 410,
      "kind": "patch",
      "snippet": "patch(\"mlflow.active_run\") as mock_run,"
    },
    {
      "line": 412,
      "kind": "MagicMock",
      "snippet": "mock_study = MagicMock()"
    },
    {
      "line": 412,
      "kind": "Mock",
      "snippet": "mock_study = MagicMock()"
    },
    {
      "line": 458,
      "kind": "patch",
      "snippet": "with patch(\"mlflow.start_run\"), patch(\"mlflow.active_run\") as mock_run:"
    },
    {
      "line": 475,
      "kind": "patch",
      "snippet": "with patch(\"mlflow.start_run\", side_effect=Exception(\"MLflow unavailable\")):"
    },
    {
      "line": 507,
      "kind": "MagicMock",
      "snippet": "mock_model = MagicMock()"
    },
    {
      "line": 507,
      "kind": "Mock",
      "snippet": "mock_model = MagicMock()"
    },
    {
      "line": 589,
      "kind": "patch",
      "snippet": "patch(\"mlflow.start_run\"),"
    },
    {
      "line": 590,
      "kind": "patch",
      "snippet": "patch(\"mlflow.active_run\") as mock_run,"
    },
    {
      "line": 591,
      "kind": "patch",
      "snippet": "patch(\"mlflow.end_run\"),"
    },
    {
      "line": 592,
      "kind": "patch",
      "snippet": "patch(\"mlflow.log_params\"),"
    },
    {
      "line": 593,
      "kind": "patch",
      "snippet": "patch(\"mlflow.log_metrics\"),"
    },
    {
      "line": 594,
      "kind": "patch",
      "snippet": "patch(\"mlflow.sklearn.log_model\"),"
    },
    {
      "line": 596,
      "kind": "MagicMock",
      "snippet": "mock_run_info = MagicMock()"
    },
    {
      "line": 596,
      "kind": "Mock",
      "snippet": "mock_run_info = MagicMock()"
    },
    {
      "line": 686,
      "kind": "MagicMock",
      "snippet": "mock_model = MagicMock()"
    },
    {
      "line": 686,
      "kind": "Mock",
      "snippet": "mock_model = MagicMock()"
    },
    {
      "line": 767,
      "kind": "patch",
      "snippet": "patch(\"mlflow.start_run\"),"
    },
    {
      "line": 768,
      "kind": "patch",
      "snippet": "patch(\"mlflow.active_run\") as mock_run,"
    },
    {
      "line": 769,
      "kind": "patch",
      "snippet": "patch(\"mlflow.end_run\"),"
    },
    {
      "line": 770,
      "kind": "patch",
      "snippet": "patch(\"mlflow.log_params\"),"
    },
    {
      "line": 771,
      "kind": "patch",
      "snippet": "patch(\"mlflow.log_metrics\"),"
    },
    {
      "line": 772,
      "kind": "patch",
      "snippet": "patch(\"mlflow.sklearn.log_model\"),"
    },
    {
      "line": 774,
      "kind": "MagicMock",
      "snippet": "mock_run_info = MagicMock()"
    },
    {
      "line": 774,
      "kind": "Mock",
      "snippet": "mock_run_info = MagicMock()"
    },
    {
      "line": 834,
      "kind": "MagicMock",
      "snippet": "mock_result = MagicMock()"
    },
    {
      "line": 834,
      "kind": "Mock",
      "snippet": "mock_result = MagicMock()"
    },
    {
      "line": 874,
      "kind": "MagicMock",
      "snippet": "mock_model = MagicMock()"
    },
    {
      "line": 874,
      "kind": "Mock",
      "snippet": "mock_model = MagicMock()"
    },
    {
      "line": 960,
      "kind": "patch",
      "snippet": "with patch(\"mlflow.start_run\"), patch(\"mlflow.active_run\") as mock_run:"
    },
    {
      "line": 1066,
      "kind": "patch",
      "snippet": "patch(\"mlflow.start_run\"),"
    },
    {
      "line": 1067,
      "kind": "patch",
      "snippet": "patch(\"mlflow.active_run\") as mock_run,"
    },
    {
      "line": 1068,
      "kind": "patch",
      "snippet": "patch(\"mlflow.end_run\"),"
    },
    {
      "line": 1069,
      "kind": "patch",
      "snippet": "patch(\"mlflow.log_params\"),"
    },
    {
      "line": 1070,
      "kind": "patch",
      "snippet": "patch(\"mlflow.log_metrics\"),"
    },
    {
      "line": 1071,
      "kind": "patch",
      "snippet": "patch(\"mlflow.sklearn.log_model\"),"
    },
    {
      "line": 1073,
      "kind": "MagicMock",
      "snippet": "mock_run_info = MagicMock()"
    },
    {
      "line": 1073,
      "kind": "Mock",
      "snippet": "mock_run_info = MagicMock()"
    }
  ],
  "tests/integration/services/test_model_cache_registry.py": [
    {
      "line": 8,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import MagicMock, patch"
    },
    {
      "line": 41,
      "kind": "MagicMock",
      "snippet": "mock_model = MagicMock()"
    },
    {
      "line": 41,
      "kind": "Mock",
      "snippet": "mock_model = MagicMock()"
    },
    {
      "line": 56,
      "kind": "MagicMock",
      "snippet": "mock_model = MagicMock()"
    },
    {
      "line": 56,
      "kind": "Mock",
      "snippet": "mock_model = MagicMock()"
    },
    {
      "line": 70,
      "kind": "MagicMock",
      "snippet": "mock_models = {f\"model_{i}\": MagicMock() for i in range(model_count)}"
    },
    {
      "line": 70,
      "kind": "Mock",
      "snippet": "mock_models = {f\"model_{i}\": MagicMock() for i in range(model_count)}"
    },
    {
      "line": 81,
      "kind": "MagicMock",
      "snippet": "large_model = MagicMock()"
    },
    {
      "line": 81,
      "kind": "Mock",
      "snippet": "large_model = MagicMock()"
    },
    {
      "line": 95,
      "kind": "MagicMock",
      "snippet": "mock_model = MagicMock()"
    },
    {
      "line": 95,
      "kind": "Mock",
      "snippet": "mock_model = MagicMock()"
    },
    {
      "line": 137,
      "kind": "MagicMock",
      "snippet": "mock_model = MagicMock()"
    },
    {
      "line": 137,
      "kind": "Mock",
      "snippet": "mock_model = MagicMock()"
    },
    {
      "line": 163,
      "kind": "MagicMock",
      "snippet": "mock_model = MagicMock()"
    },
    {
      "line": 163,
      "kind": "Mock",
      "snippet": "mock_model = MagicMock()"
    },
    {
      "line": 171,
      "kind": "MagicMock",
      "snippet": "new_model = MagicMock()"
    },
    {
      "line": 171,
      "kind": "Mock",
      "snippet": "new_model = MagicMock()"
    },
    {
      "line": 188,
      "kind": "MagicMock",
      "snippet": "mock_model = MagicMock()"
    },
    {
      "line": 188,
      "kind": "Mock",
      "snippet": "mock_model = MagicMock()"
    }
  ],
  "tests/integration/services/test_prompt_improvement.py": [
    {
      "line": 8,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, MagicMock, patch"
    },
    {
      "line": 63,
      "kind": "AsyncMock",
      "snippet": "mock_ml_service = AsyncMock()"
    },
    {
      "line": 63,
      "kind": "Mock",
      "snippet": "mock_ml_service = AsyncMock()"
    },
    {
      "line": 70,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 96,
      "kind": "MagicMock",
      "snippet": "feedback_result = MagicMock()"
    },
    {
      "line": 96,
      "kind": "Mock",
      "snippet": "feedback_result = MagicMock()"
    },
    {
      "line": 111,
      "kind": "MagicMock",
      "snippet": "feedback_result = MagicMock()"
    },
    {
      "line": 111,
      "kind": "Mock",
      "snippet": "feedback_result = MagicMock()"
    },
    {
      "line": 115,
      "kind": "MagicMock",
      "snippet": "perf_result = MagicMock()"
    },
    {
      "line": 115,
      "kind": "Mock",
      "snippet": "perf_result = MagicMock()"
    },
    {
      "line": 135,
      "kind": "MagicMock",
      "snippet": "feedback_result = MagicMock()"
    },
    {
      "line": 135,
      "kind": "Mock",
      "snippet": "feedback_result = MagicMock()"
    },
    {
      "line": 138,
      "kind": "MagicMock",
      "snippet": "perf_result = MagicMock()"
    },
    {
      "line": 138,
      "kind": "Mock",
      "snippet": "perf_result = MagicMock()"
    },
    {
      "line": 143,
      "kind": "MagicMock",
      "snippet": "mock_row = MagicMock()"
    },
    {
      "line": 143,
      "kind": "Mock",
      "snippet": "mock_row = MagicMock()"
    },
    {
      "line": 152,
      "kind": "AsyncMock",
      "snippet": "mock_ml_service = AsyncMock()"
    },
    {
      "line": 152,
      "kind": "Mock",
      "snippet": "mock_ml_service = AsyncMock()"
    },
    {
      "line": 158,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 177,
      "kind": "MagicMock",
      "snippet": "perf_result = MagicMock()"
    },
    {
      "line": 177,
      "kind": "Mock",
      "snippet": "perf_result = MagicMock()"
    },
    {
      "line": 182,
      "kind": "MagicMock",
      "snippet": "mock_row = MagicMock()"
    },
    {
      "line": 182,
      "kind": "Mock",
      "snippet": "mock_row = MagicMock()"
    },
    {
      "line": 191,
      "kind": "AsyncMock",
      "snippet": "mock_ml_service = AsyncMock()"
    },
    {
      "line": 191,
      "kind": "Mock",
      "snippet": "mock_ml_service = AsyncMock()"
    },
    {
      "line": 199,
      "kind": "patch",
      "snippet": "patch("
    },
    {
      "line": 203,
      "kind": "patch",
      "snippet": "patch("
    },
    {
      "line": 230,
      "kind": "MagicMock",
      "snippet": "MagicMock("
    },
    {
      "line": 230,
      "kind": "Mock",
      "snippet": "MagicMock("
    },
    {
      "line": 241,
      "kind": "MagicMock",
      "snippet": "perf_result = MagicMock()"
    },
    {
      "line": 241,
      "kind": "Mock",
      "snippet": "perf_result = MagicMock()"
    },
    {
      "line": 246,
      "kind": "AsyncMock",
      "snippet": "mock_ml_service = AsyncMock()"
    },
    {
      "line": 246,
      "kind": "Mock",
      "snippet": "mock_ml_service = AsyncMock()"
    },
    {
      "line": 257,
      "kind": "patch",
      "snippet": "patch("
    },
    {
      "line": 261,
      "kind": "patch",
      "snippet": "patch("
    },
    {
      "line": 283,
      "kind": "MagicMock",
      "snippet": "insufficient_data = [MagicMock()] * 15  # Only 15 samples"
    },
    {
      "line": 283,
      "kind": "Mock",
      "snippet": "insufficient_data = [MagicMock()] * 15  # Only 15 samples"
    },
    {
      "line": 285,
      "kind": "MagicMock",
      "snippet": "perf_result = MagicMock()"
    },
    {
      "line": 285,
      "kind": "Mock",
      "snippet": "perf_result = MagicMock()"
    },
    {
      "line": 289,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 309,
      "kind": "MagicMock",
      "snippet": "MagicMock("
    },
    {
      "line": 309,
      "kind": "Mock",
      "snippet": "MagicMock("
    },
    {
      "line": 324,
      "kind": "MagicMock",
      "snippet": "perf_result = MagicMock()"
    },
    {
      "line": 324,
      "kind": "Mock",
      "snippet": "perf_result = MagicMock()"
    },
    {
      "line": 328,
      "kind": "AsyncMock",
      "snippet": "mock_ml_service = AsyncMock()"
    },
    {
      "line": 328,
      "kind": "Mock",
      "snippet": "mock_ml_service = AsyncMock()"
    },
    {
      "line": 332,
      "kind": "patch",
      "snippet": "patch("
    },
    {
      "line": 336,
      "kind": "patch",
      "snippet": "patch("
    },
    {
      "line": 370,
      "kind": "AsyncMock",
      "snippet": "mock_ml_service = AsyncMock()"
    },
    {
      "line": 370,
      "kind": "Mock",
      "snippet": "mock_ml_service = AsyncMock()"
    },
    {
      "line": 383,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 405,
      "kind": "AsyncMock",
      "snippet": "mock_ml_service = AsyncMock()"
    },
    {
      "line": 405,
      "kind": "Mock",
      "snippet": "mock_ml_service = AsyncMock()"
    },
    {
      "line": 411,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 426,
      "kind": "AsyncMock",
      "snippet": "mock_ml_service = AsyncMock()"
    },
    {
      "line": 426,
      "kind": "Mock",
      "snippet": "mock_ml_service = AsyncMock()"
    },
    {
      "line": 439,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 461,
      "kind": "MagicMock",
      "snippet": "feedback_result = MagicMock()"
    },
    {
      "line": 461,
      "kind": "Mock",
      "snippet": "feedback_result = MagicMock()"
    },
    {
      "line": 487,
      "kind": "patch",
      "snippet": "patch("
    },
    {
      "line": 490,
      "kind": "patch",
      "snippet": "patch("
    },
    {
      "line": 495,
      "kind": "MagicMock",
      "snippet": "mock_performance_record = MagicMock()"
    },
    {
      "line": 495,
      "kind": "Mock",
      "snippet": "mock_performance_record = MagicMock()"
    },
    {
      "line": 519,
      "kind": "MagicMock",
      "snippet": "experiment_result = MagicMock()"
    },
    {
      "line": 519,
      "kind": "Mock",
      "snippet": "experiment_result = MagicMock()"
    },
    {
      "line": 526,
      "kind": "patch",
      "snippet": "patch("
    },
    {
      "line": 529,
      "kind": "patch",
      "snippet": "patch("
    },
    {
      "line": 534,
      "kind": "MagicMock",
      "snippet": "mock_experiment = MagicMock()"
    },
    {
      "line": 534,
      "kind": "Mock",
      "snippet": "mock_experiment = MagicMock()"
    },
    {
      "line": 567,
      "kind": "patch",
      "snippet": "patch("
    },
    {
      "line": 570,
      "kind": "patch",
      "snippet": "patch("
    },
    {
      "line": 575,
      "kind": "MagicMock",
      "snippet": "mock_pattern_record = MagicMock()"
    },
    {
      "line": 575,
      "kind": "Mock",
      "snippet": "mock_pattern_record = MagicMock()"
    },
    {
      "line": 608,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 611,
      "kind": "AsyncMock",
      "snippet": "mock_ml_service = AsyncMock()"
    },
    {
      "line": 611,
      "kind": "Mock",
      "snippet": "mock_ml_service = AsyncMock()"
    }
  ],
  "tests/integration/test_advanced_ab_testing_complete.py": [
    {
      "line": 8,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, Mock, patch"
    },
    {
      "line": 50,
      "kind": "Mock",
      "snippet": "real_time_service = Mock(spec=RealTimeAnalyticsService)"
    },
    {
      "line": 51,
      "kind": "AsyncMock",
      "snippet": "real_time_service.start_experiment_monitoring = AsyncMock(return_value=True)"
    },
    {
      "line": 51,
      "kind": "Mock",
      "snippet": "real_time_service.start_experiment_monitoring = AsyncMock(return_value=True)"
    },
    {
      "line": 52,
      "kind": "AsyncMock",
      "snippet": "real_time_service.stop_experiment_monitoring = AsyncMock(return_value=True)"
    },
    {
      "line": 52,
      "kind": "Mock",
      "snippet": "real_time_service.stop_experiment_monitoring = AsyncMock(return_value=True)"
    },
    {
      "line": 53,
      "kind": "AsyncMock",
      "snippet": "real_time_service.get_real_time_metrics = AsyncMock(return_value=None)"
    },
    {
      "line": 53,
      "kind": "Mock",
      "snippet": "real_time_service.get_real_time_metrics = AsyncMock(return_value=None)"
    },
    {
      "line": 54,
      "kind": "AsyncMock",
      "snippet": "real_time_service.cleanup = AsyncMock()"
    },
    {
      "line": 54,
      "kind": "Mock",
      "snippet": "real_time_service.cleanup = AsyncMock()"
    },
    {
      "line": 494,
      "kind": "Mock",
      "snippet": "mock_result = Mock()"
    },
    {
      "line": 582,
      "kind": "Mock",
      "snippet": "mock_result = Mock()"
    },
    {
      "line": 647,
      "kind": "Mock",
      "snippet": "mock_metrics = Mock()"
    }
  ],
  "tests/integration/test_async_validation.py": [
    {
      "line": 9,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, patch"
    },
    {
      "line": 38,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 89,
      "kind": "AsyncMock",
      "snippet": "mock_db_session.execute.return_value = AsyncMock()"
    },
    {
      "line": 89,
      "kind": "Mock",
      "snippet": "mock_db_session.execute.return_value = AsyncMock()"
    }
  ],
  "tests/integration/test_batch_and_shutdown.py": [
    {
      "line": 7,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, MagicMock"
    }
  ],
  "tests/integration/test_batch_scheduling.py": [
    {
      "line": 13,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, MagicMock, patch"
    }
  ],
  "tests/integration/test_cache_invalidation.py": [
    {
      "line": 6,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, MagicMock, patch"
    },
    {
      "line": 27,
      "kind": "mock_fixture",
      "snippet": "async def mock_redis_client():"
    },
    {
      "line": 29,
      "kind": "MagicMock",
      "snippet": "mock_client = MagicMock()"
    },
    {
      "line": 29,
      "kind": "Mock",
      "snippet": "mock_client = MagicMock()"
    },
    {
      "line": 30,
      "kind": "MagicMock",
      "snippet": "mock_client.pubsub = MagicMock()"
    },
    {
      "line": 30,
      "kind": "Mock",
      "snippet": "mock_client.pubsub = MagicMock()"
    },
    {
      "line": 31,
      "kind": "AsyncMock",
      "snippet": "mock_client.publish = AsyncMock()"
    },
    {
      "line": 31,
      "kind": "Mock",
      "snippet": "mock_client.publish = AsyncMock()"
    },
    {
      "line": 32,
      "kind": "AsyncMock",
      "snippet": "mock_client.scan = AsyncMock(return_value=(0, []))"
    },
    {
      "line": 32,
      "kind": "Mock",
      "snippet": "mock_client.scan = AsyncMock(return_value=(0, []))"
    },
    {
      "line": 33,
      "kind": "AsyncMock",
      "snippet": "mock_client.delete = AsyncMock(return_value=0)"
    },
    {
      "line": 33,
      "kind": "Mock",
      "snippet": "mock_client.delete = AsyncMock(return_value=0)"
    },
    {
      "line": 35,
      "kind": "patch",
      "snippet": "with patch('prompt_improver.utils.redis_cache.redis_client', mock_client):"
    },
    {
      "line": 40,
      "kind": "mock_fixture",
      "snippet": "async def mock_redis_pubsub():"
    },
    {
      "line": 42,
      "kind": "MagicMock",
      "snippet": "mock_pubsub = MagicMock()"
    },
    {
      "line": 42,
      "kind": "Mock",
      "snippet": "mock_pubsub = MagicMock()"
    },
    {
      "line": 43,
      "kind": "AsyncMock",
      "snippet": "mock_pubsub.subscribe = AsyncMock()"
    },
    {
      "line": 43,
      "kind": "Mock",
      "snippet": "mock_pubsub.subscribe = AsyncMock()"
    },
    {
      "line": 44,
      "kind": "AsyncMock",
      "snippet": "mock_pubsub.get_message = AsyncMock()"
    },
    {
      "line": 44,
      "kind": "Mock",
      "snippet": "mock_pubsub.get_message = AsyncMock()"
    },
    {
      "line": 45,
      "kind": "AsyncMock",
      "snippet": "mock_pubsub.close = AsyncMock()"
    },
    {
      "line": 45,
      "kind": "Mock",
      "snippet": "mock_pubsub.close = AsyncMock()"
    },
    {
      "line": 63,
      "kind": "AsyncMock",
      "snippet": "mock_redis_client.publish = AsyncMock()"
    },
    {
      "line": 63,
      "kind": "Mock",
      "snippet": "mock_redis_client.publish = AsyncMock()"
    },
    {
      "line": 104,
      "kind": "AsyncMock",
      "snippet": "mock_redis_client.publish = AsyncMock()"
    },
    {
      "line": 104,
      "kind": "Mock",
      "snippet": "mock_redis_client.publish = AsyncMock()"
    },
    {
      "line": 107,
      "kind": "patch",
      "snippet": "with patch('prompt_improver.services.ml_integration.mlflow') as mock_mlflow:"
    },
    {
      "line": 112,
      "kind": "MagicMock",
      "snippet": "mock_run = MagicMock()"
    },
    {
      "line": 112,
      "kind": "Mock",
      "snippet": "mock_run = MagicMock()"
    },
    {
      "line": 269,
      "kind": "AsyncMock",
      "snippet": "mock_redis_client.publish = AsyncMock()"
    },
    {
      "line": 269,
      "kind": "Mock",
      "snippet": "mock_redis_client.publish = AsyncMock()"
    },
    {
      "line": 272,
      "kind": "patch",
      "snippet": "with patch('prompt_improver.services.ml_integration.mlflow') as mock_mlflow:"
    },
    {
      "line": 277,
      "kind": "MagicMock",
      "snippet": "mock_run = MagicMock()"
    },
    {
      "line": 277,
      "kind": "Mock",
      "snippet": "mock_run = MagicMock()"
    }
  ],
  "tests/integration/test_mcp_flow.py": [
    {
      "line": 19,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, patch"
    },
    {
      "line": 227,
      "kind": "patch",
      "snippet": "@patch(\"prompt_improver.mcp_server.mcp_server.batch_processor\")"
    },
    {
      "line": 227,
      "kind": "patch_decorator",
      "snippet": "@patch(\"prompt_improver.mcp_server.mcp_server.batch_processor\")"
    },
    {
      "line": 231,
      "kind": "AsyncMock",
      "snippet": "mock_batch_processor.enqueue = AsyncMock()"
    },
    {
      "line": 231,
      "kind": "Mock",
      "snippet": "mock_batch_processor.enqueue = AsyncMock()"
    }
  ],
  "tests/integration/test_mcp_integration.py": [
    {
      "line": 10,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, patch"
    },
    {
      "line": 33,
      "kind": "patch",
      "snippet": "patch("
    },
    {
      "line": 36,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.mcp_server.mcp_server.store_prompt\") as mock_store,"
    },
    {
      "line": 104,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 218,
      "kind": "sample_data_dict",
      "snippet": "default_parameters={\"test\": True},"
    },
    {
      "line": 329,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.mcp_server.mcp_server.improve_prompt\") as mock_mcp,"
    },
    {
      "line": 330,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.services.ml_integration.MLModelService\") as mock_ml,"
    },
    {
      "line": 343,
      "kind": "AsyncMock",
      "snippet": "mock_ml_instance = AsyncMock()"
    },
    {
      "line": 343,
      "kind": "Mock",
      "snippet": "mock_ml_instance = AsyncMock()"
    }
  ],
  "tests/integration/test_performance.py": [
    {
      "line": 14,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, patch"
    }
  ],
  "tests/integration/test_phase1_cross_component_integration.py": [
    {
      "line": 25,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, MagicMock, patch"
    },
    {
      "line": 660,
      "kind": "sample_data_dict",
      "snippet": "invalid_baseline = {\"scores\": [], \"metadata\": {\"metric_type\": \"test\"}}"
    },
    {
      "line": 661,
      "kind": "sample_data_dict",
      "snippet": "invalid_optimized = {\"scores\": [1, 2, 3], \"metadata\": {\"metric_type\": \"test\"}}"
    }
  ],
  "tests/integration/test_production_model_registry.py": [
    {
      "line": 11,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import MagicMock, patch"
    },
    {
      "line": 75,
      "kind": "sample_data_dict",
      "snippet": "tags={\"environment\": \"test\", \"version\": \"1.0\"},"
    }
  ],
  "tests/integration/test_prometheus_counter_instantiation.py": [
    {
      "line": 8,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import MagicMock, patch"
    },
    {
      "line": 19,
      "kind": "MagicMock",
      "snippet": "mock_prometheus = MagicMock()"
    },
    {
      "line": 19,
      "kind": "Mock",
      "snippet": "mock_prometheus = MagicMock()"
    },
    {
      "line": 20,
      "kind": "MagicMock",
      "snippet": "mock_counter_class = MagicMock()"
    },
    {
      "line": 20,
      "kind": "Mock",
      "snippet": "mock_counter_class = MagicMock()"
    },
    {
      "line": 44,
      "kind": "MagicMock",
      "snippet": "mock_prometheus = MagicMock()"
    },
    {
      "line": 44,
      "kind": "Mock",
      "snippet": "mock_prometheus = MagicMock()"
    },
    {
      "line": 45,
      "kind": "MagicMock",
      "snippet": "mock_counter = MagicMock()"
    },
    {
      "line": 45,
      "kind": "Mock",
      "snippet": "mock_counter = MagicMock()"
    },
    {
      "line": 46,
      "kind": "MagicMock",
      "snippet": "mock_gauge = MagicMock()"
    },
    {
      "line": 46,
      "kind": "Mock",
      "snippet": "mock_gauge = MagicMock()"
    },
    {
      "line": 47,
      "kind": "MagicMock",
      "snippet": "mock_histogram = MagicMock()"
    },
    {
      "line": 47,
      "kind": "Mock",
      "snippet": "mock_histogram = MagicMock()"
    },
    {
      "line": 48,
      "kind": "MagicMock",
      "snippet": "mock_start_server = MagicMock()"
    },
    {
      "line": 48,
      "kind": "Mock",
      "snippet": "mock_start_server = MagicMock()"
    },
    {
      "line": 56,
      "kind": "MagicMock",
      "snippet": "mock_sklearn = MagicMock()"
    },
    {
      "line": 56,
      "kind": "Mock",
      "snippet": "mock_sklearn = MagicMock()"
    },
    {
      "line": 57,
      "kind": "MagicMock",
      "snippet": "mock_art = MagicMock()"
    },
    {
      "line": 57,
      "kind": "Mock",
      "snippet": "mock_art = MagicMock()"
    },
    {
      "line": 116,
      "kind": "MagicMock",
      "snippet": "mock_prometheus = MagicMock()"
    },
    {
      "line": 116,
      "kind": "Mock",
      "snippet": "mock_prometheus = MagicMock()"
    },
    {
      "line": 129,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 138,
      "kind": "patch",
      "snippet": "with patch(\"builtins.__import__\", side_effect=mock_import):"
    },
    {
      "line": 148,
      "kind": "MagicMock",
      "snippet": "mock_prometheus = MagicMock()"
    },
    {
      "line": 148,
      "kind": "Mock",
      "snippet": "mock_prometheus = MagicMock()"
    },
    {
      "line": 149,
      "kind": "MagicMock",
      "snippet": "mock_counter_instance = MagicMock()"
    },
    {
      "line": 149,
      "kind": "Mock",
      "snippet": "mock_counter_instance = MagicMock()"
    },
    {
      "line": 150,
      "kind": "MagicMock",
      "snippet": "mock_counter_class = MagicMock(return_value=mock_counter_instance)"
    },
    {
      "line": 150,
      "kind": "Mock",
      "snippet": "mock_counter_class = MagicMock(return_value=mock_counter_instance)"
    }
  ],
  "tests/integration/test_psycopg_error_handling_integration.py": [
    {
      "line": 9,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, MagicMock, Mock, patch"
    },
    {
      "line": 38,
      "kind": "mock_fixture",
      "snippet": "def mock_connection_pool(self):"
    },
    {
      "line": 40,
      "kind": "Mock",
      "snippet": "pool = Mock()"
    },
    {
      "line": 43,
      "kind": "AsyncMock",
      "snippet": "connection_context = AsyncMock()"
    },
    {
      "line": 43,
      "kind": "Mock",
      "snippet": "connection_context = AsyncMock()"
    },
    {
      "line": 44,
      "kind": "AsyncMock",
      "snippet": "connection = AsyncMock()"
    },
    {
      "line": 44,
      "kind": "Mock",
      "snippet": "connection = AsyncMock()"
    },
    {
      "line": 45,
      "kind": "AsyncMock",
      "snippet": "connection_context.__aenter__ = AsyncMock(return_value=connection)"
    },
    {
      "line": 45,
      "kind": "Mock",
      "snippet": "connection_context.__aenter__ = AsyncMock(return_value=connection)"
    },
    {
      "line": 46,
      "kind": "AsyncMock",
      "snippet": "connection_context.__aexit__ = AsyncMock(return_value=None)"
    },
    {
      "line": 46,
      "kind": "Mock",
      "snippet": "connection_context.__aexit__ = AsyncMock(return_value=None)"
    },
    {
      "line": 48,
      "kind": "AsyncMock",
      "snippet": "cursor_context = AsyncMock()"
    },
    {
      "line": 48,
      "kind": "Mock",
      "snippet": "cursor_context = AsyncMock()"
    },
    {
      "line": 49,
      "kind": "AsyncMock",
      "snippet": "cursor = AsyncMock()"
    },
    {
      "line": 49,
      "kind": "Mock",
      "snippet": "cursor = AsyncMock()"
    },
    {
      "line": 50,
      "kind": "AsyncMock",
      "snippet": "cursor_context.__aenter__ = AsyncMock(return_value=cursor)"
    },
    {
      "line": 50,
      "kind": "Mock",
      "snippet": "cursor_context.__aenter__ = AsyncMock(return_value=cursor)"
    },
    {
      "line": 51,
      "kind": "AsyncMock",
      "snippet": "cursor_context.__aexit__ = AsyncMock(return_value=None)"
    },
    {
      "line": 51,
      "kind": "Mock",
      "snippet": "cursor_context.__aexit__ = AsyncMock(return_value=None)"
    },
    {
      "line": 88,
      "kind": "AsyncMock",
      "snippet": "cursor.execute = AsyncMock()"
    },
    {
      "line": 88,
      "kind": "Mock",
      "snippet": "cursor.execute = AsyncMock()"
    },
    {
      "line": 94,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 137,
      "kind": "mock_class",
      "snippet": "class MockConnectionError(Exception):"
    },
    {
      "line": 154,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 195,
      "kind": "mock_class",
      "snippet": "class MockSyntaxError(Exception):"
    },
    {
      "line": 209,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 242,
      "kind": "mock_class",
      "snippet": "class MockDatabaseError(Exception):"
    },
    {
      "line": 247,
      "kind": "AsyncMock",
      "snippet": "cursor.execute = AsyncMock(side_effect=MockDatabaseError(\"Database down\"))"
    },
    {
      "line": 247,
      "kind": "Mock",
      "snippet": "cursor.execute = AsyncMock(side_effect=MockDatabaseError(\"Database down\"))"
    },
    {
      "line": 249,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 278,
      "kind": "AsyncMock",
      "snippet": "cursor.execute = AsyncMock()"
    },
    {
      "line": 278,
      "kind": "Mock",
      "snippet": "cursor.execute = AsyncMock()"
    },
    {
      "line": 290,
      "kind": "Mock",
      "snippet": "pool_stats = Mock()"
    },
    {
      "line": 303,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 352,
      "kind": "AsyncMock",
      "snippet": "cursor.execute = AsyncMock()"
    },
    {
      "line": 352,
      "kind": "Mock",
      "snippet": "cursor.execute = AsyncMock()"
    },
    {
      "line": 353,
      "kind": "sample_data_dict",
      "snippet": "cursor.fetchone.return_value = {\"test\": 1, \"timestamp\": datetime.utcnow()}"
    },
    {
      "line": 355,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 384,
      "kind": "mock_class",
      "snippet": "class MockConnectionError(Exception):"
    },
    {
      "line": 389,
      "kind": "mock_class",
      "snippet": "class MockTimeoutError(Exception):"
    },
    {
      "line": 394,
      "kind": "mock_class",
      "snippet": "class MockIntegrityError(Exception):"
    },
    {
      "line": 411,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 466,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 508,
      "kind": "Mock",
      "snippet": "pool_stats = Mock()"
    },
    {
      "line": 520,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 568,
      "kind": "mock_class",
      "snippet": "class MockError(Exception):"
    }
  ],
  "tests/integration/test_queue_health_integration.py": [
    {
      "line": 7,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, Mock, patch"
    },
    {
      "line": 20,
      "kind": "mock_fixture",
      "snippet": "def mock_batch_processor(self):"
    },
    {
      "line": 22,
      "kind": "Mock",
      "snippet": "processor = Mock(spec=BatchProcessor)"
    },
    {
      "line": 24,
      "kind": "Mock",
      "snippet": "processor.config = Mock()"
    },
    {
      "line": 40,
      "kind": "mock_fixture",
      "snippet": "def mock_task_manager(self):"
    },
    {
      "line": 42,
      "kind": "Mock",
      "snippet": "manager = Mock()"
    },
    {
      "line": 60,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 83,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 103,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 171,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 175,
      "kind": "Mock",
      "snippet": "mock_health_service = Mock()"
    },
    {
      "line": 176,
      "kind": "Mock",
      "snippet": "mock_queue_result = Mock()"
    },
    {
      "line": 221,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 271,
      "kind": "Mock",
      "snippet": "manager = Mock()"
    }
  ],
  "tests/integration/test_real_time_analytics.py": [
    {
      "line": 10,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import Mock, patch"
    },
    {
      "line": 193,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 234,
      "kind": "Mock",
      "snippet": "mock_ws1 = Mock()"
    },
    {
      "line": 235,
      "kind": "Mock",
      "snippet": "mock_ws2 = Mock()"
    },
    {
      "line": 238,
      "kind": "Mock",
      "snippet": "mock_ws1.accept = Mock(return_value=asyncio.create_task(asyncio.sleep(0)))"
    },
    {
      "line": 239,
      "kind": "Mock",
      "snippet": "mock_ws2.accept = Mock(return_value=asyncio.create_task(asyncio.sleep(0)))"
    },
    {
      "line": 272,
      "kind": "Mock",
      "snippet": "mock_ws1 = Mock()"
    },
    {
      "line": 273,
      "kind": "Mock",
      "snippet": "mock_ws2 = Mock()"
    },
    {
      "line": 275,
      "kind": "Mock",
      "snippet": "mock_ws1.accept = Mock(return_value=asyncio.create_task(asyncio.sleep(0)))"
    },
    {
      "line": 276,
      "kind": "Mock",
      "snippet": "mock_ws2.accept = Mock(return_value=asyncio.create_task(asyncio.sleep(0)))"
    },
    {
      "line": 277,
      "kind": "Mock",
      "snippet": "mock_ws1.send_text = Mock(return_value=asyncio.create_task(asyncio.sleep(0)))"
    },
    {
      "line": 278,
      "kind": "Mock",
      "snippet": "mock_ws2.send_text = Mock(return_value=asyncio.create_task(asyncio.sleep(0)))"
    },
    {
      "line": 339,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 342,
      "kind": "Mock",
      "snippet": "mock_analytics = Mock()"
    },
    {
      "line": 343,
      "kind": "Mock",
      "snippet": "mock_analytics.start_experiment_monitoring = Mock("
    },
    {
      "line": 361,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 364,
      "kind": "Mock",
      "snippet": "mock_analytics = Mock()"
    },
    {
      "line": 365,
      "kind": "Mock",
      "snippet": "mock_analytics.get_active_experiments = Mock("
    },
    {
      "line": 445,
      "kind": "sample_data_dict",
      "snippet": "test_data = {\"type\": \"test_message\", \"data\": {\"test\": \"value\"}}"
    }
  ],
  "tests/integration/test_service_integration.py": [
    {
      "line": 8,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, patch"
    },
    {
      "line": 36,
      "kind": "AsyncMock",
      "snippet": "mock_ml_instance = AsyncMock()"
    },
    {
      "line": 36,
      "kind": "Mock",
      "snippet": "mock_ml_instance = AsyncMock()"
    },
    {
      "line": 140,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.services.ml_integration.mlflow\") as mock_mlflow:"
    }
  ],
  "tests/integration/test_shutdown_sequence.py": [
    {
      "line": 14,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, MagicMock, patch"
    },
    {
      "line": 130,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 155,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 534,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 566,
      "kind": "patch",
      "snippet": "with patch("
    }
  ],
  "tests/integration/test_startup_orchestration.py": [
    {
      "line": 5,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, MagicMock"
    },
    {
      "line": 174,
      "kind": "sample_data_dict",
      "snippet": "test_value = {\"user_id\": \"123\", \"data\": \"test\"}"
    }
  ],
  "tests/integration/test_statistical_analyzer_ab_testing_integration.py": [
    {
      "line": 18,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, MagicMock, patch"
    }
  ],
  "tests/mcp_server/test_health.py": [
    {
      "line": 13,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, MagicMock, patch"
    },
    {
      "line": 35,
      "kind": "patch",
      "snippet": "patch("
    },
    {
      "line": 38,
      "kind": "patch",
      "snippet": "patch("
    },
    {
      "line": 43,
      "kind": "MagicMock",
      "snippet": "mock_btm = MagicMock()"
    },
    {
      "line": 43,
      "kind": "Mock",
      "snippet": "mock_btm = MagicMock()"
    },
    {
      "line": 63,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 79,
      "kind": "patch",
      "snippet": "patch("
    },
    {
      "line": 82,
      "kind": "patch",
      "snippet": "patch("
    },
    {
      "line": 87,
      "kind": "AsyncMock",
      "snippet": "mock_db_session = AsyncMock()"
    },
    {
      "line": 87,
      "kind": "Mock",
      "snippet": "mock_db_session = AsyncMock()"
    },
    {
      "line": 88,
      "kind": "MagicMock",
      "snippet": "mock_result = MagicMock()"
    },
    {
      "line": 88,
      "kind": "Mock",
      "snippet": "mock_result = MagicMock()"
    },
    {
      "line": 111,
      "kind": "patch",
      "snippet": "patch("
    },
    {
      "line": 114,
      "kind": "patch",
      "snippet": "patch("
    },
    {
      "line": 119,
      "kind": "AsyncMock",
      "snippet": "mock_db_session = AsyncMock()"
    },
    {
      "line": 119,
      "kind": "Mock",
      "snippet": "mock_db_session = AsyncMock()"
    },
    {
      "line": 120,
      "kind": "MagicMock",
      "snippet": "mock_result = MagicMock()"
    },
    {
      "line": 120,
      "kind": "Mock",
      "snippet": "mock_result = MagicMock()"
    },
    {
      "line": 138,
      "kind": "patch",
      "snippet": "patch("
    },
    {
      "line": 141,
      "kind": "patch",
      "snippet": "patch("
    },
    {
      "line": 146,
      "kind": "AsyncMock",
      "snippet": "mock_db_session = AsyncMock()"
    },
    {
      "line": 146,
      "kind": "Mock",
      "snippet": "mock_db_session = AsyncMock()"
    },
    {
      "line": 147,
      "kind": "MagicMock",
      "snippet": "mock_result = MagicMock()"
    },
    {
      "line": 147,
      "kind": "Mock",
      "snippet": "mock_result = MagicMock()"
    },
    {
      "line": 166,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 199,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 203,
      "kind": "AsyncMock",
      "snippet": "mock_db_session = AsyncMock()"
    },
    {
      "line": 203,
      "kind": "Mock",
      "snippet": "mock_db_session = AsyncMock()"
    },
    {
      "line": 235,
      "kind": "patch",
      "snippet": "patch("
    },
    {
      "line": 238,
      "kind": "patch",
      "snippet": "patch(\"builtins.print\") as mock_print,"
    },
    {
      "line": 241,
      "kind": "AsyncMock",
      "snippet": "mock_db_session = AsyncMock()"
    },
    {
      "line": 241,
      "kind": "Mock",
      "snippet": "mock_db_session = AsyncMock()"
    },
    {
      "line": 328,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 332,
      "kind": "MagicMock",
      "snippet": "mock_btm = MagicMock()"
    },
    {
      "line": 332,
      "kind": "Mock",
      "snippet": "mock_btm = MagicMock()"
    },
    {
      "line": 337,
      "kind": "patch",
      "snippet": "with patch("
    }
  ],
  "tests/performance/test_redis_cache_benchmark.py": [
    {
      "line": 13,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import patch"
    },
    {
      "line": 16,
      "kind": "fakeredis",
      "snippet": "import fakeredis.aioredis"
    },
    {
      "line": 21,
      "kind": "fakeredis",
      "snippet": "fake_redis = fakeredis.aioredis.FakeRedis(decode_responses=False)"
    },
    {
      "line": 22,
      "kind": "patch",
      "snippet": "with patch(\"src.prompt_improver.utils.redis_cache.redis_client\", fake_redis):"
    }
  ],
  "tests/regression/test_cli_commands.py": [
    {
      "line": 16,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import MagicMock, patch"
    },
    {
      "line": 52,
      "kind": "patch",
      "snippet": "with patch(\"pathlib.Path.home\", return_value=Path(self.temp_dir)):"
    },
    {
      "line": 61,
      "kind": "patch",
      "snippet": "with patch(\"pathlib.Path.home\", return_value=Path(self.temp_dir)):"
    },
    {
      "line": 81,
      "kind": "patch",
      "snippet": "with patch(\"pathlib.Path.home\", return_value=Path(self.temp_dir)):"
    },
    {
      "line": 88,
      "kind": "patch",
      "snippet": "with patch(\"pathlib.Path.home\", return_value=Path(\"/nonexistent\")):"
    },
    {
      "line": 95,
      "kind": "patch",
      "snippet": "with patch(\"pathlib.Path.home\", return_value=Path(self.temp_dir)):"
    },
    {
      "line": 103,
      "kind": "patch",
      "snippet": "with patch(\"pathlib.Path.home\", return_value=Path(self.temp_dir)):"
    },
    {
      "line": 118,
      "kind": "patch",
      "snippet": "with patch(\"pathlib.Path.home\", return_value=Path(self.temp_dir)):"
    },
    {
      "line": 134,
      "kind": "patch",
      "snippet": "with patch(\"pathlib.Path.home\", return_value=Path(self.temp_dir)):"
    },
    {
      "line": 151,
      "kind": "patch",
      "snippet": "with patch(\"pathlib.Path.home\", return_value=Path(self.temp_dir)):"
    },
    {
      "line": 165,
      "kind": "patch",
      "snippet": "with patch(\"pathlib.Path.home\", return_value=Path(self.temp_dir)):"
    },
    {
      "line": 180,
      "kind": "patch",
      "snippet": "with patch(\"pathlib.Path.home\", return_value=Path(self.temp_dir)):"
    },
    {
      "line": 200,
      "kind": "patch",
      "snippet": "with patch(\"pathlib.Path.home\", return_value=Path(self.temp_dir)):"
    },
    {
      "line": 221,
      "kind": "patch",
      "snippet": "with patch(\"pathlib.Path.home\", return_value=Path(self.temp_dir)):"
    },
    {
      "line": 237,
      "kind": "patch",
      "snippet": "with patch(\"pathlib.Path.home\", return_value=Path(self.temp_dir)):"
    },
    {
      "line": 250,
      "kind": "patch",
      "snippet": "with patch(\"pathlib.Path.home\", return_value=Path(self.temp_dir)):"
    },
    {
      "line": 265,
      "kind": "patch",
      "snippet": "with patch(\"pathlib.Path.home\", return_value=Path(self.temp_dir)):"
    },
    {
      "line": 293,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.cli.asyncio.run\") as mock_run:"
    },
    {
      "line": 324,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.cli.asyncio.run\") as mock_run:"
    },
    {
      "line": 338,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.cli.asyncio.run\") as mock_run:"
    },
    {
      "line": 359,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 377,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.cli.asyncio.run\") as mock_run:"
    },
    {
      "line": 400,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.cli.asyncio.run\") as mock_run:"
    },
    {
      "line": 423,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.cli.asyncio.run\") as mock_run:"
    },
    {
      "line": 437,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.cli.asyncio.run\") as mock_run:"
    },
    {
      "line": 451,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.cli.asyncio.run\") as mock_run:"
    },
    {
      "line": 473,
      "kind": "patch",
      "snippet": "with patch("
    }
  ],
  "tests/test_batch_processor_integration.py": [
    {
      "line": 7,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, MagicMock"
    },
    {
      "line": 63,
      "kind": "MagicMock",
      "snippet": "batch_processor.logger = MagicMock()"
    },
    {
      "line": 63,
      "kind": "Mock",
      "snippet": "batch_processor.logger = MagicMock()"
    },
    {
      "line": 96,
      "kind": "sample_data_dict",
      "snippet": "record = PriorityRecord(priority=50, record={\"test\": \"data\"}, attempts=0)"
    }
  ],
  "tests/unit/analysis/test_linguistic_analyzer.py": [
    {
      "line": 6,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import MagicMock, patch"
    }
  ],
  "tests/unit/automl/test_automl_callbacks.py": [
    {
      "line": 64,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import MagicMock"
    },
    {
      "line": 67,
      "kind": "MagicMock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 67,
      "kind": "Mock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 68,
      "kind": "MagicMock",
      "snippet": "db_manager.get_session.return_value.__enter__ = MagicMock()"
    },
    {
      "line": 68,
      "kind": "Mock",
      "snippet": "db_manager.get_session.return_value.__enter__ = MagicMock()"
    },
    {
      "line": 69,
      "kind": "MagicMock",
      "snippet": "db_manager.get_session.return_value.__exit__ = MagicMock()"
    },
    {
      "line": 69,
      "kind": "Mock",
      "snippet": "db_manager.get_session.return_value.__exit__ = MagicMock()"
    },
    {
      "line": 397,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import MagicMock"
    },
    {
      "line": 399,
      "kind": "MagicMock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 399,
      "kind": "Mock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 400,
      "kind": "MagicMock",
      "snippet": "db_manager.get_session.return_value.__enter__ = MagicMock()"
    },
    {
      "line": 400,
      "kind": "Mock",
      "snippet": "db_manager.get_session.return_value.__enter__ = MagicMock()"
    },
    {
      "line": 401,
      "kind": "MagicMock",
      "snippet": "db_manager.get_session.return_value.__exit__ = MagicMock()"
    },
    {
      "line": 401,
      "kind": "Mock",
      "snippet": "db_manager.get_session.return_value.__exit__ = MagicMock()"
    },
    {
      "line": 444,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import MagicMock"
    },
    {
      "line": 446,
      "kind": "MagicMock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 446,
      "kind": "Mock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 447,
      "kind": "MagicMock",
      "snippet": "db_manager.get_session.return_value.__enter__ = MagicMock()"
    },
    {
      "line": 447,
      "kind": "Mock",
      "snippet": "db_manager.get_session.return_value.__enter__ = MagicMock()"
    },
    {
      "line": 448,
      "kind": "MagicMock",
      "snippet": "db_manager.get_session.return_value.__exit__ = MagicMock()"
    },
    {
      "line": 448,
      "kind": "Mock",
      "snippet": "db_manager.get_session.return_value.__exit__ = MagicMock()"
    }
  ],
  "tests/unit/automl/test_automl_orchestrator.py": [
    {
      "line": 19,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, MagicMock, patch"
    },
    {
      "line": 104,
      "kind": "MagicMock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 104,
      "kind": "Mock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 105,
      "kind": "MagicMock",
      "snippet": "db_manager.get_session.return_value.__enter__ = MagicMock()"
    },
    {
      "line": 105,
      "kind": "Mock",
      "snippet": "db_manager.get_session.return_value.__enter__ = MagicMock()"
    },
    {
      "line": 106,
      "kind": "MagicMock",
      "snippet": "db_manager.get_session.return_value.__exit__ = MagicMock()"
    },
    {
      "line": 106,
      "kind": "Mock",
      "snippet": "db_manager.get_session.return_value.__exit__ = MagicMock()"
    },
    {
      "line": 110,
      "kind": "mock_fixture",
      "snippet": "def mock_db_manager(self):"
    },
    {
      "line": 112,
      "kind": "MagicMock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 112,
      "kind": "Mock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 113,
      "kind": "MagicMock",
      "snippet": "db_manager.get_session.return_value.__enter__ = MagicMock()"
    },
    {
      "line": 113,
      "kind": "Mock",
      "snippet": "db_manager.get_session.return_value.__enter__ = MagicMock()"
    },
    {
      "line": 114,
      "kind": "MagicMock",
      "snippet": "db_manager.get_session.return_value.__exit__ = MagicMock()"
    },
    {
      "line": 114,
      "kind": "Mock",
      "snippet": "db_manager.get_session.return_value.__exit__ = MagicMock()"
    },
    {
      "line": 118,
      "kind": "mock_fixture",
      "snippet": "def mock_experiment_orchestrator(self):"
    },
    {
      "line": 121,
      "kind": "MagicMock",
      "snippet": "orchestrator = MagicMock()"
    },
    {
      "line": 121,
      "kind": "Mock",
      "snippet": "orchestrator = MagicMock()"
    },
    {
      "line": 126,
      "kind": "mock_fixture",
      "snippet": "def mock_ab_testing_service(self):"
    },
    {
      "line": 129,
      "kind": "MagicMock",
      "snippet": "service = MagicMock(spec=ABTestingService)"
    },
    {
      "line": 129,
      "kind": "Mock",
      "snippet": "service = MagicMock(spec=ABTestingService)"
    },
    {
      "line": 329,
      "kind": "AsyncMock",
      "snippet": "orchestrator.current_optimization = AsyncMock()"
    },
    {
      "line": 329,
      "kind": "Mock",
      "snippet": "orchestrator.current_optimization = AsyncMock()"
    },
    {
      "line": 395,
      "kind": "MagicMock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 395,
      "kind": "Mock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 396,
      "kind": "MagicMock",
      "snippet": "db_manager.get_session.return_value.__enter__ = MagicMock()"
    },
    {
      "line": 396,
      "kind": "Mock",
      "snippet": "db_manager.get_session.return_value.__enter__ = MagicMock()"
    },
    {
      "line": 397,
      "kind": "MagicMock",
      "snippet": "db_manager.get_session.return_value.__exit__ = MagicMock()"
    },
    {
      "line": 397,
      "kind": "Mock",
      "snippet": "db_manager.get_session.return_value.__exit__ = MagicMock()"
    },
    {
      "line": 441,
      "kind": "MagicMock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 441,
      "kind": "Mock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 442,
      "kind": "MagicMock",
      "snippet": "experiment_orchestrator = MagicMock(spec=ExperimentOrchestrator)"
    },
    {
      "line": 442,
      "kind": "Mock",
      "snippet": "experiment_orchestrator = MagicMock(spec=ExperimentOrchestrator)"
    },
    {
      "line": 466,
      "kind": "MagicMock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 466,
      "kind": "Mock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 467,
      "kind": "MagicMock",
      "snippet": "db_manager.get_session.return_value.__enter__ = MagicMock()"
    },
    {
      "line": 467,
      "kind": "Mock",
      "snippet": "db_manager.get_session.return_value.__enter__ = MagicMock()"
    },
    {
      "line": 468,
      "kind": "MagicMock",
      "snippet": "db_manager.get_session.return_value.__exit__ = MagicMock()"
    },
    {
      "line": 468,
      "kind": "Mock",
      "snippet": "db_manager.get_session.return_value.__exit__ = MagicMock()"
    },
    {
      "line": 548,
      "kind": "MagicMock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 548,
      "kind": "Mock",
      "snippet": "db_manager = MagicMock(spec=DatabaseManager)"
    },
    {
      "line": 549,
      "kind": "MagicMock",
      "snippet": "db_manager.get_session.return_value.__enter__ = MagicMock()"
    },
    {
      "line": 549,
      "kind": "Mock",
      "snippet": "db_manager.get_session.return_value.__enter__ = MagicMock()"
    },
    {
      "line": 550,
      "kind": "MagicMock",
      "snippet": "db_manager.get_session.return_value.__exit__ = MagicMock()"
    },
    {
      "line": 550,
      "kind": "Mock",
      "snippet": "db_manager.get_session.return_value.__exit__ = MagicMock()"
    }
  ],
  "tests/unit/database/test_enhanced_error_handling.py": [
    {
      "line": 8,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, Mock, patch"
    },
    {
      "line": 27,
      "kind": "mock_class",
      "snippet": "class MockPsycopgError(Exception):"
    },
    {
      "line": 33,
      "kind": "mock_class",
      "snippet": "class MockOperationalError(MockPsycopgError):"
    },
    {
      "line": 37,
      "kind": "mock_class",
      "snippet": "class MockIntegrityError(MockPsycopgError):"
    },
    {
      "line": 41,
      "kind": "mock_class",
      "snippet": "class MockConnectionTimeout(MockPsycopgError):"
    },
    {
      "line": 322,
      "kind": "mock_class",
      "snippet": "class MockClient:"
    }
  ],
  "tests/unit/evaluation/test_advanced_statistical_validator.py": [
    {
      "line": 7,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import Mock, patch"
    }
  ],
  "tests/unit/evaluation/test_causal_inference_analyzer.py": [
    {
      "line": 7,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import Mock, patch"
    },
    {
      "line": 464,
      "kind": "Mock",
      "snippet": "primary_effect = Mock()"
    },
    {
      "line": 480,
      "kind": "Mock",
      "snippet": "Mock(violated=False, severity=\"low\"),"
    },
    {
      "line": 481,
      "kind": "Mock",
      "snippet": "Mock(violated=True, severity=\"medium\"),"
    },
    {
      "line": 507,
      "kind": "Mock",
      "snippet": "strong_effect = Mock()"
    },
    {
      "line": 514,
      "kind": "Mock",
      "snippet": "good_assumptions = [Mock(violated=False, severity=\"low\")]"
    },
    {
      "line": 525,
      "kind": "Mock",
      "snippet": "bad_assumptions = [Mock(violated=True, severity=\"high\")]"
    },
    {
      "line": 538,
      "kind": "Mock",
      "snippet": "strong_effect = Mock()"
    },
    {
      "line": 542,
      "kind": "Mock",
      "snippet": "good_assumptions = [Mock(violated=False, severity=\"low\")]"
    },
    {
      "line": 554,
      "kind": "Mock",
      "snippet": "weak_effect = Mock()"
    },
    {
      "line": 568,
      "kind": "Mock",
      "snippet": "Mock("
    }
  ],
  "tests/unit/evaluation/test_pattern_significance_analyzer.py": [
    {
      "line": 7,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import Mock, patch"
    },
    {
      "line": 154,
      "kind": "sample_data_dict",
      "snippet": "patterns_data = {\"small_pattern\": {\"type\": \"test\"}}"
    },
    {
      "line": 288,
      "kind": "Mock",
      "snippet": "Mock(p_value=0.01, effect_size=0.5),"
    },
    {
      "line": 289,
      "kind": "Mock",
      "snippet": "Mock(p_value=0.03, effect_size=0.3),"
    },
    {
      "line": 290,
      "kind": "Mock",
      "snippet": "Mock(p_value=0.045, effect_size=0.2),"
    },
    {
      "line": 291,
      "kind": "Mock",
      "snippet": "Mock(p_value=0.08, effect_size=0.1),"
    },
    {
      "line": 308,
      "kind": "Mock",
      "snippet": "Mock(pattern_type=PatternType.CATEGORICAL, p_value=0.01, effect_size=0.8),"
    },
    {
      "line": 309,
      "kind": "Mock",
      "snippet": "Mock(pattern_type=PatternType.CATEGORICAL, p_value=0.06, effect_size=0.3),"
    },
    {
      "line": 310,
      "kind": "Mock",
      "snippet": "Mock(pattern_type=PatternType.SEQUENTIAL, p_value=0.02, effect_size=0.5),"
    },
    {
      "line": 311,
      "kind": "Mock",
      "snippet": "Mock(pattern_type=PatternType.TEMPORAL, p_value=0.001, effect_size=0.1),"
    },
    {
      "line": 329,
      "kind": "Mock",
      "snippet": "Mock(p_value=0.01),"
    },
    {
      "line": 330,
      "kind": "Mock",
      "snippet": "Mock(p_value=0.03),"
    },
    {
      "line": 331,
      "kind": "Mock",
      "snippet": "Mock(p_value=0.045),"
    },
    {
      "line": 347,
      "kind": "Mock",
      "snippet": "Mock(effect_size=0.8, pattern_type=PatternType.CATEGORICAL),"
    },
    {
      "line": 348,
      "kind": "Mock",
      "snippet": "Mock(effect_size=0.6, pattern_type=PatternType.PERFORMANCE),"
    },
    {
      "line": 349,
      "kind": "Mock",
      "snippet": "Mock(effect_size=0.3, pattern_type=PatternType.BEHAVIORAL),"
    },
    {
      "line": 369,
      "kind": "Mock",
      "snippet": "Mock("
    },
    {
      "line": 375,
      "kind": "Mock",
      "snippet": "Mock("
    },
    {
      "line": 381,
      "kind": "Mock",
      "snippet": "Mock("
    },
    {
      "line": 403,
      "kind": "Mock",
      "snippet": "Mock(pattern_id=\"pattern1\", effect_size=0.5),"
    },
    {
      "line": 404,
      "kind": "Mock",
      "snippet": "Mock(pattern_id=\"pattern2\", effect_size=0.6),"
    },
    {
      "line": 405,
      "kind": "Mock",
      "snippet": "Mock(pattern_id=\"pattern3\", effect_size=0.4),"
    },
    {
      "line": 516,
      "kind": "sample_data_dict",
      "snippet": "single_pattern_data = {\"single\": {\"type\": \"test\"}}"
    },
    {
      "line": 539,
      "kind": "sample_data_dict",
      "snippet": "patterns_data={\"pattern\": {\"type\": \"test\"}},"
    }
  ],
  "tests/unit/learning/test_context_aware_weighting.py": [
    {
      "line": 8,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import Mock, patch"
    }
  ],
  "tests/unit/learning/test_context_learner_clustering.py": [
    {
      "line": 20,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import MagicMock, Mock, patch"
    },
    {
      "line": 131,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 135,
      "kind": "patch",
      "snippet": "with patch(\"umap.UMAP\") as mock_umap:"
    },
    {
      "line": 137,
      "kind": "MagicMock",
      "snippet": "mock_reducer = MagicMock()"
    },
    {
      "line": 137,
      "kind": "Mock",
      "snippet": "mock_reducer = MagicMock()"
    },
    {
      "line": 182,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 187,
      "kind": "patch",
      "snippet": "patch(\"umap.UMAP\") as mock_umap,"
    },
    {
      "line": 188,
      "kind": "patch",
      "snippet": "patch(\"hdbscan.HDBSCAN\") as mock_hdbscan,"
    },
    {
      "line": 191,
      "kind": "MagicMock",
      "snippet": "mock_reducer = MagicMock()"
    },
    {
      "line": 191,
      "kind": "Mock",
      "snippet": "mock_reducer = MagicMock()"
    },
    {
      "line": 197,
      "kind": "MagicMock",
      "snippet": "mock_clusterer = MagicMock()"
    },
    {
      "line": 197,
      "kind": "Mock",
      "snippet": "mock_clusterer = MagicMock()"
    },
    {
      "line": 238,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 243,
      "kind": "patch",
      "snippet": "patch(\"umap.UMAP\") as mock_umap,"
    },
    {
      "line": 244,
      "kind": "patch",
      "snippet": "patch(\"hdbscan.HDBSCAN\") as mock_hdbscan,"
    },
    {
      "line": 247,
      "kind": "MagicMock",
      "snippet": "mock_reducer = MagicMock()"
    },
    {
      "line": 247,
      "kind": "Mock",
      "snippet": "mock_reducer = MagicMock()"
    },
    {
      "line": 254,
      "kind": "MagicMock",
      "snippet": "mock_clusterer = MagicMock()"
    },
    {
      "line": 254,
      "kind": "Mock",
      "snippet": "mock_clusterer = MagicMock()"
    },
    {
      "line": 393,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 397,
      "kind": "patch",
      "snippet": "with patch(\"umap.UMAP\") as mock_umap:"
    },
    {
      "line": 398,
      "kind": "MagicMock",
      "snippet": "mock_reducer = MagicMock()"
    },
    {
      "line": 398,
      "kind": "Mock",
      "snippet": "mock_reducer = MagicMock()"
    },
    {
      "line": 455,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 460,
      "kind": "patch",
      "snippet": "patch(\"umap.UMAP\") as mock_umap,"
    },
    {
      "line": 461,
      "kind": "patch",
      "snippet": "patch(\"hdbscan.HDBSCAN\") as mock_hdbscan,"
    },
    {
      "line": 464,
      "kind": "MagicMock",
      "snippet": "mock_reducer = MagicMock()"
    },
    {
      "line": 464,
      "kind": "Mock",
      "snippet": "mock_reducer = MagicMock()"
    },
    {
      "line": 468,
      "kind": "MagicMock",
      "snippet": "mock_clusterer = MagicMock()"
    },
    {
      "line": 468,
      "kind": "Mock",
      "snippet": "mock_clusterer = MagicMock()"
    },
    {
      "line": 558,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 599,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 604,
      "kind": "patch",
      "snippet": "patch(\"umap.UMAP\") as mock_umap,"
    },
    {
      "line": 605,
      "kind": "patch",
      "snippet": "patch(\"hdbscan.HDBSCAN\") as mock_hdbscan,"
    },
    {
      "line": 607,
      "kind": "MagicMock",
      "snippet": "mock_reducer = MagicMock()"
    },
    {
      "line": 607,
      "kind": "Mock",
      "snippet": "mock_reducer = MagicMock()"
    },
    {
      "line": 611,
      "kind": "MagicMock",
      "snippet": "mock_clusterer = MagicMock()"
    },
    {
      "line": 611,
      "kind": "Mock",
      "snippet": "mock_clusterer = MagicMock()"
    },
    {
      "line": 653,
      "kind": "patch",
      "snippet": "with patch("
    }
  ],
  "tests/unit/learning/test_context_learner_icl.py": [
    {
      "line": 21,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, Mock, patch"
    }
  ],
  "tests/unit/learning/test_insight_engine_causal.py": [
    {
      "line": 20,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import MagicMock, Mock, patch"
    },
    {
      "line": 139,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 176,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 180,
      "kind": "patch",
      "snippet": "patch(\"causallearn.search.ConstraintBased.PC.pc\") as mock_pc,"
    },
    {
      "line": 181,
      "kind": "patch",
      "snippet": "patch(\"networkx.DiGraph\") as mock_digraph,"
    },
    {
      "line": 184,
      "kind": "MagicMock",
      "snippet": "mock_cg = MagicMock()"
    },
    {
      "line": 184,
      "kind": "Mock",
      "snippet": "mock_cg = MagicMock()"
    },
    {
      "line": 193,
      "kind": "MagicMock",
      "snippet": "mock_graph = MagicMock()"
    },
    {
      "line": 193,
      "kind": "Mock",
      "snippet": "mock_graph = MagicMock()"
    },
    {
      "line": 248,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 251,
      "kind": "patch",
      "snippet": "with patch(\"networkx.DiGraph\") as mock_digraph:"
    },
    {
      "line": 253,
      "kind": "MagicMock",
      "snippet": "mock_graph = MagicMock()"
    },
    {
      "line": 253,
      "kind": "Mock",
      "snippet": "mock_graph = MagicMock()"
    },
    {
      "line": 287,
      "kind": "MagicMock",
      "snippet": "mock_graph = MagicMock()"
    },
    {
      "line": 287,
      "kind": "Mock",
      "snippet": "mock_graph = MagicMock()"
    },
    {
      "line": 362,
      "kind": "MagicMock",
      "snippet": "mock_graph = MagicMock()"
    },
    {
      "line": 362,
      "kind": "Mock",
      "snippet": "mock_graph = MagicMock()"
    },
    {
      "line": 397,
      "kind": "MagicMock",
      "snippet": "mock_graph = MagicMock()"
    },
    {
      "line": 397,
      "kind": "Mock",
      "snippet": "mock_graph = MagicMock()"
    },
    {
      "line": 482,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 501,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 537,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 584,
      "kind": "MagicMock",
      "snippet": "mock_graph = MagicMock()"
    },
    {
      "line": 584,
      "kind": "Mock",
      "snippet": "mock_graph = MagicMock()"
    },
    {
      "line": 610,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 613,
      "kind": "patch",
      "snippet": "with patch(\"causallearn.search.ConstraintBased.PC.pc\") as mock_pc:"
    },
    {
      "line": 634,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 697,
      "kind": "patch",
      "snippet": "with patch("
    }
  ],
  "tests/unit/learning/test_rule_analyzer_bayesian.py": [
    {
      "line": 19,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import MagicMock, Mock, patch"
    },
    {
      "line": 183,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.learning.rule_analyzer.BAYESIAN_AVAILABLE\", True):"
    },
    {
      "line": 220,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.learning.rule_analyzer.BAYESIAN_AVAILABLE\", True):"
    },
    {
      "line": 223,
      "kind": "patch",
      "snippet": "patch(\"pymc.Model\") as mock_model,"
    },
    {
      "line": 224,
      "kind": "patch",
      "snippet": "patch(\"pymc.Normal\") as mock_normal,"
    },
    {
      "line": 225,
      "kind": "patch",
      "snippet": "patch(\"pymc.sample\") as mock_sample,"
    },
    {
      "line": 228,
      "kind": "MagicMock",
      "snippet": "mock_model_instance = MagicMock()"
    },
    {
      "line": 228,
      "kind": "Mock",
      "snippet": "mock_model_instance = MagicMock()"
    },
    {
      "line": 232,
      "kind": "MagicMock",
      "snippet": "mock_trace = MagicMock()"
    },
    {
      "line": 232,
      "kind": "Mock",
      "snippet": "mock_trace = MagicMock()"
    },
    {
      "line": 233,
      "kind": "MagicMock",
      "snippet": "mock_trace.posterior = MagicMock()"
    },
    {
      "line": 233,
      "kind": "Mock",
      "snippet": "mock_trace.posterior = MagicMock()"
    },
    {
      "line": 294,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.learning.rule_analyzer.BAYESIAN_AVAILABLE\", True):"
    },
    {
      "line": 295,
      "kind": "patch",
      "snippet": "with patch(\"pymc.Model\") as mock_model, patch(\"pymc.sample\") as mock_sample:"
    },
    {
      "line": 297,
      "kind": "MagicMock",
      "snippet": "mock_model_instance = MagicMock()"
    },
    {
      "line": 297,
      "kind": "Mock",
      "snippet": "mock_model_instance = MagicMock()"
    },
    {
      "line": 301,
      "kind": "MagicMock",
      "snippet": "mock_trace = MagicMock()"
    },
    {
      "line": 301,
      "kind": "Mock",
      "snippet": "mock_trace = MagicMock()"
    },
    {
      "line": 349,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.learning.rule_analyzer.BAYESIAN_AVAILABLE\", True):"
    },
    {
      "line": 350,
      "kind": "patch",
      "snippet": "with patch(\"pymc.Model\"), patch(\"pymc.sample\") as mock_sample:"
    },
    {
      "line": 356,
      "kind": "MagicMock",
      "snippet": "mock_trace = MagicMock()"
    },
    {
      "line": 356,
      "kind": "Mock",
      "snippet": "mock_trace = MagicMock()"
    },
    {
      "line": 392,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.learning.rule_analyzer.BAYESIAN_AVAILABLE\", True):"
    },
    {
      "line": 394,
      "kind": "patch",
      "snippet": "patch(\"pymc.Model\") as mock_model,"
    },
    {
      "line": 395,
      "kind": "patch",
      "snippet": "patch(\"pymc.Normal\") as mock_normal,"
    },
    {
      "line": 396,
      "kind": "patch",
      "snippet": "patch(\"pymc.Gamma\") as mock_gamma,"
    },
    {
      "line": 398,
      "kind": "MagicMock",
      "snippet": "mock_model_instance = MagicMock()"
    },
    {
      "line": 398,
      "kind": "Mock",
      "snippet": "mock_model_instance = MagicMock()"
    },
    {
      "line": 423,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.learning.rule_analyzer.BAYESIAN_AVAILABLE\", True):"
    },
    {
      "line": 425,
      "kind": "patch",
      "snippet": "patch(\"pymc.sample\") as mock_sample,"
    },
    {
      "line": 426,
      "kind": "patch",
      "snippet": "patch(\"arviz.summary\") as mock_summary,"
    },
    {
      "line": 429,
      "kind": "MagicMock",
      "snippet": "mock_trace = MagicMock()"
    },
    {
      "line": 429,
      "kind": "Mock",
      "snippet": "mock_trace = MagicMock()"
    },
    {
      "line": 477,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 481,
      "kind": "patch",
      "snippet": "patch(\"pymc.sample\") as mock_sample,"
    },
    {
      "line": 482,
      "kind": "patch",
      "snippet": "patch(\"arviz.hdi\") as mock_hdi,"
    },
    {
      "line": 488,
      "kind": "MagicMock",
      "snippet": "mock_trace = MagicMock()"
    },
    {
      "line": 488,
      "kind": "Mock",
      "snippet": "mock_trace = MagicMock()"
    },
    {
      "line": 509,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.learning.rule_analyzer.BAYESIAN_AVAILABLE\", True):"
    },
    {
      "line": 539,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.learning.rule_analyzer.BAYESIAN_AVAILABLE\", False):"
    },
    {
      "line": 572,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.learning.rule_analyzer.BAYESIAN_AVAILABLE\", True):"
    },
    {
      "line": 573,
      "kind": "patch",
      "snippet": "with patch(\"pymc.sample\") as mock_sample:"
    },
    {
      "line": 597,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.learning.rule_analyzer.BAYESIAN_AVAILABLE\", True):"
    },
    {
      "line": 620,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.learning.rule_analyzer.BAYESIAN_AVAILABLE\", True):"
    },
    {
      "line": 621,
      "kind": "patch",
      "snippet": "with patch(\"pymc.sample\") as mock_sample:"
    },
    {
      "line": 622,
      "kind": "MagicMock",
      "snippet": "mock_trace = MagicMock()"
    },
    {
      "line": 622,
      "kind": "Mock",
      "snippet": "mock_trace = MagicMock()"
    },
    {
      "line": 639,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.learning.rule_analyzer.BAYESIAN_AVAILABLE\", True):"
    },
    {
      "line": 641,
      "kind": "patch",
      "snippet": "patch(\"pymc.sample\") as mock_sample,"
    },
    {
      "line": 642,
      "kind": "patch",
      "snippet": "patch(\"arviz.summary\") as mock_summary,"
    },
    {
      "line": 644,
      "kind": "MagicMock",
      "snippet": "mock_trace = MagicMock()"
    },
    {
      "line": 644,
      "kind": "Mock",
      "snippet": "mock_trace = MagicMock()"
    },
    {
      "line": 675,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.learning.rule_analyzer.BAYESIAN_AVAILABLE\", True):"
    },
    {
      "line": 715,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.learning.rule_analyzer.BAYESIAN_AVAILABLE\", True):"
    },
    {
      "line": 746,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.learning.rule_analyzer.BAYESIAN_AVAILABLE\", True):"
    },
    {
      "line": 747,
      "kind": "patch",
      "snippet": "with patch(\"pymc.sample\") as mock_sample:"
    },
    {
      "line": 748,
      "kind": "MagicMock",
      "snippet": "mock_trace = MagicMock()"
    },
    {
      "line": 748,
      "kind": "Mock",
      "snippet": "mock_trace = MagicMock()"
    }
  ],
  "tests/unit/learning/test_rule_analyzer_timeseries.py": [
    {
      "line": 19,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import MagicMock, Mock, patch"
    },
    {
      "line": 168,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 201,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 208,
      "kind": "MagicMock",
      "snippet": "mock_df = MagicMock()"
    },
    {
      "line": 208,
      "kind": "Mock",
      "snippet": "mock_df = MagicMock()"
    },
    {
      "line": 277,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 396,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 426,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 429,
      "kind": "patch",
      "snippet": "with patch(\"sklearn.model_selection.TimeSeriesSplit\") as mock_ts_split:"
    },
    {
      "line": 431,
      "kind": "MagicMock",
      "snippet": "mock_splitter = MagicMock()"
    },
    {
      "line": 431,
      "kind": "Mock",
      "snippet": "mock_splitter = MagicMock()"
    },
    {
      "line": 491,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 496,
      "kind": "MagicMock",
      "snippet": "mock_df = MagicMock()"
    },
    {
      "line": 496,
      "kind": "Mock",
      "snippet": "mock_df = MagicMock()"
    },
    {
      "line": 557,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 608,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 628,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 655,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 701,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 745,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 761,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 804,
      "kind": "patch",
      "snippet": "with patch("
    }
  ],
  "tests/unit/optimization/test_early_stopping.py": [
    {
      "line": 10,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, patch"
    }
  ],
  "tests/unit/optimization/test_multi_armed_bandit.py": [
    {
      "line": 12,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, patch"
    },
    {
      "line": 91,
      "kind": "patch",
      "snippet": "with patch(\"numpy.random.random\", return_value=0.05):  # < epsilon"
    },
    {
      "line": 92,
      "kind": "patch",
      "snippet": "with patch(\"numpy.random.choice\", return_value=\"rule_2\") as mock_choice:"
    },
    {
      "line": 106,
      "kind": "patch",
      "snippet": "with patch(\"numpy.random.random\", return_value=0.95):  # >= epsilon"
    }
  ],
  "tests/unit/optimization/test_rule_optimizer_multiobjective.py": [
    {
      "line": 19,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import MagicMock, Mock, patch"
    },
    {
      "line": 190,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.optimization.rule_optimizer.DEAP_AVAILABLE\", True):"
    },
    {
      "line": 220,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.optimization.rule_optimizer.DEAP_AVAILABLE\", True):"
    },
    {
      "line": 222,
      "kind": "patch",
      "snippet": "patch(\"deap.algorithms.eaMuPlusLambda\") as mock_nsga2,"
    },
    {
      "line": 223,
      "kind": "patch",
      "snippet": "patch(\"deap.tools.sortNondominated\") as mock_sort_nd,"
    },
    {
      "line": 228,
      "kind": "MagicMock",
      "snippet": "individual = MagicMock()"
    },
    {
      "line": 228,
      "kind": "Mock",
      "snippet": "individual = MagicMock()"
    },
    {
      "line": 241,
      "kind": "MagicMock",
      "snippet": "mock_logbook = MagicMock()"
    },
    {
      "line": 241,
      "kind": "Mock",
      "snippet": "mock_logbook = MagicMock()"
    },
    {
      "line": 277,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.optimization.rule_optimizer.DEAP_AVAILABLE\", True):"
    },
    {
      "line": 278,
      "kind": "patch",
      "snippet": "with patch(\"deap.algorithms.eaMuPlusLambda\") as mock_nsga2:"
    },
    {
      "line": 327,
      "kind": "MagicMock",
      "snippet": "mock_population = [MagicMock() for _ in range(3)]"
    },
    {
      "line": 327,
      "kind": "Mock",
      "snippet": "mock_population = [MagicMock() for _ in range(3)]"
    },
    {
      "line": 336,
      "kind": "MagicMock",
      "snippet": "mock_nsga2.return_value = (mock_population, MagicMock())"
    },
    {
      "line": 336,
      "kind": "Mock",
      "snippet": "mock_nsga2.return_value = (mock_population, MagicMock())"
    },
    {
      "line": 342,
      "kind": "MagicMock",
      "snippet": "return_value=(pareto_solutions, MagicMock()),"
    },
    {
      "line": 342,
      "kind": "Mock",
      "snippet": "return_value=(pareto_solutions, MagicMock()),"
    },
    {
      "line": 461,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 494,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 498,
      "kind": "patch",
      "snippet": "with patch(\"sklearn.gaussian_process.GaussianProcessRegressor\") as mock_gpr:"
    },
    {
      "line": 500,
      "kind": "MagicMock",
      "snippet": "mock_gp = MagicMock()"
    },
    {
      "line": 500,
      "kind": "Mock",
      "snippet": "mock_gp = MagicMock()"
    },
    {
      "line": 589,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.optimization.rule_optimizer.DEAP_AVAILABLE\", True):"
    },
    {
      "line": 618,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.optimization.rule_optimizer.DEAP_AVAILABLE\", True):"
    },
    {
      "line": 619,
      "kind": "patch",
      "snippet": "with patch(\"deap.algorithms.eaMuPlusLambda\") as mock_nsga2:"
    },
    {
      "line": 622,
      "kind": "MagicMock",
      "snippet": "MagicMock() for _ in range(population_size // 10)"
    },
    {
      "line": 622,
      "kind": "Mock",
      "snippet": "MagicMock() for _ in range(population_size // 10)"
    },
    {
      "line": 628,
      "kind": "MagicMock",
      "snippet": "mock_nsga2.return_value = (mock_population, MagicMock())"
    },
    {
      "line": 628,
      "kind": "Mock",
      "snippet": "mock_nsga2.return_value = (mock_population, MagicMock())"
    },
    {
      "line": 688,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.optimization.rule_optimizer.DEAP_AVAILABLE\", False):"
    },
    {
      "line": 726,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.optimization.rule_optimizer.DEAP_AVAILABLE\", True):"
    },
    {
      "line": 727,
      "kind": "patch",
      "snippet": "with patch(\"deap.algorithms.eaMuPlusLambda\") as mock_nsga2:"
    },
    {
      "line": 746,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 750,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 778,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.optimization.rule_optimizer.DEAP_AVAILABLE\", True):"
    },
    {
      "line": 779,
      "kind": "patch",
      "snippet": "with patch(\"deap.algorithms.eaMuPlusLambda\") as mock_nsga2:"
    },
    {
      "line": 781,
      "kind": "MagicMock",
      "snippet": "mock_population = [MagicMock(), MagicMock()]"
    },
    {
      "line": 781,
      "kind": "Mock",
      "snippet": "mock_population = [MagicMock(), MagicMock()]"
    },
    {
      "line": 812,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.optimization.rule_optimizer.DEAP_AVAILABLE\", True):"
    },
    {
      "line": 840,
      "kind": "patch",
      "snippet": "patch(\"prompt_improver.optimization.rule_optimizer.DEAP_AVAILABLE\", True),"
    },
    {
      "line": 841,
      "kind": "patch",
      "snippet": "patch("
    },
    {
      "line": 900,
      "kind": "patch",
      "snippet": "with patch(\"prompt_improver.optimization.rule_optimizer.DEAP_AVAILABLE\", True):"
    }
  ],
  "tests/unit/rules/test_linguistic_quality_rule.py": [
    {
      "line": 5,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import MagicMock, patch"
    }
  ],
  "tests/unit/security/test_adversarial_robustness.py": [
    {
      "line": 25,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, MagicMock, patch"
    },
    {
      "line": 47,
      "kind": "mock_class",
      "snippet": "class MockAdversarialAttack:"
    },
    {
      "line": 129,
      "kind": "mock_class",
      "snippet": "class MockRobustnessEvaluator:"
    },
    {
      "line": 209,
      "kind": "mock_class",
      "snippet": "class MockDefenseSystem:"
    },
    {
      "line": 279,
      "kind": "mock_fixture",
      "snippet": "def mock_model():"
    }
  ],
  "tests/unit/security/test_authentication.py": [
    {
      "line": 22,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, MagicMock, patch"
    },
    {
      "line": 37,
      "kind": "mock_class",
      "snippet": "class MockAuthenticationService:"
    },
    {
      "line": 190,
      "kind": "patch",
      "snippet": "with patch(\"datetime.datetime\") as mock_datetime:"
    }
  ],
  "tests/unit/security/test_authorization.py": [
    {
      "line": 22,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, MagicMock, patch"
    },
    {
      "line": 122,
      "kind": "mock_class",
      "snippet": "class MockAuthorizationService:"
    }
  ],
  "tests/unit/security/test_input_sanitization.py": [
    {
      "line": 26,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import MagicMock, patch"
    }
  ],
  "tests/unit/security/test_mcp_server_security.py": [
    {
      "line": 21,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, MagicMock, patch"
    },
    {
      "line": 185,
      "kind": "patch",
      "snippet": "with patch(\"src.prompt_improver.service.security.datetime\") as mock_datetime:"
    },
    {
      "line": 445,
      "kind": "sample_data_dict",
      "snippet": "huge_request = {\"method\": \"test\", \"params\": {\"data\": huge_data}}"
    },
    {
      "line": 585,
      "kind": "sample_data_dict",
      "snippet": "large_request = {\"method\": \"test\", \"data\": \"x\" * (2 * 1024 * 1024)}"
    }
  ],
  "tests/unit/security/test_ml_security_validation.py": [
    {
      "line": 23,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, MagicMock, patch"
    },
    {
      "line": 29,
      "kind": "mock_class",
      "snippet": "class MockMLSecurityValidator:"
    }
  ],
  "tests/unit/security/test_privacy_preserving.py": [
    {
      "line": 26,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, MagicMock, patch"
    },
    {
      "line": 46,
      "kind": "mock_class",
      "snippet": "class MockDifferentialPrivacy:"
    },
    {
      "line": 104,
      "kind": "mock_class",
      "snippet": "class MockFederatedLearning:"
    }
  ],
  "tests/unit/security/test_prompt_data_protection.py": [
    {
      "line": 20,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, MagicMock, patch"
    },
    {
      "line": 32,
      "kind": "MagicMock",
      "snippet": "console = MagicMock()"
    },
    {
      "line": 32,
      "kind": "Mock",
      "snippet": "console = MagicMock()"
    },
    {
      "line": 189,
      "kind": "AsyncMock",
      "snippet": "mock_session = AsyncMock()"
    },
    {
      "line": 189,
      "kind": "Mock",
      "snippet": "mock_session = AsyncMock()"
    },
    {
      "line": 190,
      "kind": "MagicMock",
      "snippet": "mock_result = MagicMock()"
    },
    {
      "line": 190,
      "kind": "Mock",
      "snippet": "mock_result = MagicMock()"
    },
    {
      "line": 194,
      "kind": "patch",
      "snippet": "with patch("
    },
    {
      "line": 333,
      "kind": "AsyncMock",
      "snippet": "mock_session = AsyncMock()"
    },
    {
      "line": 333,
      "kind": "Mock",
      "snippet": "mock_session = AsyncMock()"
    },
    {
      "line": 336,
      "kind": "MagicMock",
      "snippet": "mock_audit_result = MagicMock()"
    },
    {
      "line": 336,
      "kind": "Mock",
      "snippet": "mock_audit_result = MagicMock()"
    },
    {
      "line": 346,
      "kind": "MagicMock",
      "snippet": "mock_types_result = MagicMock()"
    },
    {
      "line": 346,
      "kind": "Mock",
      "snippet": "mock_types_result = MagicMock()"
    },
    {
      "line": 355,
      "kind": "patch",
      "snippet": "with patch("
    }
  ],
  "tests/unit/services/health/test_redis_monitor.py": [
    {
      "line": 5,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import Mock, patch, AsyncMock"
    },
    {
      "line": 26,
      "kind": "patch",
      "snippet": "with patch('src.prompt_improver.services.health.redis_monitor.redis_client') as mock_redis:"
    },
    {
      "line": 34,
      "kind": "patch",
      "snippet": "with patch('src.prompt_improver.services.health.redis_monitor.redis_client') as mock_redis:"
    },
    {
      "line": 42,
      "kind": "patch",
      "snippet": "with patch('src.prompt_improver.services.health.redis_monitor.redis_client') as mock_redis:"
    },
    {
      "line": 43,
      "kind": "AsyncMock",
      "snippet": "mock_redis.set = AsyncMock()"
    },
    {
      "line": 43,
      "kind": "Mock",
      "snippet": "mock_redis.set = AsyncMock()"
    },
    {
      "line": 51,
      "kind": "patch",
      "snippet": "with patch('src.prompt_improver.services.health.redis_monitor.redis_client') as mock_redis:"
    },
    {
      "line": 52,
      "kind": "AsyncMock",
      "snippet": "mock_redis.set = AsyncMock()"
    },
    {
      "line": 52,
      "kind": "Mock",
      "snippet": "mock_redis.set = AsyncMock()"
    },
    {
      "line": 80,
      "kind": "patch",
      "snippet": "with patch('src.prompt_improver.services.health.redis_monitor.redis_client') as mock_redis:"
    },
    {
      "line": 81,
      "kind": "Mock",
      "snippet": "mock_pool = Mock()"
    },
    {
      "line": 132,
      "kind": "patch",
      "snippet": "with patch('src.prompt_improver.services.health.redis_monitor.schedule_redis_health_checks') as mock_schedule:"
    },
    {
      "line": 133,
      "kind": "AsyncMock",
      "snippet": "mock_schedule.return_value = AsyncMock()"
    },
    {
      "line": 133,
      "kind": "Mock",
      "snippet": "mock_schedule.return_value = AsyncMock()"
    },
    {
      "line": 139,
      "kind": "patch",
      "snippet": "with patch('src.prompt_improver.services.health.redis_monitor.schedule_redis_health_checks') as mock_schedule:"
    }
  ],
  "tests/unit/test_advanced_memory_optimization.py": [
    {
      "line": 10,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import MagicMock, patch"
    },
    {
      "line": 68,
      "kind": "patch",
      "snippet": "@patch(\"psutil.virtual_memory\")"
    },
    {
      "line": 68,
      "kind": "patch_decorator",
      "snippet": "@patch(\"psutil.virtual_memory\")"
    }
  ],
  "tests/unit/test_bootstrap_ci.py": [
    {
      "line": 9,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import MagicMock, patch"
    },
    {
      "line": 115,
      "kind": "patch",
      "snippet": "with patch(\"numpy.array\") as mock_array:"
    }
  ],
  "tests/unit/test_cuped_variance_reduction.py": [
    {
      "line": 18,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, MagicMock, patch"
    },
    {
      "line": 449,
      "kind": "AsyncMock",
      "snippet": "mock_session = AsyncMock()"
    },
    {
      "line": 449,
      "kind": "Mock",
      "snippet": "mock_session = AsyncMock()"
    },
    {
      "line": 452,
      "kind": "MagicMock",
      "snippet": "mock_experiment = MagicMock()"
    },
    {
      "line": 452,
      "kind": "Mock",
      "snippet": "mock_experiment = MagicMock()"
    }
  ],
  "tests/unit/test_log_follower_guard.py": [
    {
      "line": 4,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import patch, MagicMock, mock_open"
    },
    {
      "line": 11,
      "kind": "mock_fixture",
      "snippet": "def mock_log_data():"
    },
    {
      "line": 24,
      "kind": "patch",
      "snippet": "with patch('pathlib.Path.exists', return_value=True), \\"
    },
    {
      "line": 25,
      "kind": "patch",
      "snippet": "patch('pathlib.Path.home', return_value=Path('/mock/home')), \\"
    },
    {
      "line": 26,
      "kind": "patch",
      "snippet": "patch('subprocess.Popen') as mock_popen, \\"
    },
    {
      "line": 27,
      "kind": "patch",
      "snippet": "patch('shutil.which', return_value='/usr/bin/tail'):"
    },
    {
      "line": 30,
      "kind": "MagicMock",
      "snippet": "mock_process = MagicMock()"
    },
    {
      "line": 30,
      "kind": "Mock",
      "snippet": "mock_process = MagicMock()"
    },
    {
      "line": 45,
      "kind": "patch",
      "snippet": "with patch('pathlib.Path.exists', return_value=True), \\"
    },
    {
      "line": 46,
      "kind": "patch",
      "snippet": "patch('pathlib.Path.home', return_value=Path('/mock/home')), \\"
    },
    {
      "line": 47,
      "kind": "patch",
      "snippet": "patch('builtins.open', mock_open(read_data=mock_log_content)):"
    },
    {
      "line": 57,
      "kind": "patch",
      "snippet": "with patch('pathlib.Path.exists', return_value=False):"
    },
    {
      "line": 68,
      "kind": "patch",
      "snippet": "with patch('pathlib.Path.exists', return_value=True), \\"
    },
    {
      "line": 69,
      "kind": "patch",
      "snippet": "patch('pathlib.Path.home', return_value=Path('/mock/home')), \\"
    },
    {
      "line": 70,
      "kind": "patch",
      "snippet": "patch('builtins.open', mock_open(read_data=mock_log_content)):"
    },
    {
      "line": 82,
      "kind": "patch",
      "snippet": "with patch('pathlib.Path.exists', return_value=True), \\"
    },
    {
      "line": 83,
      "kind": "patch",
      "snippet": "patch('pathlib.Path.home', return_value=Path('/mock/home')), \\"
    },
    {
      "line": 84,
      "kind": "patch",
      "snippet": "patch('builtins.open', mock_open(read_data=mock_log_content)):"
    }
  ],
  "tests/unit/test_metrics_timer.py": [
    {
      "line": 5,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import MagicMock, patch"
    },
    {
      "line": 81,
      "kind": "patch",
      "snippet": "@patch(\"src.prompt_improver.services.health.metrics.PROMETHEUS_AVAILABLE\", False)"
    },
    {
      "line": 81,
      "kind": "patch_decorator",
      "snippet": "@patch(\"src.prompt_improver.services.health.metrics.PROMETHEUS_AVAILABLE\", False)"
    },
    {
      "line": 97,
      "kind": "patch",
      "snippet": "@patch(\"src.prompt_improver.services.health.metrics.PROMETHEUS_AVAILABLE\", False)"
    },
    {
      "line": 97,
      "kind": "patch_decorator",
      "snippet": "@patch(\"src.prompt_improver.services.health.metrics.PROMETHEUS_AVAILABLE\", False)"
    },
    {
      "line": 138,
      "kind": "MagicMock",
      "snippet": "result = MagicMock(status=\"healthy\")"
    },
    {
      "line": 138,
      "kind": "Mock",
      "snippet": "result = MagicMock(status=\"healthy\")"
    },
    {
      "line": 162,
      "kind": "MagicMock",
      "snippet": "result = MagicMock(status=\"healthy\")"
    },
    {
      "line": 162,
      "kind": "Mock",
      "snippet": "result = MagicMock(status=\"healthy\")"
    }
  ],
  "tests/unit/test_metrics_validation_framework.py": [
    {
      "line": 18,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, MagicMock, patch"
    }
  ],
  "tests/unit/test_ml_fmea_framework.py": [
    {
      "line": 18,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, MagicMock, patch"
    }
  ],
  "tests/unit/test_psycopg3_server_side_binding.py": [
    {
      "line": 4,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, MagicMock, patch"
    },
    {
      "line": 25,
      "kind": "mock_fixture",
      "snippet": "def mock_config(self):"
    },
    {
      "line": 41,
      "kind": "mock_fixture",
      "snippet": "def mock_client(self, mock_config):"
    },
    {
      "line": 45,
      "kind": "MagicMock",
      "snippet": "client.metrics = MagicMock()"
    },
    {
      "line": 45,
      "kind": "Mock",
      "snippet": "client.metrics = MagicMock()"
    },
    {
      "line": 46,
      "kind": "MagicMock",
      "snippet": "client.metrics.record_query = MagicMock()"
    },
    {
      "line": 46,
      "kind": "Mock",
      "snippet": "client.metrics.record_query = MagicMock()"
    },
    {
      "line": 53,
      "kind": "AsyncMock",
      "snippet": "mock_conn = AsyncMock()"
    },
    {
      "line": 53,
      "kind": "Mock",
      "snippet": "mock_conn = AsyncMock()"
    },
    {
      "line": 54,
      "kind": "AsyncMock",
      "snippet": "mock_cursor = AsyncMock()"
    },
    {
      "line": 54,
      "kind": "Mock",
      "snippet": "mock_cursor = AsyncMock()"
    },
    {
      "line": 62,
      "kind": "AsyncMock",
      "snippet": "mock_client.connection = AsyncMock()"
    },
    {
      "line": 62,
      "kind": "Mock",
      "snippet": "mock_client.connection = AsyncMock()"
    },
    {
      "line": 63,
      "kind": "AsyncMock",
      "snippet": "mock_client.connection.return_value.__aenter__ = AsyncMock("
    },
    {
      "line": 63,
      "kind": "Mock",
      "snippet": "mock_client.connection.return_value.__aenter__ = AsyncMock("
    },
    {
      "line": 66,
      "kind": "AsyncMock",
      "snippet": "mock_client.connection.return_value.__aexit__ = AsyncMock(return_value=None)"
    },
    {
      "line": 66,
      "kind": "Mock",
      "snippet": "mock_client.connection.return_value.__aexit__ = AsyncMock(return_value=None)"
    },
    {
      "line": 93,
      "kind": "AsyncMock",
      "snippet": "mock_conn = AsyncMock()"
    },
    {
      "line": 93,
      "kind": "Mock",
      "snippet": "mock_conn = AsyncMock()"
    },
    {
      "line": 94,
      "kind": "AsyncMock",
      "snippet": "mock_cursor = AsyncMock()"
    },
    {
      "line": 94,
      "kind": "Mock",
      "snippet": "mock_cursor = AsyncMock()"
    },
    {
      "line": 99,
      "kind": "AsyncMock",
      "snippet": "mock_client.connection = AsyncMock()"
    },
    {
      "line": 99,
      "kind": "Mock",
      "snippet": "mock_client.connection = AsyncMock()"
    },
    {
      "line": 100,
      "kind": "AsyncMock",
      "snippet": "mock_client.connection.return_value.__aenter__ = AsyncMock("
    },
    {
      "line": 100,
      "kind": "Mock",
      "snippet": "mock_client.connection.return_value.__aenter__ = AsyncMock("
    },
    {
      "line": 103,
      "kind": "AsyncMock",
      "snippet": "mock_client.connection.return_value.__aexit__ = AsyncMock(return_value=None)"
    },
    {
      "line": 103,
      "kind": "Mock",
      "snippet": "mock_client.connection.return_value.__aexit__ = AsyncMock(return_value=None)"
    },
    {
      "line": 124,
      "kind": "AsyncMock",
      "snippet": "mock_conn = AsyncMock()"
    },
    {
      "line": 124,
      "kind": "Mock",
      "snippet": "mock_conn = AsyncMock()"
    },
    {
      "line": 125,
      "kind": "AsyncMock",
      "snippet": "mock_cursor = AsyncMock()"
    },
    {
      "line": 125,
      "kind": "Mock",
      "snippet": "mock_cursor = AsyncMock()"
    },
    {
      "line": 130,
      "kind": "AsyncMock",
      "snippet": "mock_client.connection = AsyncMock()"
    },
    {
      "line": 130,
      "kind": "Mock",
      "snippet": "mock_client.connection = AsyncMock()"
    },
    {
      "line": 131,
      "kind": "AsyncMock",
      "snippet": "mock_client.connection.return_value.__aenter__ = AsyncMock("
    },
    {
      "line": 131,
      "kind": "Mock",
      "snippet": "mock_client.connection.return_value.__aenter__ = AsyncMock("
    },
    {
      "line": 134,
      "kind": "AsyncMock",
      "snippet": "mock_client.connection.return_value.__aexit__ = AsyncMock(return_value=None)"
    },
    {
      "line": 134,
      "kind": "Mock",
      "snippet": "mock_client.connection.return_value.__aexit__ = AsyncMock(return_value=None)"
    },
    {
      "line": 163,
      "kind": "AsyncMock",
      "snippet": "mock_conn = AsyncMock()"
    },
    {
      "line": 163,
      "kind": "Mock",
      "snippet": "mock_conn = AsyncMock()"
    },
    {
      "line": 164,
      "kind": "AsyncMock",
      "snippet": "mock_cursor = AsyncMock()"
    },
    {
      "line": 164,
      "kind": "Mock",
      "snippet": "mock_cursor = AsyncMock()"
    },
    {
      "line": 169,
      "kind": "AsyncMock",
      "snippet": "mock_client.connection = AsyncMock()"
    },
    {
      "line": 169,
      "kind": "Mock",
      "snippet": "mock_client.connection = AsyncMock()"
    },
    {
      "line": 170,
      "kind": "AsyncMock",
      "snippet": "mock_client.connection.return_value.__aenter__ = AsyncMock("
    },
    {
      "line": 170,
      "kind": "Mock",
      "snippet": "mock_client.connection.return_value.__aenter__ = AsyncMock("
    },
    {
      "line": 173,
      "kind": "AsyncMock",
      "snippet": "mock_client.connection.return_value.__aexit__ = AsyncMock(return_value=None)"
    },
    {
      "line": 173,
      "kind": "Mock",
      "snippet": "mock_client.connection.return_value.__aexit__ = AsyncMock(return_value=None)"
    },
    {
      "line": 196,
      "kind": "AsyncMock",
      "snippet": "mock_conn = AsyncMock()"
    },
    {
      "line": 196,
      "kind": "Mock",
      "snippet": "mock_conn = AsyncMock()"
    },
    {
      "line": 197,
      "kind": "AsyncMock",
      "snippet": "mock_cursor = AsyncMock()"
    },
    {
      "line": 197,
      "kind": "Mock",
      "snippet": "mock_cursor = AsyncMock()"
    },
    {
      "line": 202,
      "kind": "AsyncMock",
      "snippet": "mock_client.connection = AsyncMock()"
    },
    {
      "line": 202,
      "kind": "Mock",
      "snippet": "mock_client.connection = AsyncMock()"
    },
    {
      "line": 203,
      "kind": "AsyncMock",
      "snippet": "mock_client.connection.return_value.__aenter__ = AsyncMock("
    },
    {
      "line": 203,
      "kind": "Mock",
      "snippet": "mock_client.connection.return_value.__aenter__ = AsyncMock("
    },
    {
      "line": 206,
      "kind": "AsyncMock",
      "snippet": "mock_client.connection.return_value.__aexit__ = AsyncMock(return_value=None)"
    },
    {
      "line": 206,
      "kind": "Mock",
      "snippet": "mock_client.connection.return_value.__aexit__ = AsyncMock(return_value=None)"
    },
    {
      "line": 224,
      "kind": "AsyncMock",
      "snippet": "mock_conn = AsyncMock()"
    },
    {
      "line": 224,
      "kind": "Mock",
      "snippet": "mock_conn = AsyncMock()"
    },
    {
      "line": 225,
      "kind": "AsyncMock",
      "snippet": "mock_cursor = AsyncMock()"
    },
    {
      "line": 225,
      "kind": "Mock",
      "snippet": "mock_cursor = AsyncMock()"
    },
    {
      "line": 230,
      "kind": "AsyncMock",
      "snippet": "mock_client.connection = AsyncMock()"
    },
    {
      "line": 230,
      "kind": "Mock",
      "snippet": "mock_client.connection = AsyncMock()"
    },
    {
      "line": 231,
      "kind": "AsyncMock",
      "snippet": "mock_client.connection.return_value.__aenter__ = AsyncMock("
    },
    {
      "line": 231,
      "kind": "Mock",
      "snippet": "mock_client.connection.return_value.__aenter__ = AsyncMock("
    },
    {
      "line": 234,
      "kind": "AsyncMock",
      "snippet": "mock_client.connection.return_value.__aexit__ = AsyncMock(return_value=None)"
    },
    {
      "line": 234,
      "kind": "Mock",
      "snippet": "mock_client.connection.return_value.__aexit__ = AsyncMock(return_value=None)"
    }
  ],
  "tests/unit/test_rule_engine_unit.py": [
    {
      "line": 9,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import MagicMock, patch"
    }
  ],
  "tests/unit/test_session_store_ttl.py": [
    {
      "line": 10,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import AsyncMock, MagicMock, patch"
    }
  ],
  "tests/unit/utils/test_redis_cache.py": [
    {
      "line": 14,
      "kind": "fakeredis",
      "snippet": "- Uses fakeredis for Redis mocking"
    },
    {
      "line": 23,
      "kind": "unittest_mock_import",
      "snippet": "from unittest.mock import patch, MagicMock, AsyncMock"
    },
    {
      "line": 25,
      "kind": "fakeredis",
      "snippet": "import fakeredis.aioredis"
    },
    {
      "line": 49,
      "kind": "fakeredis",
      "snippet": "fake_redis = fakeredis.aioredis.FakeRedis(decode_responses=False)"
    },
    {
      "line": 51,
      "kind": "patch",
      "snippet": "with patch(\"src.prompt_improver.utils.redis_cache.redis_client\", fake_redis):"
    },
    {
      "line": 165,
      "kind": "patch",
      "snippet": "with patch(\"src.prompt_improver.utils.redis_cache.redis_client\") as mock_client:"
    },
    {
      "line": 203,
      "kind": "fakeredis",
      "snippet": "fake_redis = fakeredis.aioredis.FakeRedis(decode_responses=False)"
    },
    {
      "line": 204,
      "kind": "patch",
      "snippet": "with patch(\"src.prompt_improver.utils.redis_cache.redis_client\", fake_redis):"
    },
    {
      "line": 375,
      "kind": "fakeredis",
      "snippet": "fake_redis = fakeredis.aioredis.FakeRedis(decode_responses=False)"
    },
    {
      "line": 376,
      "kind": "patch",
      "snippet": "with patch(\"src.prompt_improver.utils.redis_cache.redis_client\", fake_redis):"
    },
    {
      "line": 406,
      "kind": "patch",
      "snippet": "with patch(\"lz4.frame.compress\") as mock_compress:"
    },
    {
      "line": 415,
      "kind": "patch",
      "snippet": "with patch(\"src.prompt_improver.utils.redis_cache.redis_client\") as mock_client:"
    },
    {
      "line": 424,
      "kind": "patch",
      "snippet": "with patch(\"src.prompt_improver.utils.redis_cache.redis_client\") as mock_client:"
    },
    {
      "line": 451,
      "kind": "fakeredis",
      "snippet": "fake_redis = fakeredis.aioredis.FakeRedis(decode_responses=False)"
    },
    {
      "line": 453,
      "kind": "patch",
      "snippet": "with patch(\"src.prompt_improver.utils.redis_cache.redis_client\", fake_redis):"
    },
    {
      "line": 472,
      "kind": "fakeredis",
      "snippet": "fake_redis = fakeredis.aioredis.FakeRedis(decode_responses=False)"
    },
    {
      "line": 473,
      "kind": "patch",
      "snippet": "with patch(\"src.prompt_improver.utils.redis_cache.redis_client\", fake_redis):"
    }
  ]
}